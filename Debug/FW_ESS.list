
FW_ESS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007c5c  08007c5c  00008c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c9c  08007c9c  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007c9c  08007c9c  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c9c  08007c9c  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c9c  08007c9c  00008c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ca0  08007ca0  00008ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007ca4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000000c  08007cb0  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08007cb0  000093b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101c3  00000000  00000000  00009035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003075  00000000  00000000  000191f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001c270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca3  00000000  00000000  0001d320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001957d  00000000  00000000  0001dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146d2  00000000  00000000  00037540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d59  00000000  00000000  0004bc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  000dd9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e1ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c44 	.word	0x08007c44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08007c44 	.word	0x08007c44

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000752:	4a19      	ldr	r2, [pc, #100]	@ (80007b8 <MX_ADC2_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_ADC2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_ADC2_Init+0x74>)
 800076a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800076e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077c:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_ADC2_Init+0x74>)
 800077e:	f000 fd09 	bl	8001194 <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fadf 	bl	8000d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800078c:	2301      	movs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_ADC2_Init+0x74>)
 800079e:	f000 ffbd 	bl	800171c <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80007a8:	f000 facf 	bl	8000d4a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000028 	.word	0x20000028
 80007b8:	40012800 	.word	0x40012800

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a14      	ldr	r2, [pc, #80]	@ (8000828 <HAL_ADC_MspInit+0x6c>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d121      	bne.n	8000820 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a12      	ldr	r2, [pc, #72]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <HAL_ADC_MspInit+0x70>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3
    PA4     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = VFB_LOAD_ADC_Pin|VFB_BANK_A_ADC_Pin|VFB_BANK_B_ADC_Pin|VFB_CHARGE_ADC_Pin;
 800080c:	231e      	movs	r3, #30
 800080e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <HAL_ADC_MspInit+0x74>)
 800081c:	f001 f9f6 	bl	8001c0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40012800 	.word	0x40012800
 800082c:	40021000 	.word	0x40021000
 8000830:	40010800 	.word	0x40010800

08000834 <ADC_ReadChannel>:
  * @brief  Read a specific ADC channel
  * @param  channel: ADC channel to read
  * @retval Raw ADC value
  */
uint16_t ADC_ReadChannel(uint32_t channel)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
  uint16_t adcValue = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	82fb      	strh	r3, [r7, #22]

  // Configure ADC channel
  sConfig.Channel = channel;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000850:	2301      	movs	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000854:	2306      	movs	r3, #6
 8000856:	613b      	str	r3, [r7, #16]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <ADC_ReadChannel+0x60>)
 8000860:	f000 ff5c 	bl	800171c <HAL_ADC_ConfigChannel>

  // Start ADC conversion
  HAL_ADC_Start(&hadc2);
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <ADC_ReadChannel+0x60>)
 8000866:	f000 fd6d 	bl	8001344 <HAL_ADC_Start>

  // Wait for conversion to complete
  if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK) {
 800086a:	2164      	movs	r1, #100	@ 0x64
 800086c:	4809      	ldr	r0, [pc, #36]	@ (8000894 <ADC_ReadChannel+0x60>)
 800086e:	f000 fe43 	bl	80014f8 <HAL_ADC_PollForConversion>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d104      	bne.n	8000882 <ADC_ReadChannel+0x4e>
    // Read ADC value
    adcValue = HAL_ADC_GetValue(&hadc2);
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <ADC_ReadChannel+0x60>)
 800087a:	f000 ff43 	bl	8001704 <HAL_ADC_GetValue>
 800087e:	4603      	mov	r3, r0
 8000880:	82fb      	strh	r3, [r7, #22]
  }

  // Stop ADC conversion
  HAL_ADC_Stop(&hadc2);
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <ADC_ReadChannel+0x60>)
 8000884:	f000 fe0c 	bl	80014a0 <HAL_ADC_Stop>

  return adcValue;
 8000888:	8afb      	ldrh	r3, [r7, #22]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000028 	.word	0x20000028

08000898 <ADC_ConvertToVoltage>:
  * @brief  Convert ADC raw value to actual voltage
  * @param  adcValue: Raw ADC value
  * @retval Voltage in volts
  */
float ADC_ConvertToVoltage(uint16_t adcValue)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
  // Convert ADC value to voltage using the voltage divider ratio
  // First convert to the ADC input voltage
  float voltage = (float)adcValue * ADC_REFERENCE / ADC_RESOLUTION;
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd07 	bl	80002b8 <__aeabi_ui2f>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4909      	ldr	r1, [pc, #36]	@ (80008d4 <ADC_ConvertToVoltage+0x3c>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fd5a 	bl	8000368 <__aeabi_fmul>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4908      	ldr	r1, [pc, #32]	@ (80008d8 <ADC_ConvertToVoltage+0x40>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe09 	bl	80004d0 <__aeabi_fdiv>
 80008be:	4603      	mov	r3, r0
 80008c0:	60fb      	str	r3, [r7, #12]

  // Then apply the voltage divider ratio to get the actual voltage
  return voltage * VOLTAGE_DIVIDER_RATIO;
 80008c2:	4906      	ldr	r1, [pc, #24]	@ (80008dc <ADC_ConvertToVoltage+0x44>)
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fd4f 	bl	8000368 <__aeabi_fmul>
 80008ca:	4603      	mov	r3, r0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40533333 	.word	0x40533333
 80008d8:	457ff000 	.word	0x457ff000
 80008dc:	40a00000 	.word	0x40a00000

080008e0 <ADC_ReadAll>:
  * @brief  Read all ADC channels for system voltages
  * @param  voltages: Array to store the voltage values (in volts)
  * @retval None
  */
void ADC_ReadAll(float* voltages)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  // Read LOAD voltage (ADC channel 1 - PA1)
  voltages[LOAD] = ADC_ConvertToVoltage(ADC_ReadChannel(ADC_CHANNEL_1));
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff ffa3 	bl	8000834 <ADC_ReadChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f103 040c 	add.w	r4, r3, #12
 80008f8:	4610      	mov	r0, r2
 80008fa:	f7ff ffcd 	bl	8000898 <ADC_ConvertToVoltage>
 80008fe:	4603      	mov	r3, r0
 8000900:	6023      	str	r3, [r4, #0]

  // Read BANK_A voltage (ADC channel 2 - PA2)
  voltages[BANK_A] = ADC_ConvertToVoltage(ADC_ReadChannel(ADC_CHANNEL_2));
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff ff96 	bl	8000834 <ADC_ReadChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ffc4 	bl	8000898 <ADC_ConvertToVoltage>
 8000910:	4602      	mov	r2, r0
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]

  // Read BANK_B voltage (ADC channel 3 - PA3)
  voltages[BANK_B] = ADC_ConvertToVoltage(ADC_ReadChannel(ADC_CHANNEL_3));
 8000916:	2003      	movs	r0, #3
 8000918:	f7ff ff8c 	bl	8000834 <ADC_ReadChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	1d1c      	adds	r4, r3, #4
 8000924:	4610      	mov	r0, r2
 8000926:	f7ff ffb7 	bl	8000898 <ADC_ConvertToVoltage>
 800092a:	4603      	mov	r3, r0
 800092c:	6023      	str	r3, [r4, #0]

  // Read CHARGE voltage (ADC channel 4 - PA4)
  voltages[CHARGE] = ADC_ConvertToVoltage(ADC_ReadChannel(ADC_CHANNEL_4));
 800092e:	2004      	movs	r0, #4
 8000930:	f7ff ff80 	bl	8000834 <ADC_ReadChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f103 0408 	add.w	r4, r3, #8
 800093e:	4610      	mov	r0, r2
 8000940:	f7ff ffaa 	bl	8000898 <ADC_ConvertToVoltage>
 8000944:	4603      	mov	r3, r0
 8000946:	6023      	str	r3, [r4, #0]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}

08000950 <BATTERY_Update>:
/**
  * @brief  Update battery state
  * @retval None
  */
void BATTERY_Update(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  // This function is called periodically to update battery state
  // and handle low battery warning
  // The actual voltage measurement is done elsewhere (ADC_ReadAll)
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <BATTERY_CalculateLevel>:
  * @brief  Calculate battery level from voltage
  * @param  voltage: Battery voltage
  * @retval Battery level (0-100%)
  */
uint8_t BATTERY_CalculateLevel(float voltage)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  int level;

  // Check if voltage is below minimum
  if (voltage <= BATTERY_MIN_VOLTAGE) {
 8000964:	4924      	ldr	r1, [pc, #144]	@ (80009f8 <BATTERY_CalculateLevel+0x9c>)
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fea6 	bl	80006b8 <__aeabi_fcmple>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <BATTERY_CalculateLevel+0x1a>
    return 0;
 8000972:	2300      	movs	r3, #0
 8000974:	e03c      	b.n	80009f0 <BATTERY_CalculateLevel+0x94>
  }

  // Check if voltage is above maximum
  if (voltage >= BATTERY_MAX_VOLTAGE) {
 8000976:	4921      	ldr	r1, [pc, #132]	@ (80009fc <BATTERY_CalculateLevel+0xa0>)
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fea7 	bl	80006cc <__aeabi_fcmpge>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <BATTERY_CalculateLevel+0x2c>
    return 100;
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	e033      	b.n	80009f0 <BATTERY_CalculateLevel+0x94>
  }

  // Calculate level as percentage between min and max
  level = (int)((voltage - BATTERY_MIN_VOLTAGE) /
 8000988:	491b      	ldr	r1, [pc, #108]	@ (80009f8 <BATTERY_CalculateLevel+0x9c>)
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fbe2 	bl	8000154 <__aeabi_fsub>
 8000990:	4603      	mov	r3, r0
 8000992:	491b      	ldr	r1, [pc, #108]	@ (8000a00 <BATTERY_CalculateLevel+0xa4>)
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fd9b 	bl	80004d0 <__aeabi_fdiv>
 800099a:	4603      	mov	r3, r0
                (BATTERY_MAX_VOLTAGE - BATTERY_MIN_VOLTAGE) * 100.0f);
 800099c:	4919      	ldr	r1, [pc, #100]	@ (8000a04 <BATTERY_CalculateLevel+0xa8>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fce2 	bl	8000368 <__aeabi_fmul>
 80009a4:	4603      	mov	r3, r0
  level = (int)((voltage - BATTERY_MIN_VOLTAGE) /
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fea4 	bl	80006f4 <__aeabi_f2iz>
 80009ac:	4603      	mov	r3, r0
 80009ae:	60fb      	str	r3, [r7, #12]

  // Ensure result is within 0-100 range
  if (level < 0) level = 0;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da01      	bge.n	80009ba <BATTERY_CalculateLevel+0x5e>
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  if (level > 100) level = 100;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b64      	cmp	r3, #100	@ 0x64
 80009be:	dd01      	ble.n	80009c4 <BATTERY_CalculateLevel+0x68>
 80009c0:	2364      	movs	r3, #100	@ 0x64
 80009c2:	60fb      	str	r3, [r7, #12]

  // Check if battery is low
  batteryLowFlag = BATTERY_IsLow(voltage);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 f823 	bl	8000a10 <BATTERY_IsLow>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <BATTERY_CalculateLevel+0xac>)
 80009d0:	701a      	strb	r2, [r3, #0]

  // Update warning LED if needed
  HAL_GPIO_WritePin(WARNING_LOW_VOLTAGE_GPIO_Port, WARNING_LOW_VOLTAGE_Pin,
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <BATTERY_CalculateLevel+0xac>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e6:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <BATTERY_CalculateLevel+0xb0>)
 80009e8:	f001 faab 	bl	8001f42 <HAL_GPIO_WritePin>
                    batteryLowFlag ? GPIO_PIN_SET : GPIO_PIN_RESET);

  return (uint8_t)level;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	b2db      	uxtb	r3, r3
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	41300000 	.word	0x41300000
 80009fc:	41666666 	.word	0x41666666
 8000a00:	40599998 	.word	0x40599998
 8000a04:	42c80000 	.word	0x42c80000
 8000a08:	20000058 	.word	0x20000058
 8000a0c:	40010c00 	.word	0x40010c00

08000a10 <BATTERY_IsLow>:
  * @brief  Check if battery is low
  * @param  voltage: Battery voltage
  * @retval 1 if battery is low, 0 otherwise
  */
uint8_t BATTERY_IsLow(float voltage)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  // Return 1 if voltage is below low threshold
  return (voltage < BATTERY_LOW_VOLTAGE) ? 1 : 0;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	4906      	ldr	r1, [pc, #24]	@ (8000a38 <BATTERY_IsLow+0x28>)
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fe40 	bl	80006a4 <__aeabi_fcmplt>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <BATTERY_IsLow+0x1e>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	461c      	mov	r4, r3
 8000a2e:	b2e3      	uxtb	r3, r4
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	41380000 	.word	0x41380000

08000a3c <FAULT_Check>:
/**
  * @brief  Check for faults
  * @retval None
  */
void FAULT_Check(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
  uint8_t currentFaults = FAULT_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
  uint32_t currentTime = HAL_GetTick();
 8000a46:	f000 fb9b 	bl	8001180 <HAL_GetTick>
 8000a4a:	6078      	str	r0, [r7, #4]

  // Check BLOCK_200A fault line (PB1)
  if (HAL_GPIO_ReadPin(FLT_BLOCK_200A_GPIO_Port, FLT_BLOCK_200A_Pin) == GPIO_PIN_RESET) {
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4837      	ldr	r0, [pc, #220]	@ (8000b2c <FAULT_Check+0xf0>)
 8000a50:	f001 fa60 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <FAULT_Check+0x26>
    currentFaults |= FAULT_BLOCK_200A;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
  }

  // Check BLOCK_100A fault line (PA7)
  if (HAL_GPIO_ReadPin(FLT_BLOCK_100A_GPIO_Port, FLT_BLOCK_100A_Pin) == GPIO_PIN_RESET) {
 8000a62:	2180      	movs	r1, #128	@ 0x80
 8000a64:	4832      	ldr	r0, [pc, #200]	@ (8000b30 <FAULT_Check+0xf4>)
 8000a66:	f001 fa55 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d103      	bne.n	8000a78 <FAULT_Check+0x3c>
    currentFaults |= FAULT_BLOCK_100A;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	73fb      	strb	r3, [r7, #15]
  }

  // Check CHARGE fault line (PA6)
  if (HAL_GPIO_ReadPin(FLT_CHARGE_GPIO_Port, FLT_CHARGE_Pin) == GPIO_PIN_RESET) {
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	482d      	ldr	r0, [pc, #180]	@ (8000b30 <FAULT_Check+0xf4>)
 8000a7c:	f001 fa4a 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <FAULT_Check+0x52>
    currentFaults |= FAULT_CHARGE;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	73fb      	strb	r3, [r7, #15]
  }

  // Check FAST_CHARGE fault line (PA5)
  if (HAL_GPIO_ReadPin(FLT_FAST_CHARGE_GPIO_Port, FLT_FAST_CHARGE_Pin) == GPIO_PIN_RESET) {
 8000a8e:	2120      	movs	r1, #32
 8000a90:	4827      	ldr	r0, [pc, #156]	@ (8000b30 <FAULT_Check+0xf4>)
 8000a92:	f001 fa3f 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d103      	bne.n	8000aa4 <FAULT_Check+0x68>
    currentFaults |= FAULT_FAST_CHARGE;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	73fb      	strb	r3, [r7, #15]
  }

  // Update fault state
  for (int i = 0; i < 4; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	e037      	b.n	8000b1a <FAULT_Check+0xde>
    uint8_t faultBit = (1 << i);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	70fb      	strb	r3, [r7, #3]

    // If fault is active
    if (currentFaults & faultBit) {
 8000ab4:	7bfa      	ldrb	r2, [r7, #15]
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00c      	beq.n	8000ada <FAULT_Check+0x9e>
      // Set fault state
      faultState |= faultBit;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <FAULT_Check+0xf8>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <FAULT_Check+0xf8>)
 8000acc:	701a      	strb	r2, [r3, #0]
      // Update timestamp
      faultTimestamps[i] = currentTime;
 8000ace:	491a      	ldr	r1, [pc, #104]	@ (8000b38 <FAULT_Check+0xfc>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ad8:	e01c      	b.n	8000b14 <FAULT_Check+0xd8>
    }
    // If fault is not active but was active
    else if (faultState & faultBit) {
 8000ada:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <FAULT_Check+0xf8>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d015      	beq.n	8000b14 <FAULT_Check+0xd8>
      // Check if timeout has elapsed
      if (currentTime - faultTimestamps[i] > FAULT_TIMEOUT) {
 8000ae8:	4a13      	ldr	r2, [pc, #76]	@ (8000b38 <FAULT_Check+0xfc>)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d90b      	bls.n	8000b14 <FAULT_Check+0xd8>
        // Clear fault state
        faultState &= ~faultBit;
 8000afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	b25a      	sxtb	r2, r3
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <FAULT_Check+0xf8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <FAULT_Check+0xf8>)
 8000b12:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	ddc4      	ble.n	8000aaa <FAULT_Check+0x6e>
      }
    }
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010c00 	.word	0x40010c00
 8000b30:	40010800 	.word	0x40010800
 8000b34:	20000059 	.word	0x20000059
 8000b38:	2000005c 	.word	0x2000005c

08000b3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a39      	ldr	r2, [pc, #228]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b56:	f043 0320 	orr.w	r3, r3, #32
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b34      	ldr	r3, [pc, #208]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a33      	ldr	r2, [pc, #204]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b31      	ldr	r3, [pc, #196]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b2e      	ldr	r3, [pc, #184]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a2d      	ldr	r2, [pc, #180]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_BLOCK_200A_Pin|WARNING_LOW_VOLTAGE_Pin|CTRL_LED_100_Pin|CTRL_LED_50_Pin
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f64f 4131 	movw	r1, #64561	@ 0xfc31
 8000b9e:	4828      	ldr	r0, [pc, #160]	@ (8000c40 <MX_GPIO_Init+0x104>)
 8000ba0:	f001 f9cf 	bl	8001f42 <HAL_GPIO_WritePin>
                          |CTRL_LED_0_Pin|CTRL_LED_CHARGING_Pin|CTRL_LED_CHECK_CHARGER_Pin|LATCH_IN1_Pin
                          |LATCH_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_FAST_CHARGE_Pin|EN_CHARGE_Pin|EN_BLOCK_100A_Pin|CTRL_SPK_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000baa:	4826      	ldr	r0, [pc, #152]	@ (8000c44 <MX_GPIO_Init+0x108>)
 8000bac:	f001 f9c9 	bl	8001f42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FLT_FAST_CHARGE_Pin|FLT_CHARGE_Pin|FLT_BLOCK_100A_Pin;
 8000bb0:	23e0      	movs	r3, #224	@ 0xe0
 8000bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_GPIO_Init+0x10c>)
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4820      	ldr	r0, [pc, #128]	@ (8000c44 <MX_GPIO_Init+0x108>)
 8000bc4:	f001 f822 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = EN_BLOCK_200A_Pin|WARNING_LOW_VOLTAGE_Pin|CTRL_LED_100_Pin|CTRL_LED_50_Pin
 8000bc8:	f64f 4331 	movw	r3, #64561	@ 0xfc31
 8000bcc:	613b      	str	r3, [r7, #16]
                          |CTRL_LED_0_Pin|CTRL_LED_CHARGING_Pin|CTRL_LED_CHECK_CHARGER_Pin|LATCH_IN1_Pin
                          |LATCH_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <MX_GPIO_Init+0x104>)
 8000be2:	f001 f813 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLT_BLOCK_200A_Pin;
 8000be6:	2302      	movs	r3, #2
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_GPIO_Init+0x10c>)
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLT_BLOCK_200A_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_GPIO_Init+0x104>)
 8000bfa:	f001 f807 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EN_FAST_CHARGE_Pin|EN_CHARGE_Pin|EN_BLOCK_100A_Pin|CTRL_SPK_Pin;
 8000bfe:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <MX_GPIO_Init+0x108>)
 8000c18:	f000 fff8 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LATCH_FB1_Pin|LATCH_FB2_Pin;
 8000c1c:	23c0      	movs	r3, #192	@ 0xc0
 8000c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <MX_GPIO_Init+0x104>)
 8000c30:	f000 ffec 	bl	8001c0c <HAL_GPIO_Init>

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	40010800 	.word	0x40010800
 8000c48:	10110000 	.word	0x10110000

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fa3e 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f81e 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f7ff ff70 	bl	8000b3c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000c5c:	f7ff fd70 	bl	8000740 <MX_ADC2_Init>
  //MX_USB_DEVICE_Init();
  MX_TIM2_Init();
 8000c60:	f000 f9a8 	bl	8000fb4 <MX_TIM2_Init>
/*/	if (commandReady) {
	  ProcessCommand();
	  commandReady = 0;
	}*/

  ADC_ReadAll(systemState.voltages); // Read ADC directly
 8000c64:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <main+0x40>)
 8000c66:	f7ff fe3b 	bl	80008e0 <ADC_ReadAll>
  systemState.batteryLevel = BATTERY_CalculateLevel(systemState.voltages[BANK_A]);
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <main+0x44>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe74 	bl	800095c <BATTERY_CalculateLevel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <main+0x44>)
 8000c7a:	701a      	strb	r2, [r3, #0]

	/* Update system state */
	SYSTEM_Update();
 8000c7c:	f000 f8d4 	bl	8000e28 <SYSTEM_Update>

	/* Check for faults */
	FAULT_Check();
 8000c80:	f7ff fedc 	bl	8000a3c <FAULT_Check>

	/* Update battery state */
	BATTERY_Update();
 8000c84:	f7ff fe64 	bl	8000950 <BATTERY_Update>
  ADC_ReadAll(systemState.voltages); // Read ADC directly
 8000c88:	bf00      	nop
 8000c8a:	e7eb      	b.n	8000c64 <main+0x18>
 8000c8c:	20000070 	.word	0x20000070
 8000c90:	2000006c 	.word	0x2000006c

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	@ 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c9e:	2228      	movs	r2, #40	@ 0x28
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f006 ffa2 	bl	8007bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ce0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fce4 	bl	80036b8 <HAL_RCC_OscConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cf6:	f000 f828 	bl	8000d4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2102      	movs	r1, #2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 ff50 	bl	8003bbc <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d22:	f000 f812 	bl	8000d4a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d26:	2302      	movs	r3, #2
 8000d28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d2e:	60fb      	str	r3, [r7, #12]
  //PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 f8bc 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d3e:	f000 f804 	bl	8000d4a <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3750      	adds	r7, #80	@ 0x50
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4e:	b672      	cpsid	i
}
 8000d50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d52:	bf00      	nop
 8000d54:	e7fd      	b.n	8000d52 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <HAL_MspInit+0x5c>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <HAL_MspInit+0x5c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_MspInit+0x5c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <HAL_MspInit+0x5c>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <HAL_MspInit+0x5c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <HAL_MspInit+0x5c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_MspInit+0x60>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <HAL_MspInit+0x60>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f9a6 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e1a:	f001 f8aa 	bl	8001f72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000d8 	.word	0x200000d8

08000e28 <SYSTEM_Update>:
/**
  * @brief  Update system status
  * @retval None
  */
void SYSTEM_Update(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  // Update hardware states if there were any changes
  UpdateLEDs();
 8000e2c:	f000 f806 	bl	8000e3c <UpdateLEDs>
  UpdateChargeMode();
 8000e30:	f000 f85a 	bl	8000ee8 <UpdateChargeMode>
  UpdatePowerOutput();
 8000e34:	f000 f892 	bl	8000f5c <UpdatePowerOutput>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <UpdateLEDs>:
/**
  * @brief  Update LEDs based on current state
  * @retval None
  */
static void UpdateLEDs(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  // Update LED 0%
  HAL_GPIO_WritePin(CTRL_LED_0_GPIO_Port, CTRL_LED_0_Pin,
                    ledStates[LED_0_PERCENT] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <UpdateLEDs+0xa4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
  HAL_GPIO_WritePin(CTRL_LED_0_GPIO_Port, CTRL_LED_0_Pin,
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bf14      	ite	ne
 8000e48:	2301      	movne	r3, #1
 8000e4a:	2300      	moveq	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e54:	4823      	ldr	r0, [pc, #140]	@ (8000ee4 <UpdateLEDs+0xa8>)
 8000e56:	f001 f874 	bl	8001f42 <HAL_GPIO_WritePin>

  // Update LED 50%
  HAL_GPIO_WritePin(CTRL_LED_50_GPIO_Port, CTRL_LED_50_Pin,
                    ledStates[LED_50_PERCENT] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <UpdateLEDs+0xa4>)
 8000e5c:	785b      	ldrb	r3, [r3, #1]
  HAL_GPIO_WritePin(CTRL_LED_50_GPIO_Port, CTRL_LED_50_Pin,
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6e:	481d      	ldr	r0, [pc, #116]	@ (8000ee4 <UpdateLEDs+0xa8>)
 8000e70:	f001 f867 	bl	8001f42 <HAL_GPIO_WritePin>

  // Update LED 100%
  HAL_GPIO_WritePin(CTRL_LED_100_GPIO_Port, CTRL_LED_100_Pin,
                    ledStates[LED_100_PERCENT] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <UpdateLEDs+0xa4>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
  HAL_GPIO_WritePin(CTRL_LED_100_GPIO_Port, CTRL_LED_100_Pin,
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf14      	ite	ne
 8000e7c:	2301      	movne	r3, #1
 8000e7e:	2300      	moveq	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e88:	4816      	ldr	r0, [pc, #88]	@ (8000ee4 <UpdateLEDs+0xa8>)
 8000e8a:	f001 f85a 	bl	8001f42 <HAL_GPIO_WritePin>

  // Update LED Charging
  HAL_GPIO_WritePin(CTRL_LED_CHARGING_GPIO_Port, CTRL_LED_CHARGING_Pin,
                    ledStates[LED_CHARGING] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <UpdateLEDs+0xa4>)
 8000e90:	78db      	ldrb	r3, [r3, #3]
  HAL_GPIO_WritePin(CTRL_LED_CHARGING_GPIO_Port, CTRL_LED_CHARGING_Pin,
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf14      	ite	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	2300      	moveq	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ea2:	4810      	ldr	r0, [pc, #64]	@ (8000ee4 <UpdateLEDs+0xa8>)
 8000ea4:	f001 f84d 	bl	8001f42 <HAL_GPIO_WritePin>

  // Update LED Check Charger
  HAL_GPIO_WritePin(CTRL_LED_CHECK_CHARGER_GPIO_Port, CTRL_LED_CHECK_CHARGER_Pin,
                    ledStates[LED_CHECK_CHARGER] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <UpdateLEDs+0xa4>)
 8000eaa:	791b      	ldrb	r3, [r3, #4]
  HAL_GPIO_WritePin(CTRL_LED_CHECK_CHARGER_GPIO_Port, CTRL_LED_CHECK_CHARGER_Pin,
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ebc:	4809      	ldr	r0, [pc, #36]	@ (8000ee4 <UpdateLEDs+0xa8>)
 8000ebe:	f001 f840 	bl	8001f42 <HAL_GPIO_WritePin>

  // Update Warning LED
  HAL_GPIO_WritePin(WARNING_LOW_VOLTAGE_GPIO_Port, WARNING_LOW_VOLTAGE_Pin,
                    ledStates[LED_WARNING] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <UpdateLEDs+0xa4>)
 8000ec4:	795b      	ldrb	r3, [r3, #5]
  HAL_GPIO_WritePin(WARNING_LOW_VOLTAGE_GPIO_Port, WARNING_LOW_VOLTAGE_Pin,
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	2300      	moveq	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ed6:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <UpdateLEDs+0xa8>)
 8000ed8:	f001 f833 	bl	8001f42 <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000080 	.word	0x20000080
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <UpdateChargeMode>:
/**
  * @brief  Update charge mode based on current setting
  * @retval None
  */
static void UpdateChargeMode(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  switch (currentChargeMode) {
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <UpdateChargeMode+0x6c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d020      	beq.n	8000f36 <UpdateChargeMode+0x4e>
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	dc2b      	bgt.n	8000f50 <UpdateChargeMode+0x68>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <UpdateChargeMode+0x1a>
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d00d      	beq.n	8000f1c <UpdateChargeMode+0x34>
      // Enable fast charge, disable normal charge
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, GPIO_PIN_SET);
      break;
  }
}
 8000f00:	e026      	b.n	8000f50 <UpdateChargeMode+0x68>
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f08:	4813      	ldr	r0, [pc, #76]	@ (8000f58 <UpdateChargeMode+0x70>)
 8000f0a:	f001 f81a 	bl	8001f42 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f14:	4810      	ldr	r0, [pc, #64]	@ (8000f58 <UpdateChargeMode+0x70>)
 8000f16:	f001 f814 	bl	8001f42 <HAL_GPIO_WritePin>
      break;
 8000f1a:	e019      	b.n	8000f50 <UpdateChargeMode+0x68>
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f22:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <UpdateChargeMode+0x70>)
 8000f24:	f001 f80d 	bl	8001f42 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2e:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <UpdateChargeMode+0x70>)
 8000f30:	f001 f807 	bl	8001f42 <HAL_GPIO_WritePin>
      break;
 8000f34:	e00c      	b.n	8000f50 <UpdateChargeMode+0x68>
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <UpdateChargeMode+0x70>)
 8000f3e:	f001 f800 	bl	8001f42 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <UpdateChargeMode+0x70>)
 8000f4a:	f000 fffa 	bl	8001f42 <HAL_GPIO_WritePin>
      break;
 8000f4e:	bf00      	nop
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000086 	.word	0x20000086
 8000f58:	40010800 	.word	0x40010800

08000f5c <UpdatePowerOutput>:
/**
  * @brief  Update power output based on current setting
  * @retval None
  */
static void UpdatePowerOutput(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  // Enable/disable power output by controlling the blocking MOSFETs
  if (powerOutputEnabled) {
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <UpdatePowerOutput+0x40>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <UpdatePowerOutput+0x24>
    // Enable power output
    HAL_GPIO_WritePin(EN_BLOCK_100A_GPIO_Port, EN_BLOCK_100A_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f6e:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <UpdatePowerOutput+0x44>)
 8000f70:	f000 ffe7 	bl	8001f42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_BLOCK_200A_GPIO_Port, EN_BLOCK_200A_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2101      	movs	r1, #1
 8000f78:	480a      	ldr	r0, [pc, #40]	@ (8000fa4 <UpdatePowerOutput+0x48>)
 8000f7a:	f000 ffe2 	bl	8001f42 <HAL_GPIO_WritePin>
  } else {
    // Disable power output
    HAL_GPIO_WritePin(EN_BLOCK_100A_GPIO_Port, EN_BLOCK_100A_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(EN_BLOCK_200A_GPIO_Port, EN_BLOCK_200A_Pin, GPIO_PIN_RESET);
  }
}
 8000f7e:	e00a      	b.n	8000f96 <UpdatePowerOutput+0x3a>
    HAL_GPIO_WritePin(EN_BLOCK_100A_GPIO_Port, EN_BLOCK_100A_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <UpdatePowerOutput+0x44>)
 8000f88:	f000 ffdb 	bl	8001f42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_BLOCK_200A_GPIO_Port, EN_BLOCK_200A_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <UpdatePowerOutput+0x48>)
 8000f92:	f000 ffd6 	bl	8001f42 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000087 	.word	0x20000087
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00

08000fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <MX_TIM2_Init+0x94>)
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <MX_TIM2_Init+0x94>)
 8000fda:	2247      	movs	r2, #71	@ 0x47
 8000fdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_TIM2_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_TIM2_Init+0x94>)
 8000fe6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_TIM2_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_TIM2_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff8:	4813      	ldr	r0, [pc, #76]	@ (8001048 <MX_TIM2_Init+0x94>)
 8000ffa:	f003 f8c5 	bl	8004188 <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001004:	f7ff fea1 	bl	8000d4a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <MX_TIM2_Init+0x94>)
 8001016:	f003 f906 	bl	8004226 <HAL_TIM_ConfigClockSource>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001020:	f7ff fe93 	bl	8000d4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_TIM2_Init+0x94>)
 8001032:	f003 fac3 	bl	80045bc <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800103c:	f7ff fe85 	bl	8000d4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000088 	.word	0x20000088

0800104c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800105c:	d10b      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_TIM_Base_MspInit+0x34>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <HAL_TIM_Base_MspInit+0x34>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <HAL_TIM_Base_MspInit+0x34>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000

08001084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff ff90 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800108a:	490c      	ldr	r1, [pc, #48]	@ (80010bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800108c:	4a0c      	ldr	r2, [pc, #48]	@ (80010c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a0:	4c09      	ldr	r4, [pc, #36]	@ (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f006 fda5 	bl	8007bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff fdcb 	bl	8000c4c <main>
  bx lr
 80010b6:	4770      	bx	lr
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c0:	08007ca4 	.word	0x08007ca4
  ldr r2, =_sbss
 80010c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010c8:	200003b0 	.word	0x200003b0

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_Init+0x28>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <HAL_Init+0x28>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 fd5f 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fe34 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fd69 	bl	8001bf2 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 fd3f 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a03      	ldr	r2, [pc, #12]	@ (800117c <HAL_IncTick+0x20>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000008 	.word	0x20000008
 800117c:	200000d0 	.word	0x200000d0

08001180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	@ (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	200000d0 	.word	0x200000d0

08001194 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0be      	b.n	8001334 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d109      	bne.n	80011d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff faf2 	bl	80007bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fbf1 	bl	80019c0 <ADC_ConversionStop_Disable>
 80011de:	4603      	mov	r3, r0
 80011e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 8099 	bne.w	8001322 <HAL_ADC_Init+0x18e>
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 8095 	bne.w	8001322 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001200:	f023 0302 	bic.w	r3, r3, #2
 8001204:	f043 0202 	orr.w	r2, r3, #2
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001214:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7b1b      	ldrb	r3, [r3, #12]
 800121a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800121c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	4313      	orrs	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800122c:	d003      	beq.n	8001236 <HAL_ADC_Init+0xa2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d102      	bne.n	800123c <HAL_ADC_Init+0xa8>
 8001236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800123a:	e000      	b.n	800123e <HAL_ADC_Init+0xaa>
 800123c:	2300      	movs	r3, #0
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7d1b      	ldrb	r3, [r3, #20]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d119      	bne.n	8001280 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7b1b      	ldrb	r3, [r3, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	3b01      	subs	r3, #1
 800125a:	035a      	lsls	r2, r3, #13
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	e00b      	b.n	8001280 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	f043 0220 	orr.w	r2, r3, #32
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	430a      	orrs	r2, r1
 8001292:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	4b28      	ldr	r3, [pc, #160]	@ (800133c <HAL_ADC_Init+0x1a8>)
 800129c:	4013      	ands	r3, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012b0:	d003      	beq.n	80012ba <HAL_ADC_Init+0x126>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d104      	bne.n	80012c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	3b01      	subs	r3, #1
 80012c0:	051b      	lsls	r3, r3, #20
 80012c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ca:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <HAL_ADC_Init+0x1ac>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d10b      	bne.n	8001300 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	f023 0303 	bic.w	r3, r3, #3
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012fe:	e018      	b.n	8001332 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001304:	f023 0312 	bic.w	r3, r3, #18
 8001308:	f043 0210 	orr.w	r2, r3, #16
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001314:	f043 0201 	orr.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001320:	e007      	b.n	8001332 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001326:	f043 0210 	orr.w	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001332:	7dfb      	ldrb	r3, [r7, #23]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	ffe1f7fd 	.word	0xffe1f7fd
 8001340:	ff1f0efe 	.word	0xff1f0efe

08001344 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_ADC_Start+0x1a>
 800135a:	2302      	movs	r3, #2
 800135c:	e098      	b.n	8001490 <HAL_ADC_Start+0x14c>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fad0 	bl	800190c <ADC_Enable>
 800136c:	4603      	mov	r3, r0
 800136e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f040 8087 	bne.w	8001486 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a41      	ldr	r2, [pc, #260]	@ (8001498 <HAL_ADC_Start+0x154>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d105      	bne.n	80013a2 <HAL_ADC_Start+0x5e>
 8001396:	4b41      	ldr	r3, [pc, #260]	@ (800149c <HAL_ADC_Start+0x158>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d115      	bne.n	80013ce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d026      	beq.n	800140a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013cc:	e01d      	b.n	800140a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a2f      	ldr	r2, [pc, #188]	@ (800149c <HAL_ADC_Start+0x158>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d004      	beq.n	80013ee <HAL_ADC_Start+0xaa>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001498 <HAL_ADC_Start+0x154>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10d      	bne.n	800140a <HAL_ADC_Start+0xc6>
 80013ee:	4b2b      	ldr	r3, [pc, #172]	@ (800149c <HAL_ADC_Start+0x158>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001402:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141a:	f023 0206 	bic.w	r2, r3, #6
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001422:	e002      	b.n	800142a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f06f 0202 	mvn.w	r2, #2
 800143a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001446:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800144a:	d113      	bne.n	8001474 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001450:	4a11      	ldr	r2, [pc, #68]	@ (8001498 <HAL_ADC_Start+0x154>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d105      	bne.n	8001462 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_ADC_Start+0x158>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800145e:	2b00      	cmp	r3, #0
 8001460:	d108      	bne.n	8001474 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	e00c      	b.n	800148e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	e003      	b.n	800148e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40012800 	.word	0x40012800
 800149c:	40012400 	.word	0x40012400

080014a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_Stop+0x1a>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e01a      	b.n	80014f0 <HAL_ADC_Stop+0x50>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fa7c 	bl	80019c0 <ADC_ConversionStop_Disable>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800150e:	f7ff fe37 	bl	8001180 <HAL_GetTick>
 8001512:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0d3      	b.n	80016e2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d131      	bne.n	80015ac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12a      	bne.n	80015ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001556:	e021      	b.n	800159c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155e:	d01d      	beq.n	800159c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_ADC_PollForConversion+0x7e>
 8001566:	f7ff fe0b 	bl	8001180 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d212      	bcs.n	800159c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10b      	bne.n	800159c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	f043 0204 	orr.w	r2, r3, #4
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0a2      	b.n	80016e2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0d6      	beq.n	8001558 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015aa:	e070      	b.n	800168e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015ac:	4b4f      	ldr	r3, [pc, #316]	@ (80016ec <HAL_ADC_PollForConversion+0x1f4>)
 80015ae:	681c      	ldr	r4, [r3, #0]
 80015b0:	2002      	movs	r0, #2
 80015b2:	f002 fd33 	bl	800401c <HAL_RCCEx_GetPeriphCLKFreq>
 80015b6:	4603      	mov	r3, r0
 80015b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6919      	ldr	r1, [r3, #16]
 80015c2:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <HAL_ADC_PollForConversion+0x1f8>)
 80015c4:	400b      	ands	r3, r1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d118      	bne.n	80015fc <HAL_ADC_PollForConversion+0x104>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68d9      	ldr	r1, [r3, #12]
 80015d0:	4b48      	ldr	r3, [pc, #288]	@ (80016f4 <HAL_ADC_PollForConversion+0x1fc>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <HAL_ADC_PollForConversion+0x104>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6919      	ldr	r1, [r3, #16]
 80015de:	4b46      	ldr	r3, [pc, #280]	@ (80016f8 <HAL_ADC_PollForConversion+0x200>)
 80015e0:	400b      	ands	r3, r1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d108      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x100>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68d9      	ldr	r1, [r3, #12]
 80015ec:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <HAL_ADC_PollForConversion+0x204>)
 80015ee:	400b      	ands	r3, r1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x100>
 80015f4:	2314      	movs	r3, #20
 80015f6:	e020      	b.n	800163a <HAL_ADC_PollForConversion+0x142>
 80015f8:	2329      	movs	r3, #41	@ 0x29
 80015fa:	e01e      	b.n	800163a <HAL_ADC_PollForConversion+0x142>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <HAL_ADC_PollForConversion+0x200>)
 8001604:	400b      	ands	r3, r1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_ADC_PollForConversion+0x120>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68d9      	ldr	r1, [r3, #12]
 8001610:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <HAL_ADC_PollForConversion+0x204>)
 8001612:	400b      	ands	r3, r1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <HAL_ADC_PollForConversion+0x13c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6919      	ldr	r1, [r3, #16]
 800161e:	4b38      	ldr	r3, [pc, #224]	@ (8001700 <HAL_ADC_PollForConversion+0x208>)
 8001620:	400b      	ands	r3, r1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d108      	bne.n	8001638 <HAL_ADC_PollForConversion+0x140>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68d9      	ldr	r1, [r3, #12]
 800162c:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <HAL_ADC_PollForConversion+0x208>)
 800162e:	400b      	ands	r3, r1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_ADC_PollForConversion+0x140>
 8001634:	2354      	movs	r3, #84	@ 0x54
 8001636:	e000      	b.n	800163a <HAL_ADC_PollForConversion+0x142>
 8001638:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001640:	e021      	b.n	8001686 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d01a      	beq.n	8001680 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_ADC_PollForConversion+0x168>
 8001650:	f7ff fd96 	bl	8001180 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d20f      	bcs.n	8001680 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d90b      	bls.n	8001680 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	f043 0204 	orr.w	r2, r3, #4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e030      	b.n	80016e2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3301      	adds	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	429a      	cmp	r2, r3
 800168c:	d8d9      	bhi.n	8001642 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f06f 0212 	mvn.w	r2, #18
 8001696:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016ae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016b2:	d115      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000000 	.word	0x20000000
 80016f0:	24924924 	.word	0x24924924
 80016f4:	00924924 	.word	0x00924924
 80016f8:	12492492 	.word	0x12492492
 80016fc:	00492492 	.word	0x00492492
 8001700:	00249249 	.word	0x00249249

08001704 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_ADC_ConfigChannel+0x20>
 8001738:	2302      	movs	r3, #2
 800173a:	e0dc      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x1da>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b06      	cmp	r3, #6
 800174a:	d81c      	bhi.n	8001786 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b05      	subs	r3, #5
 800175e:	221f      	movs	r2, #31
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	4019      	ands	r1, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b05      	subs	r3, #5
 8001778:	fa00 f203 	lsl.w	r2, r0, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	635a      	str	r2, [r3, #52]	@ 0x34
 8001784:	e03c      	b.n	8001800 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d81c      	bhi.n	80017c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b23      	subs	r3, #35	@ 0x23
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4019      	ands	r1, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3b23      	subs	r3, #35	@ 0x23
 80017ba:	fa00 f203 	lsl.w	r2, r0, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80017c6:	e01b      	b.n	8001800 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b41      	subs	r3, #65	@ 0x41
 80017da:	221f      	movs	r2, #31
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4019      	ands	r1, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	3b41      	subs	r3, #65	@ 0x41
 80017f4:	fa00 f203 	lsl.w	r2, r0, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b09      	cmp	r3, #9
 8001806:	d91c      	bls.n	8001842 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68d9      	ldr	r1, [r3, #12]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	3b1e      	subs	r3, #30
 800181a:	2207      	movs	r2, #7
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	4019      	ands	r1, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6898      	ldr	r0, [r3, #8]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	3b1e      	subs	r3, #30
 8001834:	fa00 f203 	lsl.w	r2, r0, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	e019      	b.n	8001876 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6919      	ldr	r1, [r3, #16]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	2207      	movs	r2, #7
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	4019      	ands	r1, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6898      	ldr	r0, [r3, #8]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	fa00 f203 	lsl.w	r2, r0, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b10      	cmp	r3, #16
 800187c:	d003      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001882:	2b11      	cmp	r3, #17
 8001884:	d132      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1d      	ldr	r2, [pc, #116]	@ (8001900 <HAL_ADC_ConfigChannel+0x1e4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d125      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d126      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80018ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d11a      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <HAL_ADC_ConfigChannel+0x1e8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a13      	ldr	r2, [pc, #76]	@ (8001908 <HAL_ADC_ConfigChannel+0x1ec>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	0c9a      	lsrs	r2, r3, #18
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f9      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x1b2>
 80018da:	e007      	b.n	80018ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	f043 0220 	orr.w	r2, r3, #32
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	40012400 	.word	0x40012400
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83

0800190c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b01      	cmp	r3, #1
 8001928:	d040      	beq.n	80019ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <ADC_Enable+0xac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <ADC_Enable+0xb0>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001948:	e002      	b.n	8001950 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3b01      	subs	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f9      	bne.n	800194a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001956:	f7ff fc13 	bl	8001180 <HAL_GetTick>
 800195a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800195c:	e01f      	b.n	800199e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800195e:	f7ff fc0f 	bl	8001180 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d918      	bls.n	800199e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d011      	beq.n	800199e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197e:	f043 0210 	orr.w	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e007      	b.n	80019ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d1d8      	bne.n	800195e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000
 80019bc:	431bde83 	.word	0x431bde83

080019c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d12e      	bne.n	8001a38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ea:	f7ff fbc9 	bl	8001180 <HAL_GetTick>
 80019ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019f0:	e01b      	b.n	8001a2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019f2:	f7ff fbc5 	bl	8001180 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d914      	bls.n	8001a2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d10d      	bne.n	8001a2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	f043 0210 	orr.w	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e007      	b.n	8001a3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d0dc      	beq.n	80019f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	@ (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	@ (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	@ 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	@ 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff90 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff49 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff5e 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb0 	bl	8001b60 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b08b      	sub	sp, #44	@ 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	e169      	b.n	8001ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c20:	2201      	movs	r2, #1
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 8158 	bne.w	8001eee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a9a      	ldr	r2, [pc, #616]	@ (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d05e      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c48:	4a98      	ldr	r2, [pc, #608]	@ (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d875      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c4e:	4a98      	ldr	r2, [pc, #608]	@ (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d058      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c54:	4a96      	ldr	r2, [pc, #600]	@ (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d86f      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c5a:	4a96      	ldr	r2, [pc, #600]	@ (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d052      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c60:	4a94      	ldr	r2, [pc, #592]	@ (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d869      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c66:	4a94      	ldr	r2, [pc, #592]	@ (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04c      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a92      	ldr	r2, [pc, #584]	@ (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d863      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c72:	4a92      	ldr	r2, [pc, #584]	@ (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d046      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c78:	4a90      	ldr	r2, [pc, #576]	@ (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d85d      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d82a      	bhi.n	8001cd8 <HAL_GPIO_Init+0xcc>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d859      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c86:	a201      	add	r2, pc, #4	@ (adr r2, 8001c8c <HAL_GPIO_Init+0x80>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001d07 	.word	0x08001d07
 8001c90:	08001ce1 	.word	0x08001ce1
 8001c94:	08001cf3 	.word	0x08001cf3
 8001c98:	08001d35 	.word	0x08001d35
 8001c9c:	08001d3b 	.word	0x08001d3b
 8001ca0:	08001d3b 	.word	0x08001d3b
 8001ca4:	08001d3b 	.word	0x08001d3b
 8001ca8:	08001d3b 	.word	0x08001d3b
 8001cac:	08001d3b 	.word	0x08001d3b
 8001cb0:	08001d3b 	.word	0x08001d3b
 8001cb4:	08001d3b 	.word	0x08001d3b
 8001cb8:	08001d3b 	.word	0x08001d3b
 8001cbc:	08001d3b 	.word	0x08001d3b
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d3b 	.word	0x08001d3b
 8001cc8:	08001d3b 	.word	0x08001d3b
 8001ccc:	08001d3b 	.word	0x08001d3b
 8001cd0:	08001ce9 	.word	0x08001ce9
 8001cd4:	08001cfd 	.word	0x08001cfd
 8001cd8:	4a79      	ldr	r2, [pc, #484]	@ (8001ec0 <HAL_GPIO_Init+0x2b4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cde:	e02c      	b.n	8001d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e029      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	3304      	adds	r3, #4
 8001cee:	623b      	str	r3, [r7, #32]
          break;
 8001cf0:	e024      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	623b      	str	r3, [r7, #32]
          break;
 8001cfa:	e01f      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	330c      	adds	r3, #12
 8001d02:	623b      	str	r3, [r7, #32]
          break;
 8001d04:	e01a      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e013      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	611a      	str	r2, [r3, #16]
          break;
 8001d26:	e009      	b.n	8001d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	615a      	str	r2, [r3, #20]
          break;
 8001d32:	e003      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          break;
 8001d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	@ 0xff
 8001d40:	d801      	bhi.n	8001d46 <HAL_GPIO_Init+0x13a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_Init+0x13e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2bff      	cmp	r3, #255	@ 0xff
 8001d50:	d802      	bhi.n	8001d58 <HAL_GPIO_Init+0x14c>
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x152>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	3b08      	subs	r3, #8
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	210f      	movs	r1, #15
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	6a39      	ldr	r1, [r7, #32]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80b1 	beq.w	8001eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001da4:	4a48      	ldr	r2, [pc, #288]	@ (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a40      	ldr	r2, [pc, #256]	@ (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <HAL_GPIO_Init+0x1ec>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ed0 <HAL_GPIO_Init+0x2c4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <HAL_GPIO_Init+0x1e8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3e      	ldr	r2, [pc, #248]	@ (8001ed4 <HAL_GPIO_Init+0x2c8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d007      	beq.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e006      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e0a:	492f      	ldr	r1, [pc, #188]	@ (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e24:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	492c      	ldr	r1, [pc, #176]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e32:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4928      	ldr	r1, [pc, #160]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4922      	ldr	r1, [pc, #136]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e5a:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	491e      	ldr	r1, [pc, #120]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4918      	ldr	r1, [pc, #96]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e82:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	4914      	ldr	r1, [pc, #80]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	490e      	ldr	r1, [pc, #56]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e021      	b.n	8001eee <HAL_GPIO_Init+0x2e2>
 8001eaa:	bf00      	nop
 8001eac:	10320000 	.word	0x10320000
 8001eb0:	10310000 	.word	0x10310000
 8001eb4:	10220000 	.word	0x10220000
 8001eb8:	10210000 	.word	0x10210000
 8001ebc:	10120000 	.word	0x10120000
 8001ec0:	10110000 	.word	0x10110000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	40011400 	.word	0x40011400
 8001edc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_GPIO_Init+0x304>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	4909      	ldr	r1, [pc, #36]	@ (8001f10 <HAL_GPIO_Init+0x304>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f47f ae8e 	bne.w	8001c20 <HAL_GPIO_Init+0x14>
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	372c      	adds	r7, #44	@ 0x2c
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e001      	b.n	8001f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	807b      	strh	r3, [r7, #2]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f52:	787b      	ldrb	r3, [r7, #1]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f58:	887a      	ldrh	r2, [r7, #2]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f5e:	e003      	b.n	8001f68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	611a      	str	r2, [r3, #16]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b088      	sub	sp, #32
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 fbfb 	bl	800677a <USB_ReadInterrupts>
 8001f84:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fabb 	bl	800250c <PCD_EP_ISR_Handler>

    return;
 8001f96:	e119      	b.n	80021cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d013      	beq.n	8001fca <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fb4:	b292      	uxth	r2, r2
 8001fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f005 fcb0 	bl	8007920 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f905 	bl	80021d2 <HAL_PCD_SetAddress>

    return;
 8001fc8:	e100      	b.n	80021cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00c      	beq.n	8001fee <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fe6:	b292      	uxth	r2, r2
 8001fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001fec:	e0ee      	b.n	80021cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00c      	beq.n	8002012 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800200a:	b292      	uxth	r2, r2
 800200c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002010:	e0dc      	b.n	80021cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d027      	beq.n	800206c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	b292      	uxth	r2, r2
 8002030:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800203c:	b29a      	uxth	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0208 	bic.w	r2, r2, #8
 8002046:	b292      	uxth	r2, r2
 8002048:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f005 fc9f 	bl	8007990 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002064:	b292      	uxth	r2, r2
 8002066:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800206a:	e0af      	b.n	80021cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8083 	beq.w	800217e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	77fb      	strb	r3, [r7, #31]
 800207c:	e010      	b.n	80020a0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	7ffb      	ldrb	r3, [r7, #31]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	441a      	add	r2, r3
 800208a:	7ffb      	ldrb	r3, [r7, #31]
 800208c:	8812      	ldrh	r2, [r2, #0]
 800208e:	b292      	uxth	r2, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	3320      	adds	r3, #32
 8002094:	443b      	add	r3, r7
 8002096:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	3301      	adds	r3, #1
 800209e:	77fb      	strb	r3, [r7, #31]
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
 80020a2:	2b07      	cmp	r3, #7
 80020a4:	d9eb      	bls.n	800207e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	b292      	uxth	r2, r2
 80020ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	b292      	uxth	r2, r2
 80020d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020d6:	bf00      	nop
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f6      	beq.n	80020d8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020fc:	b292      	uxth	r2, r2
 80020fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002102:	2300      	movs	r3, #0
 8002104:	77fb      	strb	r3, [r7, #31]
 8002106:	e00f      	b.n	8002128 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002108:	7ffb      	ldrb	r3, [r7, #31]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	4611      	mov	r1, r2
 8002110:	7ffa      	ldrb	r2, [r7, #31]
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	440a      	add	r2, r1
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	3320      	adds	r3, #32
 800211a:	443b      	add	r3, r7
 800211c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002120:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002122:	7ffb      	ldrb	r3, [r7, #31]
 8002124:	3301      	adds	r3, #1
 8002126:	77fb      	strb	r3, [r7, #31]
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	2b07      	cmp	r3, #7
 800212c:	d9ec      	bls.n	8002108 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0208 	orr.w	r2, r2, #8
 8002140:	b292      	uxth	r2, r2
 8002142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800214e:	b29a      	uxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002158:	b292      	uxth	r2, r2
 800215a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002166:	b29a      	uxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0204 	orr.w	r2, r2, #4
 8002170:	b292      	uxth	r2, r2
 8002172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f005 fbf0 	bl	800795c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800217c:	e026      	b.n	80021cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00f      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800219a:	b292      	uxth	r2, r2
 800219c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f005 fbaf 	bl	8007904 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021a6:	e011      	b.n	80021cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021c4:	b292      	uxth	r2, r2
 80021c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021ca:	bf00      	nop
  }
}
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_PCD_SetAddress+0x1a>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e012      	b.n	8002212 <HAL_PCD_SetAddress+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f004 faa6 	bl	8006754 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	4608      	mov	r0, r1
 8002224:	4611      	mov	r1, r2
 8002226:	461a      	mov	r2, r3
 8002228:	4603      	mov	r3, r0
 800222a:	70fb      	strb	r3, [r7, #3]
 800222c:	460b      	mov	r3, r1
 800222e:	803b      	strh	r3, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da0e      	bge.n	800225e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f003 0207 	and.w	r2, r3, #7
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	3310      	adds	r3, #16
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	705a      	strb	r2, [r3, #1]
 800225c:	e00e      	b.n	800227c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 0207 	and.w	r2, r3, #7
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002288:	883a      	ldrh	r2, [r7, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	78ba      	ldrb	r2, [r7, #2]
 8002292:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002294:	78bb      	ldrb	r3, [r7, #2]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d102      	bne.n	80022a0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_PCD_EP_Open+0x94>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e00e      	b.n	80022cc <HAL_PCD_EP_Open+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 f9db 	bl	8004678 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80022ca:	7afb      	ldrb	r3, [r7, #11]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	460b      	mov	r3, r1
 80022e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	f003 0207 	and.w	r2, r3, #7
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	b2da      	uxtb	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6979      	ldr	r1, [r7, #20]
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fd66 	bl	8004df8 <USB_EPStartXfer>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	460b      	mov	r3, r1
 8002344:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	f003 0207 	and.w	r2, r3, #7
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	3310      	adds	r3, #16
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2201      	movs	r2, #1
 8002380:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002382:	7afb      	ldrb	r3, [r7, #11]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	b2da      	uxtb	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fd2f 	bl	8004df8 <USB_EPStartXfer>

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	7912      	ldrb	r2, [r2, #4]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e04c      	b.n	800245c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	da0e      	bge.n	80023e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 0207 	and.w	r2, r3, #7
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	3310      	adds	r3, #16
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	705a      	strb	r2, [r3, #1]
 80023e6:	e00c      	b.n	8002402 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	b2da      	uxtb	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_PCD_EP_SetStall+0x7e>
 800241e:	2302      	movs	r3, #2
 8002420:	e01c      	b.n	800245c <HAL_PCD_EP_SetStall+0xb8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68f9      	ldr	r1, [r7, #12]
 8002430:	4618      	mov	r0, r3
 8002432:	f004 f892 	bl	800655a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	2b00      	cmp	r3, #0
 800243e:	d108      	bne.n	8002452 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f004 f9a3 	bl	8006798 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	7912      	ldrb	r2, [r2, #4]
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e040      	b.n	8002504 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002486:	2b00      	cmp	r3, #0
 8002488:	da0e      	bge.n	80024a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 0207 	and.w	r2, r3, #7
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	3310      	adds	r3, #16
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	705a      	strb	r2, [r3, #1]
 80024a6:	e00e      	b.n	80024c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 0207 	and.w	r2, r3, #7
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_PCD_EP_ClrStall+0x82>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e00e      	b.n	8002504 <HAL_PCD_EP_ClrStall+0xa0>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f004 f880 	bl	80065fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b096      	sub	sp, #88	@ 0x58
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002514:	e3bb      	b.n	8002c8e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800251e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002522:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002530:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 8175 	bne.w	8002824 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800253a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d14e      	bne.n	80025e4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002556:	81fb      	strh	r3, [r7, #14]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	89fb      	ldrh	r3, [r7, #14]
 800255e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002566:	b29b      	uxth	r3, r3
 8002568:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3310      	adds	r3, #16
 800256e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	3302      	adds	r3, #2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800259c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	441a      	add	r2, r3
 80025a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025aa:	2100      	movs	r1, #0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f005 f98f 	bl	80078d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7b5b      	ldrb	r3, [r3, #13]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8368 	beq.w	8002c8e <PCD_EP_ISR_Handler+0x782>
 80025be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 8363 	bne.w	8002c8e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7b5b      	ldrb	r3, [r3, #13]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	735a      	strb	r2, [r3, #13]
 80025e2:	e354      	b.n	8002c8e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025ea:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d034      	beq.n	800266c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	3306      	adds	r3, #6
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800262a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800263c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002640:	b29b      	uxth	r3, r3
 8002642:	f004 f8f9 	bl	8006838 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29a      	uxth	r2, r3
 800264e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002652:	4013      	ands	r3, r2
 8002654:	823b      	strh	r3, [r7, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	8a3a      	ldrh	r2, [r7, #16]
 800265c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002660:	b292      	uxth	r2, r2
 8002662:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f005 f906 	bl	8007876 <HAL_PCD_SetupStageCallback>
 800266a:	e310      	b.n	8002c8e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800266c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002670:	2b00      	cmp	r3, #0
 8002672:	f280 830c 	bge.w	8002c8e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29a      	uxth	r2, r3
 800267e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002682:	4013      	ands	r3, r2
 8002684:	83fb      	strh	r3, [r7, #30]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	8bfa      	ldrh	r2, [r7, #30]
 800268c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002690:	b292      	uxth	r2, r2
 8002692:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800269c:	b29b      	uxth	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	3306      	adds	r3, #6
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d019      	beq.n	80026fc <PCD_EP_ISR_Handler+0x1f0>
 80026c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d6:	6959      	ldr	r1, [r3, #20]
 80026d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f004 f8a9 	bl	8006838 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	441a      	add	r2, r3
 80026f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026f4:	2100      	movs	r1, #0
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f005 f8cf 	bl	800789a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002706:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800270a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 82bd 	bne.w	8002c8e <PCD_EP_ISR_Handler+0x782>
 8002714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002718:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800271c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002720:	f000 82b5 	beq.w	8002c8e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4413      	add	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274e:	b29a      	uxth	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b3e      	cmp	r3, #62	@ 0x3e
 800275a:	d91d      	bls.n	8002798 <PCD_EP_ISR_Handler+0x28c>
 800275c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	647b      	str	r3, [r7, #68]	@ 0x44
 8002764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <PCD_EP_ISR_Handler+0x26a>
 8002770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002772:	3b01      	subs	r3, #1
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29a      	uxth	r2, r3
 800277c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277e:	b29b      	uxth	r3, r3
 8002780:	029b      	lsls	r3, r3, #10
 8002782:	b29b      	uxth	r3, r3
 8002784:	4313      	orrs	r3, r2
 8002786:	b29b      	uxth	r3, r3
 8002788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002790:	b29a      	uxth	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	e026      	b.n	80027e6 <PCD_EP_ISR_Handler+0x2da>
 8002798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <PCD_EP_ISR_Handler+0x2aa>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	801a      	strh	r2, [r3, #0]
 80027b4:	e017      	b.n	80027e6 <PCD_EP_ISR_Handler+0x2da>
 80027b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80027be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <PCD_EP_ISR_Handler+0x2c4>
 80027ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027cc:	3301      	adds	r3, #1
 80027ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d8:	b29b      	uxth	r3, r3
 80027da:	029b      	lsls	r3, r3, #10
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4313      	orrs	r3, r2
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f6:	827b      	strh	r3, [r7, #18]
 80027f8:	8a7b      	ldrh	r3, [r7, #18]
 80027fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80027fe:	827b      	strh	r3, [r7, #18]
 8002800:	8a7b      	ldrh	r3, [r7, #18]
 8002802:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002806:	827b      	strh	r3, [r7, #18]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	8a7b      	ldrh	r3, [r7, #18]
 800280e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800281a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800281e:	b29b      	uxth	r3, r3
 8002820:	8013      	strh	r3, [r2, #0]
 8002822:	e234      	b.n	8002c8e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002838:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800283c:	2b00      	cmp	r3, #0
 800283e:	f280 80fc 	bge.w	8002a3a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b29a      	uxth	r2, r3
 8002854:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002858:	4013      	ands	r3, r2
 800285a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002870:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002874:	b292      	uxth	r2, r2
 8002876:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002878:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800288e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002890:	7b1b      	ldrb	r3, [r3, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d125      	bne.n	80028e2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	3306      	adds	r3, #6
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80028c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8092 	beq.w	80029f0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d2:	6959      	ldr	r1, [r3, #20]
 80028d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d6:	88da      	ldrh	r2, [r3, #6]
 80028d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028dc:	f003 ffac 	bl	8006838 <USB_ReadPMA>
 80028e0:	e086      	b.n	80029f0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e4:	78db      	ldrb	r3, [r3, #3]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d10a      	bne.n	8002900 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028ee:	461a      	mov	r2, r3
 80028f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f9d9 	bl	8002caa <HAL_PCD_EP_DB_Receive>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80028fe:	e077      	b.n	80029f0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	441a      	add	r2, r3
 800292c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800293c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002940:	b29b      	uxth	r3, r3
 8002942:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d024      	beq.n	80029a8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	3302      	adds	r3, #2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002986:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800298a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800298e:	2b00      	cmp	r3, #0
 8002990:	d02e      	beq.n	80029f0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002998:	6959      	ldr	r1, [r3, #20]
 800299a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299c:	891a      	ldrh	r2, [r3, #8]
 800299e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029a2:	f003 ff49 	bl	8006838 <USB_ReadPMA>
 80029a6:	e023      	b.n	80029f0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	3306      	adds	r3, #6
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80029d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e2:	6959      	ldr	r1, [r3, #20]
 80029e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e6:	895a      	ldrh	r2, [r3, #10]
 80029e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029ec:	f003 ff24 	bl	8006838 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029f8:	441a      	add	r2, r3
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a06:	441a      	add	r2, r3
 8002a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <PCD_EP_ISR_Handler+0x514>
 8002a14:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d206      	bcs.n	8002a2e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f004 ff37 	bl	800789a <HAL_PCD_DataOutStageCallback>
 8002a2c:	e005      	b.n	8002a3a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a34:	4618      	mov	r0, r3
 8002a36:	f002 f9df 	bl	8004df8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8123 	beq.w	8002c8e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a48:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	3310      	adds	r3, #16
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	441a      	add	r2, r3
 8002a88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9a:	78db      	ldrb	r3, [r3, #3]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f040 80a2 	bne.w	8002be6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aaa:	7b1b      	ldrb	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8093 	beq.w	8002bd8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ab2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d046      	beq.n	8002b4c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d126      	bne.n	8002b14 <PCD_EP_ISR_Handler+0x608>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	4413      	add	r3, r2
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	011a      	lsls	r2, r3, #4
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	e061      	b.n	8002bd8 <PCD_EP_ISR_Handler+0x6cc>
 8002b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d15d      	bne.n	8002bd8 <PCD_EP_ISR_Handler+0x6cc>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	4413      	add	r3, r2
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	011a      	lsls	r2, r3, #4
 8002b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	2200      	movs	r2, #0
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	e045      	b.n	8002bd8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d126      	bne.n	8002ba8 <PCD_EP_ISR_Handler+0x69c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6e:	4413      	add	r3, r2
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	011a      	lsls	r2, r3, #4
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	e017      	b.n	8002bd8 <PCD_EP_ISR_Handler+0x6cc>
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d113      	bne.n	8002bd8 <PCD_EP_ISR_Handler+0x6cc>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bbe:	4413      	add	r3, r2
 8002bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	011a      	lsls	r2, r3, #4
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bca:	4413      	add	r3, r2
 8002bcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f004 fe76 	bl	80078d0 <HAL_PCD_DataInStageCallback>
 8002be4:	e053      	b.n	8002c8e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d146      	bne.n	8002c80 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	3302      	adds	r3, #2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d907      	bls.n	8002c3a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c36:	619a      	str	r2, [r3, #24]
 8002c38:	e002      	b.n	8002c40 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f004 fe3e 	bl	80078d0 <HAL_PCD_DataInStageCallback>
 8002c54:	e01b      	b.n	8002c8e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c5e:	441a      	add	r2, r3
 8002c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c62:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c6c:	441a      	add	r2, r3
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c70:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 f8bd 	bl	8004df8 <USB_EPStartXfer>
 8002c7e:	e006      	b.n	8002c8e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c84:	461a      	mov	r2, r3
 8002c86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f91b 	bl	8002ec4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b21b      	sxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f6ff ac3b 	blt.w	8002516 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3758      	adds	r7, #88	@ 0x58
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b088      	sub	sp, #32
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d07e      	beq.n	8002dc0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	8b7b      	ldrh	r3, [r7, #26]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d306      	bcc.n	8002d04 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	8b7b      	ldrh	r3, [r7, #26]
 8002cfc:	1ad2      	subs	r2, r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	619a      	str	r2, [r3, #24]
 8002d02:	e002      	b.n	8002d0a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d123      	bne.n	8002d5a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2c:	833b      	strh	r3, [r7, #24]
 8002d2e:	8b3b      	ldrh	r3, [r7, #24]
 8002d30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d34:	833b      	strh	r3, [r7, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	8b3b      	ldrh	r3, [r7, #24]
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01f      	beq.n	8002da4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7e:	82fb      	strh	r3, [r7, #22]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	441a      	add	r2, r3
 8002d8e:	8afb      	ldrh	r3, [r7, #22]
 8002d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002da4:	8b7b      	ldrh	r3, [r7, #26]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8087 	beq.w	8002eba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6959      	ldr	r1, [r3, #20]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	891a      	ldrh	r2, [r3, #8]
 8002db8:	8b7b      	ldrh	r3, [r7, #26]
 8002dba:	f003 fd3d 	bl	8006838 <USB_ReadPMA>
 8002dbe:	e07c      	b.n	8002eba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3306      	adds	r3, #6
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	8b7b      	ldrh	r3, [r7, #26]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d306      	bcc.n	8002e02 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	8b7b      	ldrh	r3, [r7, #26]
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	619a      	str	r2, [r3, #24]
 8002e00:	e002      	b.n	8002e08 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d123      	bne.n	8002e58 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2a:	83fb      	strh	r3, [r7, #30]
 8002e2c:	8bfb      	ldrh	r3, [r7, #30]
 8002e2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e32:	83fb      	strh	r3, [r7, #30]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	441a      	add	r2, r3
 8002e42:	8bfb      	ldrh	r3, [r7, #30]
 8002e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11f      	bne.n	8002ea2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7c:	83bb      	strh	r3, [r7, #28]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	441a      	add	r2, r3
 8002e8c:	8bbb      	ldrh	r3, [r7, #28]
 8002e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ea2:	8b7b      	ldrh	r3, [r7, #26]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	6959      	ldr	r1, [r3, #20]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	895a      	ldrh	r2, [r3, #10]
 8002eb4:	8b7b      	ldrh	r3, [r7, #26]
 8002eb6:	f003 fcbf 	bl	8006838 <USB_ReadPMA>
    }
  }

  return count;
 8002eba:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b0a4      	sub	sp, #144	@ 0x90
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 81dd 	beq.w	8003298 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f06:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d907      	bls.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f1e:	1ad2      	subs	r2, r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	e002      	b.n	8002f2c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 80b9 	bne.w	80030a8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d126      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0xc8>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	4413      	add	r3, r2
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	011a      	lsls	r2, r3, #4
 8002f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5e:	4413      	add	r3, r2
 8002f60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f88:	801a      	strh	r2, [r3, #0]
 8002f8a:	e01a      	b.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d116      	bne.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa8:	4413      	add	r3, r2
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	011a      	lsls	r2, r3, #4
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fba:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d126      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	011a      	lsls	r2, r3, #4
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003002:	b29a      	uxth	r2, r3
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	801a      	strh	r2, [r3, #0]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003016:	b29a      	uxth	r2, r3
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	e017      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x18a>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	785b      	ldrb	r3, [r3, #1]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d113      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	4413      	add	r3, r2
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	011a      	lsls	r2, r3, #4
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	4413      	add	r3, r2
 8003042:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	2200      	movs	r2, #0
 800304c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f004 fc3b 	bl	80078d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 82fc 	beq.w	800365e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800307c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003080:	82fb      	strh	r3, [r7, #22]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	8afb      	ldrh	r3, [r7, #22]
 8003092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800309a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800309e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8013      	strh	r3, [r2, #0]
 80030a6:	e2da      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d021      	beq.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80030e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 82ae 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800310a:	441a      	add	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003118:	441a      	add	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	429a      	cmp	r2, r3
 8003128:	d30b      	bcc.n	8003142 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6a1a      	ldr	r2, [r3, #32]
 8003136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	621a      	str	r2, [r3, #32]
 8003140:	e017      	b.n	8003172 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d108      	bne.n	800315c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800314a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800314e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800315a:	e00a      	b.n	8003172 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2200      	movs	r2, #0
 8003170:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d165      	bne.n	8003246 <HAL_PCD_EP_DB_Transmit+0x382>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003188:	b29b      	uxth	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318e:	4413      	add	r3, r2
 8003190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	011a      	lsls	r2, r3, #4
 8003198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319a:	4413      	add	r3, r2
 800319c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80031b8:	d91d      	bls.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x332>
 80031ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x310>
 80031ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d0:	3b01      	subs	r3, #1
 80031d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031dc:	b29b      	uxth	r3, r3
 80031de:	029b      	lsls	r3, r3, #10
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e044      	b.n	8003280 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <HAL_PCD_EP_DB_Transmit+0x350>
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800320c:	b29a      	uxth	r2, r3
 800320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	e035      	b.n	8003280 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800321c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800322a:	3301      	adds	r3, #1
 800322c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29a      	uxth	r2, r3
 8003234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003236:	b29b      	uxth	r3, r3
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	b29b      	uxth	r3, r3
 800323c:	4313      	orrs	r3, r2
 800323e:	b29a      	uxth	r2, r3
 8003240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003242:	801a      	strh	r2, [r3, #0]
 8003244:	e01c      	b.n	8003280 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d118      	bne.n	8003280 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	647b      	str	r3, [r7, #68]	@ 0x44
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003262:	4413      	add	r3, r2
 8003264:	647b      	str	r3, [r7, #68]	@ 0x44
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	011a      	lsls	r2, r3, #4
 800326c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326e:	4413      	add	r3, r2
 8003270:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003274:	643b      	str	r3, [r7, #64]	@ 0x40
 8003276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800327a:	b29a      	uxth	r2, r3
 800327c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800327e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6959      	ldr	r1, [r3, #20]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	891a      	ldrh	r2, [r3, #8]
 800328c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003290:	b29b      	uxth	r3, r3
 8003292:	f003 fa8c 	bl	80067ae <USB_WritePMA>
 8003296:	e1e2      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	3306      	adds	r3, #6
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d307      	bcc.n	80032e0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032d8:	1ad2      	subs	r2, r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	619a      	str	r2, [r3, #24]
 80032de:	e002      	b.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2200      	movs	r2, #0
 80032e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 80c0 	bne.w	8003470 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d126      	bne.n	8003346 <HAL_PCD_EP_DB_Transmit+0x482>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800330c:	4413      	add	r3, r2
 800330e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	011a      	lsls	r2, r3, #4
 8003316:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003318:	4413      	add	r3, r2
 800331a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800331e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003320:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800332a:	b29a      	uxth	r2, r3
 800332c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800332e:	801a      	strh	r2, [r3, #0]
 8003330:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29a      	uxth	r2, r3
 8003340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	e01a      	b.n	800337c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d116      	bne.n	800337c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	667b      	str	r3, [r7, #100]	@ 0x64
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800335c:	b29b      	uxth	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003362:	4413      	add	r3, r2
 8003364:	667b      	str	r3, [r7, #100]	@ 0x64
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	011a      	lsls	r2, r3, #4
 800336c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800336e:	4413      	add	r3, r2
 8003370:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003374:	663b      	str	r3, [r7, #96]	@ 0x60
 8003376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003378:	2200      	movs	r2, #0
 800337a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	677b      	str	r3, [r7, #116]	@ 0x74
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d12b      	bne.n	80033e2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003398:	b29b      	uxth	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800339e:	4413      	add	r3, r2
 80033a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	011a      	lsls	r2, r3, #4
 80033a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033aa:	4413      	add	r3, r2
 80033ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d8:	b29a      	uxth	r2, r3
 80033da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033de:	801a      	strh	r2, [r3, #0]
 80033e0:	e017      	b.n	8003412 <HAL_PCD_EP_DB_Transmit+0x54e>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d113      	bne.n	8003412 <HAL_PCD_EP_DB_Transmit+0x54e>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f8:	4413      	add	r3, r2
 80033fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	011a      	lsls	r2, r3, #4
 8003402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003404:	4413      	add	r3, r2
 8003406:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800340a:	673b      	str	r3, [r7, #112]	@ 0x70
 800340c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800340e:	2200      	movs	r2, #0
 8003410:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f004 fa59 	bl	80078d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 811a 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003444:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003462:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]
 800346e:	e0f6      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d121      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003494:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	f040 80ca 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034d2:	441a      	add	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034e0:	441a      	add	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d30b      	bcc.n	800350a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	6a1a      	ldr	r2, [r3, #32]
 80034fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003502:	1ad2      	subs	r2, r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	621a      	str	r2, [r3, #32]
 8003508:	e017      	b.n	800353a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d108      	bne.n	8003524 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003512:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003522:	e00a      	b.n	800353a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2200      	movs	r2, #0
 8003530:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d165      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0x750>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800355c:	4413      	add	r3, r2
 800355e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	011a      	lsls	r2, r3, #4
 8003566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003568:	4413      	add	r3, r2
 800356a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800356e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003570:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357a:	b29a      	uxth	r2, r3
 800357c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003584:	2b3e      	cmp	r3, #62	@ 0x3e
 8003586:	d91d      	bls.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x700>
 8003588:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x6de>
 800359c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800359e:	3b01      	subs	r3, #1
 80035a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	029b      	lsls	r3, r3, #10
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035bc:	b29a      	uxth	r2, r3
 80035be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	e041      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x784>
 80035c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80035cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	e032      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x784>
 80035e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_PCD_EP_DB_Transmit+0x738>
 80035f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035f8:	3301      	adds	r3, #1
 80035fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29a      	uxth	r2, r3
 8003602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003604:	b29b      	uxth	r3, r3
 8003606:	029b      	lsls	r3, r3, #10
 8003608:	b29b      	uxth	r3, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	b29a      	uxth	r2, r3
 800360e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003610:	801a      	strh	r2, [r3, #0]
 8003612:	e019      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x784>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d115      	bne.n	8003648 <HAL_PCD_EP_DB_Transmit+0x784>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362a:	4413      	add	r3, r2
 800362c:	657b      	str	r3, [r7, #84]	@ 0x54
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	011a      	lsls	r2, r3, #4
 8003634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003636:	4413      	add	r3, r2
 8003638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800363c:	653b      	str	r3, [r7, #80]	@ 0x50
 800363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003642:	b29a      	uxth	r2, r3
 8003644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003646:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	6959      	ldr	r1, [r3, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	895a      	ldrh	r2, [r3, #10]
 8003654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003658:	b29b      	uxth	r3, r3
 800365a:	f003 f8a8 	bl	80067ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003678:	82bb      	strh	r3, [r7, #20]
 800367a:	8abb      	ldrh	r3, [r7, #20]
 800367c:	f083 0310 	eor.w	r3, r3, #16
 8003680:	82bb      	strh	r3, [r7, #20]
 8003682:	8abb      	ldrh	r3, [r7, #20]
 8003684:	f083 0320 	eor.w	r3, r3, #32
 8003688:	82bb      	strh	r3, [r7, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	441a      	add	r2, r3
 8003698:	8abb      	ldrh	r3, [r7, #20]
 800369a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800369e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3790      	adds	r7, #144	@ 0x90
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e272      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8087 	beq.w	80037e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d8:	4b92      	ldr	r3, [pc, #584]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00c      	beq.n	80036fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d112      	bne.n	8003716 <HAL_RCC_OscConfig+0x5e>
 80036f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036fc:	d10b      	bne.n	8003716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fe:	4b89      	ldr	r3, [pc, #548]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d06c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x12c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d168      	bne.n	80037e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e24c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x76>
 8003720:	4b80      	ldr	r3, [pc, #512]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7f      	ldr	r2, [pc, #508]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e02e      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x98>
 8003736:	4b7b      	ldr	r3, [pc, #492]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7a      	ldr	r2, [pc, #488]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800373c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b78      	ldr	r3, [pc, #480]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a77      	ldr	r2, [pc, #476]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e01d      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0xbc>
 800375a:	4b72      	ldr	r3, [pc, #456]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a71      	ldr	r2, [pc, #452]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b6f      	ldr	r3, [pc, #444]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6e      	ldr	r2, [pc, #440]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 8003774:	4b6b      	ldr	r3, [pc, #428]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b68      	ldr	r3, [pc, #416]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a67      	ldr	r2, [pc, #412]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fd fcf4 	bl	8001180 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fd fcf0 	bl	8001180 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e200      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0xe4>
 80037ba:	e014      	b.n	80037e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fce0 	bl	8001180 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fcdc 	bl	8001180 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	@ 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1ec      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	4b53      	ldr	r3, [pc, #332]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x10c>
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d063      	beq.n	80038ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037fe:	4b49      	ldr	r3, [pc, #292]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b08      	cmp	r3, #8
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x18c>
 800380a:	4b46      	ldr	r3, [pc, #280]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b43      	ldr	r3, [pc, #268]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x176>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1c0      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b3d      	ldr	r3, [pc, #244]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4939      	ldr	r1, [pc, #228]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e03a      	b.n	80038ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b36      	ldr	r3, [pc, #216]	@ (8003928 <HAL_RCC_OscConfig+0x270>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fd fc95 	bl	8001180 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385a:	f7fd fc91 	bl	8001180 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1a1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	4b2d      	ldr	r3, [pc, #180]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4927      	ldr	r1, [pc, #156]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <HAL_RCC_OscConfig+0x270>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fd fc74 	bl	8001180 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7fd fc70 	bl	8001180 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e180      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03a      	beq.n	800393c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d019      	beq.n	8003902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b17      	ldr	r3, [pc, #92]	@ (800392c <HAL_RCC_OscConfig+0x274>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fd fc54 	bl	8001180 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fd fc50 	bl	8001180 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e160      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f000 faba 	bl	8003e74 <RCC_Delay>
 8003900:	e01c      	b.n	800393c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003902:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <HAL_RCC_OscConfig+0x274>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7fd fc3a 	bl	8001180 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390e:	e00f      	b.n	8003930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fd fc36 	bl	8001180 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d908      	bls.n	8003930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e146      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
 8003928:	42420000 	.word	0x42420000
 800392c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	4b92      	ldr	r3, [pc, #584]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e9      	bne.n	8003910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a6 	beq.w	8003a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	4b88      	ldr	r3, [pc, #544]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4a87      	ldr	r2, [pc, #540]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003964:	61d3      	str	r3, [r2, #28]
 8003966:	4b85      	ldr	r3, [pc, #532]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b82      	ldr	r3, [pc, #520]	@ (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003982:	4b7f      	ldr	r3, [pc, #508]	@ (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7e      	ldr	r2, [pc, #504]	@ (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fd fbf7 	bl	8001180 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7fd fbf3 	bl	8001180 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b64      	cmp	r3, #100	@ 0x64
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e103      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b75      	ldr	r3, [pc, #468]	@ (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x312>
 80039bc:	4b6f      	ldr	r3, [pc, #444]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6213      	str	r3, [r2, #32]
 80039c8:	e02d      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x334>
 80039d2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4a69      	ldr	r2, [pc, #420]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	6213      	str	r3, [r2, #32]
 80039de:	4b67      	ldr	r3, [pc, #412]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4a66      	ldr	r2, [pc, #408]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	6213      	str	r3, [r2, #32]
 80039ea:	e01c      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x356>
 80039f4:	4b61      	ldr	r3, [pc, #388]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4a60      	ldr	r2, [pc, #384]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6213      	str	r3, [r2, #32]
 8003a00:	4b5e      	ldr	r3, [pc, #376]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4a5d      	ldr	r2, [pc, #372]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6213      	str	r3, [r2, #32]
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a5a      	ldr	r2, [pc, #360]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	4b58      	ldr	r3, [pc, #352]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a57      	ldr	r2, [pc, #348]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7fd fba7 	bl	8001180 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fd fba3 	bl	8001180 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0b1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCC_OscConfig+0x37e>
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fb91 	bl	8001180 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd fb8d 	bl	8001180 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e09b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b40      	ldr	r3, [pc, #256]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ee      	bne.n	8003a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8087 	beq.w	8003bae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa0:	4b36      	ldr	r3, [pc, #216]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d061      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d146      	bne.n	8003b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fd fb61 	bl	8001180 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fd fb5d 	bl	8001180 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e06d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad4:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae8:	d108      	bne.n	8003afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aea:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4921      	ldr	r1, [pc, #132]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003afc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a19      	ldr	r1, [r3, #32]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	491b      	ldr	r1, [pc, #108]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fd fb31 	bl	8001180 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fd fb2d 	bl	8001180 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e03d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b34:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x46a>
 8003b40:	e035      	b.n	8003bae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fd fb1a 	bl	8001180 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fd fb16 	bl	8001180 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e026      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x498>
 8003b6e:	e01e      	b.n	8003bae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e019      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b88:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_OscConfig+0x500>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d106      	bne.n	8003baa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000

08003bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0d0      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d910      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b67      	ldr	r3, [pc, #412]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 0207 	bic.w	r2, r3, #7
 8003be6:	4965      	ldr	r1, [pc, #404]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a52      	ldr	r2, [pc, #328]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d040      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d115      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	4b41      	ldr	r3, [pc, #260]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e073      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06b      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4936      	ldr	r1, [pc, #216]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cac:	f7fd fa68 	bl	8001180 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fd fa64 	bl	8001180 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e053      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b2d      	ldr	r3, [pc, #180]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d210      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b24      	ldr	r3, [pc, #144]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4922      	ldr	r1, [pc, #136]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d36:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <HAL_RCC_ClockConfig+0x1cc>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <HAL_RCC_ClockConfig+0x1d0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd f9c6 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08007c5c 	.word	0x08007c5c
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d002      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d003      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dbe:	e027      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dc2:	613b      	str	r3, [r7, #16]
      break;
 8003dc4:	e027      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	0c9b      	lsrs	r3, r3, #18
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dd0:	5cd3      	ldrb	r3, [r2, r3]
 8003dd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d010      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dde:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	0c5b      	lsrs	r3, r3, #17
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	4a11      	ldr	r2, [pc, #68]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a0d      	ldr	r2, [pc, #52]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003df2:	fb03 f202 	mul.w	r2, r3, r2
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	e004      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0c      	ldr	r2, [pc, #48]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	613b      	str	r3, [r7, #16]
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e12:	613b      	str	r3, [r7, #16]
      break;
 8003e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e16:	693b      	ldr	r3, [r7, #16]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	007a1200 	.word	0x007a1200
 8003e2c:	08007c74 	.word	0x08007c74
 8003e30:	08007c84 	.word	0x08007c84
 8003e34:	003d0900 	.word	0x003d0900

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e3c:	4b02      	ldr	r3, [pc, #8]	@ (8003e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	20000000 	.word	0x20000000

08003e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e50:	f7ff fff2 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	0adb      	lsrs	r3, r3, #11
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	@ (8003e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	08007c6c 	.word	0x08007c6c

08003e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <RCC_Delay+0x34>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0a      	ldr	r2, [pc, #40]	@ (8003eac <RCC_Delay+0x38>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0a5b      	lsrs	r3, r3, #9
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e90:	bf00      	nop
  }
  while (Delay --);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1e5a      	subs	r2, r3, #1
 8003e96:	60fa      	str	r2, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f9      	bne.n	8003e90 <RCC_Delay+0x1c>
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	10624dd3 	.word	0x10624dd3

08003eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d07d      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003edc:	4b4c      	ldr	r3, [pc, #304]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	61d3      	str	r3, [r2, #28]
 8003ee8:	4b49      	ldr	r3, [pc, #292]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	4b46      	ldr	r3, [pc, #280]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d118      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f04:	4b43      	ldr	r3, [pc, #268]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a42      	ldr	r2, [pc, #264]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f10:	f7fd f936 	bl	8001180 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	e008      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f18:	f7fd f932 	bl	8001180 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	@ 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e06d      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f36:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d02e      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d027      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f54:	4b2e      	ldr	r3, [pc, #184]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f64:	4b2c      	ldr	r3, [pc, #176]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f6a:	4a29      	ldr	r2, [pc, #164]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d014      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7fd f901 	bl	8001180 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fd f8fd 	bl	8001180 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e036      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ee      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4917      	ldr	r1, [pc, #92]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d105      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fbc:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	490b      	ldr	r1, [pc, #44]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ff2:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4904      	ldr	r1, [pc, #16]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	40007000 	.word	0x40007000
 8004018:	42420440 	.word	0x42420440

0800401c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b10      	cmp	r3, #16
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b10      	cmp	r3, #16
 8004042:	f200 808a 	bhi.w	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d045      	beq.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d075      	beq.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004052:	e082      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004054:	4b46      	ldr	r3, [pc, #280]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800405a:	4b45      	ldr	r3, [pc, #276]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d07b      	beq.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	0c9b      	lsrs	r3, r3, #18
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	4a41      	ldr	r2, [pc, #260]	@ (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d015      	beq.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800407e:	4b3c      	ldr	r3, [pc, #240]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	0c5b      	lsrs	r3, r3, #17
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	4a3b      	ldr	r2, [pc, #236]	@ (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004098:	4a38      	ldr	r2, [pc, #224]	@ (800417c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e004      	b.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4a34      	ldr	r2, [pc, #208]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80040b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040c0:	d102      	bne.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	61bb      	str	r3, [r7, #24]
      break;
 80040c6:	e04a      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	61bb      	str	r3, [r7, #24]
      break;
 80040d6:	e042      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80040d8:	4b25      	ldr	r3, [pc, #148]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e8:	d108      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80040f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e01f      	b.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004106:	d109      	bne.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004108:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004114:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e00f      	b.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004126:	d11c      	bne.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d016      	beq.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004134:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004138:	61bb      	str	r3, [r7, #24]
      break;
 800413a:	e012      	b.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800413c:	e011      	b.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800413e:	f7ff fe85 	bl	8003e4c <HAL_RCC_GetPCLK2Freq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	0b9b      	lsrs	r3, r3, #14
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	3301      	adds	r3, #1
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	61bb      	str	r3, [r7, #24]
      break;
 8004158:	e004      	b.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800415a:	bf00      	nop
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004162:	bf00      	nop
    }
  }
  return (frequency);
 8004164:	69bb      	ldr	r3, [r7, #24]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	08007c88 	.word	0x08007c88
 8004178:	08007c98 	.word	0x08007c98
 800417c:	007a1200 	.word	0x007a1200
 8004180:	003d0900 	.word	0x003d0900
 8004184:	aaaaaaab 	.word	0xaaaaaaab

08004188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e041      	b.n	800421e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc ff4c 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f000 f8f4 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_TIM_ConfigClockSource+0x1c>
 800423e:	2302      	movs	r3, #2
 8004240:	e0b4      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x186>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004260:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004268:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427a:	d03e      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0xd4>
 800427c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004280:	f200 8087 	bhi.w	8004392 <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004288:	f000 8086 	beq.w	8004398 <HAL_TIM_ConfigClockSource+0x172>
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004290:	d87f      	bhi.n	8004392 <HAL_TIM_ConfigClockSource+0x16c>
 8004292:	2b70      	cmp	r3, #112	@ 0x70
 8004294:	d01a      	beq.n	80042cc <HAL_TIM_ConfigClockSource+0xa6>
 8004296:	2b70      	cmp	r3, #112	@ 0x70
 8004298:	d87b      	bhi.n	8004392 <HAL_TIM_ConfigClockSource+0x16c>
 800429a:	2b60      	cmp	r3, #96	@ 0x60
 800429c:	d050      	beq.n	8004340 <HAL_TIM_ConfigClockSource+0x11a>
 800429e:	2b60      	cmp	r3, #96	@ 0x60
 80042a0:	d877      	bhi.n	8004392 <HAL_TIM_ConfigClockSource+0x16c>
 80042a2:	2b50      	cmp	r3, #80	@ 0x50
 80042a4:	d03c      	beq.n	8004320 <HAL_TIM_ConfigClockSource+0xfa>
 80042a6:	2b50      	cmp	r3, #80	@ 0x50
 80042a8:	d873      	bhi.n	8004392 <HAL_TIM_ConfigClockSource+0x16c>
 80042aa:	2b40      	cmp	r3, #64	@ 0x40
 80042ac:	d058      	beq.n	8004360 <HAL_TIM_ConfigClockSource+0x13a>
 80042ae:	2b40      	cmp	r3, #64	@ 0x40
 80042b0:	d86f      	bhi.n	8004392 <HAL_TIM_ConfigClockSource+0x16c>
 80042b2:	2b30      	cmp	r3, #48	@ 0x30
 80042b4:	d064      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0x15a>
 80042b6:	2b30      	cmp	r3, #48	@ 0x30
 80042b8:	d86b      	bhi.n	8004392 <HAL_TIM_ConfigClockSource+0x16c>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d060      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0x15a>
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d867      	bhi.n	8004392 <HAL_TIM_ConfigClockSource+0x16c>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d05c      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0x15a>
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d05a      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0x15a>
 80042ca:	e062      	b.n	8004392 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042dc:	f000 f94f 	bl	800457e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
      break;
 80042f8:	e04f      	b.n	800439a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800430a:	f000 f938 	bl	800457e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800431c:	609a      	str	r2, [r3, #8]
      break;
 800431e:	e03c      	b.n	800439a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432c:	461a      	mov	r2, r3
 800432e:	f000 f8af 	bl	8004490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2150      	movs	r1, #80	@ 0x50
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f906 	bl	800454a <TIM_ITRx_SetConfig>
      break;
 800433e:	e02c      	b.n	800439a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800434c:	461a      	mov	r2, r3
 800434e:	f000 f8cd 	bl	80044ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2160      	movs	r1, #96	@ 0x60
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f8f6 	bl	800454a <TIM_ITRx_SetConfig>
      break;
 800435e:	e01c      	b.n	800439a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436c:	461a      	mov	r2, r3
 800436e:	f000 f88f 	bl	8004490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2140      	movs	r1, #64	@ 0x40
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f8e6 	bl	800454a <TIM_ITRx_SetConfig>
      break;
 800437e:	e00c      	b.n	800439a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f000 f8dd 	bl	800454a <TIM_ITRx_SetConfig>
      break;
 8004390:	e003      	b.n	800439a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
      break;
 8004396:	e000      	b.n	800439a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004484 <TIM_Base_SetConfig+0xd0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <TIM_Base_SetConfig+0x30>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d2:	d007      	beq.n	80043e4 <TIM_Base_SetConfig+0x30>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004488 <TIM_Base_SetConfig+0xd4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_Base_SetConfig+0x30>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a2b      	ldr	r2, [pc, #172]	@ (800448c <TIM_Base_SetConfig+0xd8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d108      	bne.n	80043f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a22      	ldr	r2, [pc, #136]	@ (8004484 <TIM_Base_SetConfig+0xd0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <TIM_Base_SetConfig+0x62>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d007      	beq.n	8004416 <TIM_Base_SetConfig+0x62>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1f      	ldr	r2, [pc, #124]	@ (8004488 <TIM_Base_SetConfig+0xd4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_Base_SetConfig+0x62>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1e      	ldr	r2, [pc, #120]	@ (800448c <TIM_Base_SetConfig+0xd8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d108      	bne.n	8004428 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a0d      	ldr	r2, [pc, #52]	@ (8004484 <TIM_Base_SetConfig+0xd0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d103      	bne.n	800445c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f023 0201 	bic.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]
  }
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800

08004490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 030a 	bic.w	r3, r3, #10
 80044cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0210 	bic.w	r2, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	031b      	lsls	r3, r3, #12
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004528:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	621a      	str	r2, [r3, #32]
}
 8004540:	bf00      	nop
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr

0800454a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	f043 0307 	orr.w	r3, r3, #7
 800456c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004598:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	021a      	lsls	r2, r3, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	609a      	str	r2, [r3, #8]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e046      	b.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a16      	ldr	r2, [pc, #88]	@ (800466c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004620:	d009      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a12      	ldr	r2, [pc, #72]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a10      	ldr	r2, [pc, #64]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10c      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	4313      	orrs	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800

08004678 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004678:	b480      	push	{r7}
 800467a:	b09d      	sub	sp, #116	@ 0x74
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d81f      	bhi.n	80046ea <USB_ActivateEndpoint+0x72>
 80046aa:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <USB_ActivateEndpoint+0x38>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046f3 	.word	0x080046f3
 80046bc:	080046cf 	.word	0x080046cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046cc:	e012      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046d2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80046d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046da:	e00b      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046e8:	e004      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80046f0:	e000      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>
      break;
 80046f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800470e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472c:	b29b      	uxth	r3, r3
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800474a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	7b1b      	ldrb	r3, [r3, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 8178 	bne.w	8004a54 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8084 	beq.w	8004876 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004778:	b29b      	uxth	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	4413      	add	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	011a      	lsls	r2, r3, #4
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	88db      	ldrh	r3, [r3, #6]
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	827b      	strh	r3, [r7, #18]
 80047b0:	8a7b      	ldrh	r3, [r7, #18]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01b      	beq.n	80047f2 <USB_ActivateEndpoint+0x17a>
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d0:	823b      	strh	r3, [r7, #16]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	8a3b      	ldrh	r3, [r7, #16]
 80047de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	78db      	ldrb	r3, [r3, #3]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d020      	beq.n	800483c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004810:	81bb      	strh	r3, [r7, #12]
 8004812:	89bb      	ldrh	r3, [r7, #12]
 8004814:	f083 0320 	eor.w	r3, r3, #32
 8004818:	81bb      	strh	r3, [r7, #12]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	441a      	add	r2, r3
 8004824:	89bb      	ldrh	r3, [r7, #12]
 8004826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800482a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800482e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]
 800483a:	e2d5      	b.n	8004de8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004852:	81fb      	strh	r3, [r7, #14]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	89fb      	ldrh	r3, [r7, #14]
 8004860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800486c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004870:	b29b      	uxth	r3, r3
 8004872:	8013      	strh	r3, [r2, #0]
 8004874:	e2b8      	b.n	8004de8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	633b      	str	r3, [r7, #48]	@ 0x30
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004880:	b29b      	uxth	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	4413      	add	r3, r2
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	011a      	lsls	r2, r3, #4
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	4413      	add	r3, r2
 8004894:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	88db      	ldrh	r3, [r3, #6]
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ba:	4413      	add	r3, r2
 80048bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	011a      	lsls	r2, r3, #4
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	4413      	add	r3, r2
 80048c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d8:	b29a      	uxth	r2, r3
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	801a      	strh	r2, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80048e4:	d91d      	bls.n	8004922 <USB_ActivateEndpoint+0x2aa>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <USB_ActivateEndpoint+0x288>
 80048fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048fc:	3b01      	subs	r3, #1
 80048fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29a      	uxth	r2, r3
 8004906:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004908:	b29b      	uxth	r3, r3
 800490a:	029b      	lsls	r3, r3, #10
 800490c:	b29b      	uxth	r3, r3
 800490e:	4313      	orrs	r3, r2
 8004910:	b29b      	uxth	r3, r3
 8004912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491a:	b29a      	uxth	r2, r3
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	e026      	b.n	8004970 <USB_ActivateEndpoint+0x2f8>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <USB_ActivateEndpoint+0x2c8>
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004938:	b29a      	uxth	r2, r3
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	e017      	b.n	8004970 <USB_ActivateEndpoint+0x2f8>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <USB_ActivateEndpoint+0x2e2>
 8004954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004956:	3301      	adds	r3, #1
 8004958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29a      	uxth	r2, r3
 8004960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004962:	b29b      	uxth	r3, r3
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	b29b      	uxth	r3, r3
 8004968:	4313      	orrs	r3, r2
 800496a:	b29a      	uxth	r2, r3
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800497e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <USB_ActivateEndpoint+0x348>
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800499a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499e:	843b      	strh	r3, [r7, #32]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	8c3b      	ldrh	r3, [r7, #32]
 80049ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049bc:	b29b      	uxth	r3, r3
 80049be:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d124      	bne.n	8004a12 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049de:	83bb      	strh	r3, [r7, #28]
 80049e0:	8bbb      	ldrh	r3, [r7, #28]
 80049e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049e6:	83bb      	strh	r3, [r7, #28]
 80049e8:	8bbb      	ldrh	r3, [r7, #28]
 80049ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049ee:	83bb      	strh	r3, [r7, #28]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	8bbb      	ldrh	r3, [r7, #28]
 80049fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8013      	strh	r3, [r2, #0]
 8004a10:	e1ea      	b.n	8004de8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a28:	83fb      	strh	r3, [r7, #30]
 8004a2a:	8bfb      	ldrh	r3, [r7, #30]
 8004a2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a30:	83fb      	strh	r3, [r7, #30]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	8bfb      	ldrh	r3, [r7, #30]
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
 8004a52:	e1c9      	b.n	8004de8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	78db      	ldrb	r3, [r3, #3]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d11e      	bne.n	8004a9a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a72:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	8013      	strh	r3, [r2, #0]
 8004a98:	e01d      	b.n	8004ad6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	441a      	add	r2, r3
 8004abe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ae6:	4413      	add	r3, r2
 8004ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	011a      	lsls	r2, r3, #4
 8004af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004af8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	891b      	ldrh	r3, [r3, #8]
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1a:	4413      	add	r3, r2
 8004b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	011a      	lsls	r2, r3, #4
 8004b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004b2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	895b      	ldrh	r3, [r3, #10]
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b3c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	785b      	ldrb	r3, [r3, #1]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f040 8093 	bne.w	8004c6e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004b58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <USB_ActivateEndpoint+0x524>
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004baa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <USB_ActivateEndpoint+0x574>
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c02:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c04:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c06:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c0a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c0c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c12:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]
 8004c6c:	e0bc      	b.n	8004de8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01d      	beq.n	8004cc6 <USB_ActivateEndpoint+0x64e>
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004cd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01d      	beq.n	8004d1e <USB_ActivateEndpoint+0x6a6>
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	78db      	ldrb	r3, [r3, #3]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d024      	beq.n	8004d70 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d3c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d44:	f083 0320 	eor.w	r3, r3, #32
 8004d48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	8013      	strh	r3, [r2, #0]
 8004d6e:	e01d      	b.n	8004dac <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	441a      	add	r2, r3
 8004dd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004de8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3774      	adds	r7, #116	@ 0x74
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop

08004df8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b0c2      	sub	sp, #264	@ 0x108
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e06:	6018      	str	r0, [r3, #0]
 8004e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e10:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	f040 86b7 	bne.w	8005b92 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d908      	bls.n	8004e52 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e50:	e007      	b.n	8004e62 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	7b1b      	ldrb	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d13a      	bne.n	8004ee8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6959      	ldr	r1, [r3, #20]
 8004e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	88da      	ldrh	r2, [r3, #6]
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004e94:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004e98:	6800      	ldr	r0, [r0, #0]
 8004e9a:	f001 fc88 	bl	80067ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	011a      	lsls	r2, r3, #4
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	f000 be1f 	b.w	8005b26 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	78db      	ldrb	r3, [r3, #3]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	f040 8462 	bne.w	80057be <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6a1a      	ldr	r2, [r3, #32]
 8004f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	f240 83df 	bls.w	80056d6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f68:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a1a      	ldr	r2, [r3, #32]
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f84:	1ad2      	subs	r2, r2, r3
 8004f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 81c7 	beq.w	8005348 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d177      	bne.n	80050c6 <USB_EPStartXfer+0x2ce>
 8004fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	4413      	add	r3, r2
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	011a      	lsls	r2, r3, #4
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	4413      	add	r3, r2
 800500c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800501c:	b29a      	uxth	r2, r3
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005026:	2b3e      	cmp	r3, #62	@ 0x3e
 8005028:	d921      	bls.n	800506e <USB_EPStartXfer+0x276>
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <USB_EPStartXfer+0x252>
 8005040:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005044:	3b01      	subs	r3, #1
 8005046:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29a      	uxth	r2, r3
 8005050:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005054:	b29b      	uxth	r3, r3
 8005056:	029b      	lsls	r3, r3, #10
 8005058:	b29b      	uxth	r3, r3
 800505a:	4313      	orrs	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005066:	b29a      	uxth	r2, r3
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	e050      	b.n	8005110 <USB_EPStartXfer+0x318>
 800506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <USB_EPStartXfer+0x294>
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005084:	b29a      	uxth	r2, r3
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e041      	b.n	8005110 <USB_EPStartXfer+0x318>
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <USB_EPStartXfer+0x2b4>
 80050a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050a6:	3301      	adds	r3, #1
 80050a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	029b      	lsls	r3, r3, #10
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	4313      	orrs	r3, r2
 80050be:	b29a      	uxth	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	e024      	b.n	8005110 <USB_EPStartXfer+0x318>
 80050c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d11c      	bne.n	8005110 <USB_EPStartXfer+0x318>
 80050d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	4413      	add	r3, r2
 80050ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	011a      	lsls	r2, r3, #4
 80050fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fe:	4413      	add	r3, r2
 8005100:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510a:	b29a      	uxth	r2, r3
 800510c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	895b      	ldrh	r3, [r3, #10]
 800511c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6959      	ldr	r1, [r3, #20]
 800512c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005130:	b29b      	uxth	r3, r3
 8005132:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005136:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800513a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800513e:	6800      	ldr	r0, [r0, #0]
 8005140:	f001 fb35 	bl	80067ae <USB_WritePMA>
            ep->xfer_buff += len;
 8005144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005154:	441a      	add	r2, r3
 8005156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6a1a      	ldr	r2, [r3, #32]
 800516e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	429a      	cmp	r2, r3
 800517c:	d90f      	bls.n	800519e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800517e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6a1a      	ldr	r2, [r3, #32]
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	621a      	str	r2, [r3, #32]
 800519c:	e00e      	b.n	80051bc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800519e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80051ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2200      	movs	r2, #0
 80051ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d177      	bne.n	80052bc <USB_EPStartXfer+0x4c4>
 80051cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	4413      	add	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	011a      	lsls	r2, r3, #4
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	4413      	add	r3, r2
 8005202:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005212:	b29a      	uxth	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521c:	2b3e      	cmp	r3, #62	@ 0x3e
 800521e:	d921      	bls.n	8005264 <USB_EPStartXfer+0x46c>
 8005220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800522a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <USB_EPStartXfer+0x448>
 8005236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800523a:	3b01      	subs	r3, #1
 800523c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29a      	uxth	r2, r3
 8005246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800524a:	b29b      	uxth	r3, r3
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	b29b      	uxth	r3, r3
 8005250:	4313      	orrs	r3, r2
 8005252:	b29b      	uxth	r3, r3
 8005254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525c:	b29a      	uxth	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	e056      	b.n	8005312 <USB_EPStartXfer+0x51a>
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <USB_EPStartXfer+0x48a>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527a:	b29a      	uxth	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e047      	b.n	8005312 <USB_EPStartXfer+0x51a>
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <USB_EPStartXfer+0x4aa>
 8005298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800529c:	3301      	adds	r3, #1
 800529e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e02a      	b.n	8005312 <USB_EPStartXfer+0x51a>
 80052bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d122      	bne.n	8005312 <USB_EPStartXfer+0x51a>
 80052cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	4413      	add	r3, r2
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	011a      	lsls	r2, r3, #4
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	4413      	add	r3, r2
 8005302:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005306:	61fb      	str	r3, [r7, #28]
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530c:	b29a      	uxth	r2, r3
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	891b      	ldrh	r3, [r3, #8]
 800531e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6959      	ldr	r1, [r3, #20]
 800532e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005332:	b29b      	uxth	r3, r3
 8005334:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005338:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800533c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005340:	6800      	ldr	r0, [r0, #0]
 8005342:	f001 fa34 	bl	80067ae <USB_WritePMA>
 8005346:	e3ee      	b.n	8005b26 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d177      	bne.n	8005448 <USB_EPStartXfer+0x650>
 8005358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005372:	b29b      	uxth	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005378:	4413      	add	r3, r2
 800537a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800537c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	011a      	lsls	r2, r3, #4
 800538a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800538c:	4413      	add	r3, r2
 800538e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005392:	647b      	str	r3, [r7, #68]	@ 0x44
 8005394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80053aa:	d921      	bls.n	80053f0 <USB_EPStartXfer+0x5f8>
 80053ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <USB_EPStartXfer+0x5d4>
 80053c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053c6:	3b01      	subs	r3, #1
 80053c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	b29b      	uxth	r3, r3
 80053dc:	4313      	orrs	r3, r2
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e056      	b.n	800549e <USB_EPStartXfer+0x6a6>
 80053f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <USB_EPStartXfer+0x616>
 80053f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005406:	b29a      	uxth	r2, r3
 8005408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	e047      	b.n	800549e <USB_EPStartXfer+0x6a6>
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <USB_EPStartXfer+0x636>
 8005424:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005428:	3301      	adds	r3, #1
 800542a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800542e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29a      	uxth	r2, r3
 8005434:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005438:	b29b      	uxth	r3, r3
 800543a:	029b      	lsls	r3, r3, #10
 800543c:	b29b      	uxth	r3, r3
 800543e:	4313      	orrs	r3, r2
 8005440:	b29a      	uxth	r2, r3
 8005442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	e02a      	b.n	800549e <USB_EPStartXfer+0x6a6>
 8005448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d122      	bne.n	800549e <USB_EPStartXfer+0x6a6>
 8005458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	653b      	str	r3, [r7, #80]	@ 0x50
 8005464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005468:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005472:	b29b      	uxth	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005478:	4413      	add	r3, r2
 800547a:	653b      	str	r3, [r7, #80]	@ 0x50
 800547c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	011a      	lsls	r2, r3, #4
 800548a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800548c:	4413      	add	r3, r2
 800548e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005498:	b29a      	uxth	r2, r3
 800549a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800549e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	891b      	ldrh	r3, [r3, #8]
 80054aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6959      	ldr	r1, [r3, #20]
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054cc:	6800      	ldr	r0, [r0, #0]
 80054ce:	f001 f96e 	bl	80067ae <USB_WritePMA>
            ep->xfer_buff += len;
 80054d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	441a      	add	r2, r3
 80054e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a1a      	ldr	r2, [r3, #32]
 80054fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	429a      	cmp	r2, r3
 800550a:	d90f      	bls.n	800552c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800550c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551c:	1ad2      	subs	r2, r2, r3
 800551e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	621a      	str	r2, [r3, #32]
 800552a:	e00e      	b.n	800554a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800552c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800553c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800554a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	643b      	str	r3, [r7, #64]	@ 0x40
 8005556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d177      	bne.n	8005656 <USB_EPStartXfer+0x85e>
 8005566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005580:	b29b      	uxth	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	4413      	add	r3, r2
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
 800558a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	011a      	lsls	r2, r3, #4
 8005598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559a:	4413      	add	r3, r2
 800559c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80055b8:	d921      	bls.n	80055fe <USB_EPStartXfer+0x806>
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <USB_EPStartXfer+0x7e2>
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	3b01      	subs	r3, #1
 80055d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29a      	uxth	r2, r3
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	029b      	lsls	r3, r3, #10
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4313      	orrs	r3, r2
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e050      	b.n	80056a0 <USB_EPStartXfer+0x8a8>
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <USB_EPStartXfer+0x824>
 8005606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005614:	b29a      	uxth	r2, r3
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	e041      	b.n	80056a0 <USB_EPStartXfer+0x8a8>
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <USB_EPStartXfer+0x844>
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005636:	3301      	adds	r3, #1
 8005638:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800563c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29a      	uxth	r2, r3
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005646:	b29b      	uxth	r3, r3
 8005648:	029b      	lsls	r3, r3, #10
 800564a:	b29b      	uxth	r3, r3
 800564c:	4313      	orrs	r3, r2
 800564e:	b29a      	uxth	r2, r3
 8005650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	e024      	b.n	80056a0 <USB_EPStartXfer+0x8a8>
 8005656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d11c      	bne.n	80056a0 <USB_EPStartXfer+0x8a8>
 8005666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005674:	b29b      	uxth	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800567a:	4413      	add	r3, r2
 800567c:	643b      	str	r3, [r7, #64]	@ 0x40
 800567e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	011a      	lsls	r2, r3, #4
 800568c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568e:	4413      	add	r3, r2
 8005690:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569a:	b29a      	uxth	r2, r3
 800569c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	895b      	ldrh	r3, [r3, #10]
 80056ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6959      	ldr	r1, [r3, #20]
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056ce:	6800      	ldr	r0, [r0, #0]
 80056d0:	f001 f86d 	bl	80067ae <USB_WritePMA>
 80056d4:	e227      	b.n	8005b26 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80056e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	441a      	add	r2, r3
 800572a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800572e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800573a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573e:	b29b      	uxth	r3, r3
 8005740:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800574e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800575c:	b29b      	uxth	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005762:	4413      	add	r3, r2
 8005764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	011a      	lsls	r2, r3, #4
 8005774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005776:	4413      	add	r3, r2
 8005778:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800577c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800577e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005782:	b29a      	uxth	r2, r3
 8005784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005786:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	891b      	ldrh	r3, [r3, #8]
 8005794:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057b6:	6800      	ldr	r0, [r0, #0]
 80057b8:	f000 fff9 	bl	80067ae <USB_WritePMA>
 80057bc:	e1b3      	b.n	8005b26 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 80c6 	beq.w	8005990 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d177      	bne.n	8005910 <USB_EPStartXfer+0xb18>
 8005820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800582c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005840:	4413      	add	r3, r2
 8005842:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	011a      	lsls	r2, r3, #4
 8005852:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005854:	4413      	add	r3, r2
 8005856:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800585a:	667b      	str	r3, [r7, #100]	@ 0x64
 800585c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005866:	b29a      	uxth	r2, r3
 8005868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005870:	2b3e      	cmp	r3, #62	@ 0x3e
 8005872:	d921      	bls.n	80058b8 <USB_EPStartXfer+0xac0>
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <USB_EPStartXfer+0xa9c>
 800588a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800588e:	3b01      	subs	r3, #1
 8005890:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29a      	uxth	r2, r3
 800589a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800589e:	b29b      	uxth	r3, r3
 80058a0:	029b      	lsls	r3, r3, #10
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4313      	orrs	r3, r2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e050      	b.n	800595a <USB_EPStartXfer+0xb62>
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <USB_EPStartXfer+0xade>
 80058c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e041      	b.n	800595a <USB_EPStartXfer+0xb62>
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <USB_EPStartXfer+0xafe>
 80058ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005900:	b29b      	uxth	r3, r3
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	b29b      	uxth	r3, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	b29a      	uxth	r2, r3
 800590a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	e024      	b.n	800595a <USB_EPStartXfer+0xb62>
 8005910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d11c      	bne.n	800595a <USB_EPStartXfer+0xb62>
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800592e:	b29b      	uxth	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005934:	4413      	add	r3, r2
 8005936:	673b      	str	r3, [r7, #112]	@ 0x70
 8005938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	011a      	lsls	r2, r3, #4
 8005946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005948:	4413      	add	r3, r2
 800594a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800594e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005954:	b29a      	uxth	r2, r3
 8005956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005958:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800595a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	895b      	ldrh	r3, [r3, #10]
 8005966:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800596a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6959      	ldr	r1, [r3, #20]
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597a:	b29b      	uxth	r3, r3
 800597c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005980:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005984:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005988:	6800      	ldr	r0, [r0, #0]
 800598a:	f000 ff10 	bl	80067ae <USB_WritePMA>
 800598e:	e0ca      	b.n	8005b26 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d177      	bne.n	8005a90 <USB_EPStartXfer+0xc98>
 80059a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059c0:	4413      	add	r3, r2
 80059c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	011a      	lsls	r2, r3, #4
 80059d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80059f2:	d921      	bls.n	8005a38 <USB_EPStartXfer+0xc40>
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <USB_EPStartXfer+0xc1c>
 8005a0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	4313      	orrs	r3, r2
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	e05c      	b.n	8005af2 <USB_EPStartXfer+0xcfa>
 8005a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <USB_EPStartXfer+0xc5e>
 8005a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	e04d      	b.n	8005af2 <USB_EPStartXfer+0xcfa>
 8005a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <USB_EPStartXfer+0xc7e>
 8005a6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a70:	3301      	adds	r3, #1
 8005a72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	029b      	lsls	r3, r3, #10
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	4313      	orrs	r3, r2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e030      	b.n	8005af2 <USB_EPStartXfer+0xcfa>
 8005a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d128      	bne.n	8005af2 <USB_EPStartXfer+0xcfa>
 8005aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	011a      	lsls	r2, r3, #4
 8005ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005adc:	4413      	add	r3, r2
 8005ade:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ae2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005af0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	891b      	ldrh	r3, [r3, #8]
 8005afe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6959      	ldr	r1, [r3, #20]
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b18:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b1c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b20:	6800      	ldr	r0, [r0, #0]
 8005b22:	f000 fe44 	bl	80067ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4c:	817b      	strh	r3, [r7, #10]
 8005b4e:	897b      	ldrh	r3, [r7, #10]
 8005b50:	f083 0310 	eor.w	r3, r3, #16
 8005b54:	817b      	strh	r3, [r7, #10]
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	f083 0320 	eor.w	r3, r3, #32
 8005b5c:	817b      	strh	r3, [r7, #10]
 8005b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	441a      	add	r2, r3
 8005b78:	897b      	ldrh	r3, [r7, #10]
 8005b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	8013      	strh	r3, [r2, #0]
 8005b8e:	f000 bcde 	b.w	800654e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	7b1b      	ldrb	r3, [r3, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 80bb 	bne.w	8005d1a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d917      	bls.n	8005bf0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be0:	1ad2      	subs	r2, r2, r3
 8005be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	619a      	str	r2, [r3, #24]
 8005bee:	e00e      	b.n	8005c0e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c32:	4413      	add	r3, r2
 8005c34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	011a      	lsls	r2, r3, #4
 8005c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c6e:	d924      	bls.n	8005cba <USB_EPStartXfer+0xec2>
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d104      	bne.n	8005c90 <USB_EPStartXfer+0xe98>
 8005c86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	029b      	lsls	r3, r3, #10
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	f000 bc10 	b.w	80064da <USB_EPStartXfer+0x16e2>
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10c      	bne.n	8005cdc <USB_EPStartXfer+0xee4>
 8005cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	e3fe      	b.n	80064da <USB_EPStartXfer+0x16e2>
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	085b      	lsrs	r3, r3, #1
 8005ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <USB_EPStartXfer+0xf04>
 8005cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	029b      	lsls	r3, r3, #10
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	e3df      	b.n	80064da <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	78db      	ldrb	r3, [r3, #3]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	f040 8218 	bne.w	800615c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 809d 	bne.w	8005e78 <USB_EPStartXfer+0x1080>
 8005d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d62:	4413      	add	r3, r2
 8005d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	011a      	lsls	r2, r3, #4
 8005d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005da6:	d92b      	bls.n	8005e00 <USB_EPStartXfer+0x1008>
 8005da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <USB_EPStartXfer+0xfe0>
 8005dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	029b      	lsls	r3, r3, #10
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	e070      	b.n	8005ee2 <USB_EPStartXfer+0x10ea>
 8005e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10c      	bne.n	8005e2a <USB_EPStartXfer+0x1032>
 8005e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	e05b      	b.n	8005ee2 <USB_EPStartXfer+0x10ea>
 8005e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <USB_EPStartXfer+0x1062>
 8005e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e54:	3301      	adds	r3, #1
 8005e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	e034      	b.n	8005ee2 <USB_EPStartXfer+0x10ea>
 8005e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d12c      	bne.n	8005ee2 <USB_EPStartXfer+0x10ea>
 8005e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005eac:	4413      	add	r3, r2
 8005eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	011a      	lsls	r2, r3, #4
 8005ec0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 809d 	bne.w	800603c <USB_EPStartXfer+0x1244>
 8005f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f26:	4413      	add	r3, r2
 8005f28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	011a      	lsls	r2, r3, #4
 8005f3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f6a:	d92b      	bls.n	8005fc4 <USB_EPStartXfer+0x11cc>
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <USB_EPStartXfer+0x11a4>
 8005f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f96:	3b01      	subs	r3, #1
 8005f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	029b      	lsls	r3, r3, #10
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e069      	b.n	8006098 <USB_EPStartXfer+0x12a0>
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10c      	bne.n	8005fee <USB_EPStartXfer+0x11f6>
 8005fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	e054      	b.n	8006098 <USB_EPStartXfer+0x12a0>
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <USB_EPStartXfer+0x1226>
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006018:	3301      	adds	r3, #1
 800601a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800601e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29b      	uxth	r3, r3
 8006030:	4313      	orrs	r3, r2
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	e02d      	b.n	8006098 <USB_EPStartXfer+0x12a0>
 800603c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d125      	bne.n	8006098 <USB_EPStartXfer+0x12a0>
 800604c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006062:	4413      	add	r3, r2
 8006064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	011a      	lsls	r2, r3, #4
 8006076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800607a:	4413      	add	r3, r2
 800607c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	b29a      	uxth	r2, r3
 8006092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006096:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8218 	beq.w	80064da <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <USB_EPStartXfer+0x12ea>
 80060d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10d      	bne.n	80060fe <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 81f5 	bne.w	80064da <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 81ee 	bne.w	80064da <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80060fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006124:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	441a      	add	r2, r3
 8006142:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800614a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800614e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006152:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006156:	b29b      	uxth	r3, r3
 8006158:	8013      	strh	r3, [r2, #0]
 800615a:	e1be      	b.n	80064da <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	78db      	ldrb	r3, [r3, #3]
 8006168:	2b01      	cmp	r3, #1
 800616a:	f040 81b4 	bne.w	80064d6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800616e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	429a      	cmp	r2, r3
 8006188:	d917      	bls.n	80061ba <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800618a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800619a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	619a      	str	r2, [r3, #24]
 80061b8:	e00e      	b.n	80061d8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2200      	movs	r2, #0
 80061d6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80061d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 8085 	bne.w	80062f4 <USB_EPStartXfer+0x14fc>
 80061ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006206:	b29b      	uxth	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800620e:	4413      	add	r3, r2
 8006210:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	011a      	lsls	r2, r3, #4
 8006222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006226:	4413      	add	r3, r2
 8006228:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800622c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006248:	2b3e      	cmp	r3, #62	@ 0x3e
 800624a:	d923      	bls.n	8006294 <USB_EPStartXfer+0x149c>
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <USB_EPStartXfer+0x1474>
 8006262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006266:	3b01      	subs	r3, #1
 8006268:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800626c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29a      	uxth	r2, r3
 8006274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006278:	b29b      	uxth	r3, r3
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	b29b      	uxth	r3, r3
 800627e:	4313      	orrs	r3, r2
 8006280:	b29b      	uxth	r3, r3
 8006282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	e060      	b.n	8006356 <USB_EPStartXfer+0x155e>
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10c      	bne.n	80062b6 <USB_EPStartXfer+0x14be>
 800629c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	e04f      	b.n	8006356 <USB_EPStartXfer+0x155e>
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <USB_EPStartXfer+0x14de>
 80062cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062d0:	3301      	adds	r3, #1
 80062d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29a      	uxth	r2, r3
 80062de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	4313      	orrs	r3, r2
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	e030      	b.n	8006356 <USB_EPStartXfer+0x155e>
 80062f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d128      	bne.n	8006356 <USB_EPStartXfer+0x155e>
 8006304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006308:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006320:	b29b      	uxth	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006328:	4413      	add	r3, r2
 800632a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800632e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	011a      	lsls	r2, r3, #4
 800633c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006340:	4413      	add	r3, r2
 8006342:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006346:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800634a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634e:	b29a      	uxth	r2, r3
 8006350:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 8085 	bne.w	8006480 <USB_EPStartXfer+0x1688>
 8006376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800639a:	4413      	add	r3, r2
 800639c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	011a      	lsls	r2, r3, #4
 80063ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80063b2:	4413      	add	r3, r2
 80063b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80063d6:	d923      	bls.n	8006420 <USB_EPStartXfer+0x1628>
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <USB_EPStartXfer+0x1600>
 80063ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063f2:	3b01      	subs	r3, #1
 80063f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006404:	b29b      	uxth	r3, r3
 8006406:	029b      	lsls	r3, r3, #10
 8006408:	b29b      	uxth	r3, r3
 800640a:	4313      	orrs	r3, r2
 800640c:	b29b      	uxth	r3, r3
 800640e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006416:	b29a      	uxth	r2, r3
 8006418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	e05c      	b.n	80064da <USB_EPStartXfer+0x16e2>
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10c      	bne.n	8006442 <USB_EPStartXfer+0x164a>
 8006428:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006438:	b29a      	uxth	r2, r3
 800643a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e04b      	b.n	80064da <USB_EPStartXfer+0x16e2>
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <USB_EPStartXfer+0x166a>
 8006458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800645c:	3301      	adds	r3, #1
 800645e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800646e:	b29b      	uxth	r3, r3
 8006470:	029b      	lsls	r3, r3, #10
 8006472:	b29b      	uxth	r3, r3
 8006474:	4313      	orrs	r3, r2
 8006476:	b29a      	uxth	r2, r3
 8006478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e02c      	b.n	80064da <USB_EPStartXfer+0x16e2>
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d124      	bne.n	80064da <USB_EPStartXfer+0x16e2>
 8006490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800649e:	b29b      	uxth	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064a6:	4413      	add	r3, r2
 80064a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	011a      	lsls	r2, r3, #4
 80064ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064be:	4413      	add	r3, r2
 80064c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	e001      	b.n	80064da <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e03a      	b.n	8006550 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006500:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006504:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006508:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800650c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006510:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006514:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006518:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800651c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800653a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800653e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654a:	b29b      	uxth	r3, r3
 800654c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d020      	beq.n	80065ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006582:	81bb      	strh	r3, [r7, #12]
 8006584:	89bb      	ldrh	r3, [r7, #12]
 8006586:	f083 0310 	eor.w	r3, r3, #16
 800658a:	81bb      	strh	r3, [r7, #12]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	441a      	add	r2, r3
 8006596:	89bb      	ldrh	r3, [r7, #12]
 8006598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800659c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	8013      	strh	r3, [r2, #0]
 80065ac:	e01f      	b.n	80065ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c4:	81fb      	strh	r3, [r7, #14]
 80065c6:	89fb      	ldrh	r3, [r7, #14]
 80065c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065cc:	81fb      	strh	r3, [r7, #14]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	441a      	add	r2, r3
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr

080065fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	7b1b      	ldrb	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 809d 	bne.w	8006748 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d04c      	beq.n	80066b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	823b      	strh	r3, [r7, #16]
 8006624:	8a3b      	ldrh	r3, [r7, #16]
 8006626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01b      	beq.n	8006666 <USB_EPClearStall+0x6c>
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006644:	81fb      	strh	r3, [r7, #14]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	89fb      	ldrh	r3, [r7, #14]
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800665a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	78db      	ldrb	r3, [r3, #3]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d06c      	beq.n	8006748 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006684:	81bb      	strh	r3, [r7, #12]
 8006686:	89bb      	ldrh	r3, [r7, #12]
 8006688:	f083 0320 	eor.w	r3, r3, #32
 800668c:	81bb      	strh	r3, [r7, #12]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	89bb      	ldrh	r3, [r7, #12]
 800669a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]
 80066ae:	e04b      	b.n	8006748 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	82fb      	strh	r3, [r7, #22]
 80066be:	8afb      	ldrh	r3, [r7, #22]
 80066c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <USB_EPClearStall+0x106>
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066de:	82bb      	strh	r3, [r7, #20]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	441a      	add	r2, r3
 80066ea:	8abb      	ldrh	r3, [r7, #20]
 80066ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006716:	827b      	strh	r3, [r7, #18]
 8006718:	8a7b      	ldrh	r3, [r7, #18]
 800671a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800671e:	827b      	strh	r3, [r7, #18]
 8006720:	8a7b      	ldrh	r3, [r7, #18]
 8006722:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006726:	827b      	strh	r3, [r7, #18]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	441a      	add	r2, r3
 8006732:	8a7b      	ldrh	r3, [r7, #18]
 8006734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800673c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006744:	b29b      	uxth	r3, r3
 8006746:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr

08006754 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2280      	movs	r2, #128	@ 0x80
 800676a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006788:	b29b      	uxth	r3, r3
 800678a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800678c:	68fb      	ldr	r3, [r7, #12]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr

080067ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b08b      	sub	sp, #44	@ 0x2c
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	4611      	mov	r1, r2
 80067ba:	461a      	mov	r2, r3
 80067bc:	460b      	mov	r3, r1
 80067be:	80fb      	strh	r3, [r7, #6]
 80067c0:	4613      	mov	r3, r2
 80067c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067c4:	88bb      	ldrh	r3, [r7, #4]
 80067c6:	3301      	adds	r3, #1
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	005a      	lsls	r2, r3, #1
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e6:	e01e      	b.n	8006826 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	3301      	adds	r3, #1
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	b21a      	sxth	r2, r3
 80067f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	b21b      	sxth	r3, r3
 8006800:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	8a7a      	ldrh	r2, [r7, #18]
 8006806:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	3302      	adds	r3, #2
 800680c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	3302      	adds	r3, #2
 8006812:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	3301      	adds	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	3b01      	subs	r3, #1
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1dd      	bne.n	80067e8 <USB_WritePMA+0x3a>
  }
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	372c      	adds	r7, #44	@ 0x2c
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr

08006838 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006838:	b480      	push	{r7}
 800683a:	b08b      	sub	sp, #44	@ 0x2c
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	4611      	mov	r1, r2
 8006844:	461a      	mov	r2, r3
 8006846:	460b      	mov	r3, r1
 8006848:	80fb      	strh	r3, [r7, #6]
 800684a:	4613      	mov	r3, r2
 800684c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800684e:	88bb      	ldrh	r3, [r7, #4]
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	005a      	lsls	r2, r3, #1
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800686a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006870:	e01b      	b.n	80068aa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	3302      	adds	r3, #2
 800687e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	b2da      	uxtb	r2, r3
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3301      	adds	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	b2da      	uxtb	r2, r3
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	3301      	adds	r3, #1
 800689c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	3302      	adds	r3, #2
 80068a2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	3b01      	subs	r3, #1
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e0      	bne.n	8006872 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80068b0:	88bb      	ldrh	r3, [r7, #4]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	701a      	strb	r2, [r3, #0]
  }
}
 80068cc:	bf00      	nop
 80068ce:	372c      	adds	r7, #44	@ 0x2c
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr

080068d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr

080068ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068f6:	2302      	movs	r3, #2
 80068f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00c      	beq.n	800691e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	78fa      	ldrb	r2, [r7, #3]
 800690e:	4611      	mov	r1, r2
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	4611      	mov	r1, r2
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fed8 	bl	8007716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2b02      	cmp	r3, #2
 8006988:	d016      	beq.n	80069b8 <USBD_LL_SetupStage+0x6a>
 800698a:	2b02      	cmp	r3, #2
 800698c:	d81c      	bhi.n	80069c8 <USBD_LL_SetupStage+0x7a>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <USBD_LL_SetupStage+0x4a>
 8006992:	2b01      	cmp	r3, #1
 8006994:	d008      	beq.n	80069a8 <USBD_LL_SetupStage+0x5a>
 8006996:	e017      	b.n	80069c8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f9cb 	bl	8006d3c <USBD_StdDevReq>
      break;
 80069a6:	e01a      	b.n	80069de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fa2d 	bl	8006e10 <USBD_StdItfReq>
      break;
 80069b6:	e012      	b.n	80069de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa6d 	bl	8006ea0 <USBD_StdEPReq>
      break;
 80069c6:	e00a      	b.n	80069de <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80069ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 f80e 	bl	80079f8 <USBD_LL_StallEP>
      break;
 80069dc:	bf00      	nop
  }

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	460b      	mov	r3, r1
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d14b      	bne.n	8006a94 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a02:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d134      	bne.n	8006a78 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d919      	bls.n	8006a4e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d203      	bcs.n	8006a3c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	e002      	b.n	8006a42 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fedd 	bl	8007806 <USBD_CtlContinueRx>
 8006a4c:	e038      	b.n	8006ac0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d105      	bne.n	8006a70 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 feda 	bl	800782a <USBD_CtlSendStatus>
 8006a76:	e023      	b.n	8006ac0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d11e      	bne.n	8006ac0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 ffb3 	bl	80079f8 <USBD_LL_StallEP>
 8006a92:	e015      	b.n	8006ac0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00d      	beq.n	8006abc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d108      	bne.n	8006abc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	7afa      	ldrb	r2, [r7, #11]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	4798      	blx	r3
 8006aba:	e001      	b.n	8006ac0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006abc:	2302      	movs	r3, #2
 8006abe:	e000      	b.n	8006ac2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	607a      	str	r2, [r7, #4]
 8006ad6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d17f      	bne.n	8006bde <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d15c      	bne.n	8006ba8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d915      	bls.n	8006b26 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fe65 	bl	80077e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f001 f815 	bl	8007b4e <USBD_LL_PrepareReceive>
 8006b24:	e04e      	b.n	8006bc4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	6912      	ldr	r2, [r2, #16]
 8006b2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b32:	fb01 f202 	mul.w	r2, r1, r2
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d11c      	bne.n	8006b76 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d316      	bcc.n	8006b76 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d20f      	bcs.n	8006b76 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 fe41 	bl	80077e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 ffed 	bl	8007b4e <USBD_LL_PrepareReceive>
 8006b74:	e026      	b.n	8006bc4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d105      	bne.n	8006b98 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b98:	2180      	movs	r1, #128	@ 0x80
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 ff2c 	bl	80079f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fe55 	bl	8007850 <USBD_CtlReceiveStatus>
 8006ba6:	e00d      	b.n	8006bc4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d004      	beq.n	8006bbc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006bbc:	2180      	movs	r1, #128	@ 0x80
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 ff1a 	bl	80079f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d11d      	bne.n	8006c0a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fe81 	bl	80068d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006bdc:	e015      	b.n	8006c0a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00d      	beq.n	8006c06 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d108      	bne.n	8006c06 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	7afa      	ldrb	r2, [r7, #11]
 8006bfe:	4611      	mov	r1, r2
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	4798      	blx	r3
 8006c04:	e001      	b.n	8006c0a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c06:	2302      	movs	r3, #2
 8006c08:	e000      	b.n	8006c0c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c1c:	2340      	movs	r3, #64	@ 0x40
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2100      	movs	r1, #0
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fec2 	bl	80079ac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2240      	movs	r2, #64	@ 0x40
 8006c34:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c38:	2340      	movs	r3, #64	@ 0x40
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2180      	movs	r1, #128	@ 0x80
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 feb4 	bl	80079ac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2240      	movs	r2, #64	@ 0x40
 8006c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6852      	ldr	r2, [r2, #4]
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	4611      	mov	r1, r2
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
  }

  return USBD_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2204      	movs	r2, #4
 8006ccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr

08006cdc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d105      	bne.n	8006cfa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr

08006d06 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d10b      	bne.n	8006d30 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d52:	2b40      	cmp	r3, #64	@ 0x40
 8006d54:	d005      	beq.n	8006d62 <USBD_StdDevReq+0x26>
 8006d56:	2b40      	cmp	r3, #64	@ 0x40
 8006d58:	d84f      	bhi.n	8006dfa <USBD_StdDevReq+0xbe>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <USBD_StdDevReq+0x36>
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d14b      	bne.n	8006dfa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3
      break;
 8006d70:	e048      	b.n	8006e04 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	785b      	ldrb	r3, [r3, #1]
 8006d76:	2b09      	cmp	r3, #9
 8006d78:	d839      	bhi.n	8006dee <USBD_StdDevReq+0xb2>
 8006d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d80 <USBD_StdDevReq+0x44>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006dd1 	.word	0x08006dd1
 8006d84:	08006de5 	.word	0x08006de5
 8006d88:	08006def 	.word	0x08006def
 8006d8c:	08006ddb 	.word	0x08006ddb
 8006d90:	08006def 	.word	0x08006def
 8006d94:	08006db3 	.word	0x08006db3
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006def 	.word	0x08006def
 8006da0:	08006dc7 	.word	0x08006dc7
 8006da4:	08006dbd 	.word	0x08006dbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9dc 	bl	8007168 <USBD_GetDescriptor>
          break;
 8006db0:	e022      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fb3f 	bl	8007438 <USBD_SetAddress>
          break;
 8006dba:	e01d      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fb7e 	bl	80074c0 <USBD_SetConfig>
          break;
 8006dc4:	e018      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc07 	bl	80075dc <USBD_GetConfig>
          break;
 8006dce:	e013      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fc37 	bl	8007646 <USBD_GetStatus>
          break;
 8006dd8:	e00e      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc65 	bl	80076ac <USBD_SetFeature>
          break;
 8006de2:	e009      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fc74 	bl	80076d4 <USBD_ClrFeature>
          break;
 8006dec:	e004      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fcc9 	bl	8007788 <USBD_CtlError>
          break;
 8006df6:	bf00      	nop
      }
      break;
 8006df8:	e004      	b.n	8006e04 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fcc3 	bl	8007788 <USBD_CtlError>
      break;
 8006e02:	bf00      	nop
  }

  return ret;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e26:	2b40      	cmp	r3, #64	@ 0x40
 8006e28:	d005      	beq.n	8006e36 <USBD_StdItfReq+0x26>
 8006e2a:	2b40      	cmp	r3, #64	@ 0x40
 8006e2c:	d82e      	bhi.n	8006e8c <USBD_StdItfReq+0x7c>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <USBD_StdItfReq+0x26>
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d12a      	bne.n	8006e8c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d81d      	bhi.n	8006e7e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	889b      	ldrh	r3, [r3, #4]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d813      	bhi.n	8006e74 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	88db      	ldrh	r3, [r3, #6]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d110      	bne.n	8006e88 <USBD_StdItfReq+0x78>
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10d      	bne.n	8006e88 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fcdc 	bl	800782a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e72:	e009      	b.n	8006e88 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fc86 	bl	8007788 <USBD_CtlError>
          break;
 8006e7c:	e004      	b.n	8006e88 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fc81 	bl	8007788 <USBD_CtlError>
          break;
 8006e86:	e000      	b.n	8006e8a <USBD_StdItfReq+0x7a>
          break;
 8006e88:	bf00      	nop
      }
      break;
 8006e8a:	e004      	b.n	8006e96 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fc7a 	bl	8007788 <USBD_CtlError>
      break;
 8006e94:	bf00      	nop
  }

  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	889b      	ldrh	r3, [r3, #4]
 8006eb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ebc:	2b40      	cmp	r3, #64	@ 0x40
 8006ebe:	d007      	beq.n	8006ed0 <USBD_StdEPReq+0x30>
 8006ec0:	2b40      	cmp	r3, #64	@ 0x40
 8006ec2:	f200 8146 	bhi.w	8007152 <USBD_StdEPReq+0x2b2>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <USBD_StdEPReq+0x40>
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	f040 8141 	bne.w	8007152 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
      break;
 8006ede:	e13d      	b.n	800715c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d10a      	bne.n	8006f02 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	e12d      	b.n	800715e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d007      	beq.n	8006f1a <USBD_StdEPReq+0x7a>
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	f300 811b 	bgt.w	8007146 <USBD_StdEPReq+0x2a6>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d072      	beq.n	8006ffa <USBD_StdEPReq+0x15a>
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d03a      	beq.n	8006f8e <USBD_StdEPReq+0xee>
 8006f18:	e115      	b.n	8007146 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d002      	beq.n	8006f2a <USBD_StdEPReq+0x8a>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d015      	beq.n	8006f54 <USBD_StdEPReq+0xb4>
 8006f28:	e02b      	b.n	8006f82 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00c      	beq.n	8006f4a <USBD_StdEPReq+0xaa>
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b80      	cmp	r3, #128	@ 0x80
 8006f34:	d009      	beq.n	8006f4a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fd5c 	bl	80079f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f40:	2180      	movs	r1, #128	@ 0x80
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fd58 	bl	80079f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f48:	e020      	b.n	8006f8c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fc1b 	bl	8007788 <USBD_CtlError>
              break;
 8006f52:	e01b      	b.n	8006f8c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	885b      	ldrh	r3, [r3, #2]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10e      	bne.n	8006f7a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <USBD_StdEPReq+0xda>
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b80      	cmp	r3, #128	@ 0x80
 8006f66:	d008      	beq.n	8006f7a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	88db      	ldrh	r3, [r3, #6]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fd3f 	bl	80079f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fc55 	bl	800782a <USBD_CtlSendStatus>

              break;
 8006f80:	e004      	b.n	8006f8c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fbff 	bl	8007788 <USBD_CtlError>
              break;
 8006f8a:	bf00      	nop
          }
          break;
 8006f8c:	e0e0      	b.n	8007150 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d002      	beq.n	8006f9e <USBD_StdEPReq+0xfe>
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d015      	beq.n	8006fc8 <USBD_StdEPReq+0x128>
 8006f9c:	e026      	b.n	8006fec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <USBD_StdEPReq+0x11e>
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b80      	cmp	r3, #128	@ 0x80
 8006fa8:	d009      	beq.n	8006fbe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fd22 	bl	80079f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fb4:	2180      	movs	r1, #128	@ 0x80
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fd1e 	bl	80079f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fbc:	e01c      	b.n	8006ff8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fbe1 	bl	8007788 <USBD_CtlError>
              break;
 8006fc6:	e017      	b.n	8006ff8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	885b      	ldrh	r3, [r3, #2]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d112      	bne.n	8006ff6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fd29 	bl	8007a36 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc20 	bl	800782a <USBD_CtlSendStatus>
              }
              break;
 8006fea:	e004      	b.n	8006ff6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fbca 	bl	8007788 <USBD_CtlError>
              break;
 8006ff4:	e000      	b.n	8006ff8 <USBD_StdEPReq+0x158>
              break;
 8006ff6:	bf00      	nop
          }
          break;
 8006ff8:	e0aa      	b.n	8007150 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007000:	2b02      	cmp	r3, #2
 8007002:	d002      	beq.n	800700a <USBD_StdEPReq+0x16a>
 8007004:	2b03      	cmp	r3, #3
 8007006:	d032      	beq.n	800706e <USBD_StdEPReq+0x1ce>
 8007008:	e097      	b.n	800713a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <USBD_StdEPReq+0x180>
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	2b80      	cmp	r3, #128	@ 0x80
 8007014:	d004      	beq.n	8007020 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fbb5 	bl	8007788 <USBD_CtlError>
                break;
 800701e:	e091      	b.n	8007144 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007024:	2b00      	cmp	r3, #0
 8007026:	da0b      	bge.n	8007040 <USBD_StdEPReq+0x1a0>
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	3310      	adds	r3, #16
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4413      	add	r3, r2
 800703c:	3304      	adds	r3, #4
 800703e:	e00b      	b.n	8007058 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	3304      	adds	r3, #4
 8007058:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2202      	movs	r2, #2
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fb9f 	bl	80077aa <USBD_CtlSendData>
              break;
 800706c:	e06a      	b.n	8007144 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800706e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	da11      	bge.n	800709a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	f003 020f 	and.w	r2, r3, #15
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	3318      	adds	r3, #24
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d117      	bne.n	80070c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb78 	bl	8007788 <USBD_CtlError>
                  break;
 8007098:	e054      	b.n	8007144 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	f003 020f 	and.w	r2, r3, #15
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb65 	bl	8007788 <USBD_CtlError>
                  break;
 80070be:	e041      	b.n	8007144 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	da0b      	bge.n	80070e0 <USBD_StdEPReq+0x240>
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	3310      	adds	r3, #16
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	4413      	add	r3, r2
 80070dc:	3304      	adds	r3, #4
 80070de:	e00b      	b.n	80070f8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	3304      	adds	r3, #4
 80070f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <USBD_StdEPReq+0x266>
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b80      	cmp	r3, #128	@ 0x80
 8007104:	d103      	bne.n	800710e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e00e      	b.n	800712c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fcae 	bl	8007a74 <USBD_LL_IsStallEP>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e002      	b.n	800712c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2202      	movs	r2, #2
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fb39 	bl	80077aa <USBD_CtlSendData>
              break;
 8007138:	e004      	b.n	8007144 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fb23 	bl	8007788 <USBD_CtlError>
              break;
 8007142:	bf00      	nop
          }
          break;
 8007144:	e004      	b.n	8007150 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fb1d 	bl	8007788 <USBD_CtlError>
          break;
 800714e:	bf00      	nop
      }
      break;
 8007150:	e004      	b.n	800715c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb17 	bl	8007788 <USBD_CtlError>
      break;
 800715a:	bf00      	nop
  }

  return ret;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	0a1b      	lsrs	r3, r3, #8
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	2b06      	cmp	r3, #6
 800718a:	f200 8128 	bhi.w	80073de <USBD_GetDescriptor+0x276>
 800718e:	a201      	add	r2, pc, #4	@ (adr r2, 8007194 <USBD_GetDescriptor+0x2c>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071b1 	.word	0x080071b1
 8007198:	080071c9 	.word	0x080071c9
 800719c:	08007209 	.word	0x08007209
 80071a0:	080073df 	.word	0x080073df
 80071a4:	080073df 	.word	0x080073df
 80071a8:	0800737f 	.word	0x0800737f
 80071ac:	080073ab 	.word	0x080073ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7c12      	ldrb	r2, [r2, #16]
 80071bc:	f107 0108 	add.w	r1, r7, #8
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
 80071c4:	60f8      	str	r0, [r7, #12]
      break;
 80071c6:	e112      	b.n	80073ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7c1b      	ldrb	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10d      	bne.n	80071ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	f107 0208 	add.w	r2, r7, #8
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	2202      	movs	r2, #2
 80071e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071ea:	e100      	b.n	80073ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	f107 0208 	add.w	r2, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3301      	adds	r3, #1
 8007202:	2202      	movs	r2, #2
 8007204:	701a      	strb	r2, [r3, #0]
      break;
 8007206:	e0f2      	b.n	80073ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	885b      	ldrh	r3, [r3, #2]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b05      	cmp	r3, #5
 8007210:	f200 80ac 	bhi.w	800736c <USBD_GetDescriptor+0x204>
 8007214:	a201      	add	r2, pc, #4	@ (adr r2, 800721c <USBD_GetDescriptor+0xb4>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007235 	.word	0x08007235
 8007220:	08007269 	.word	0x08007269
 8007224:	0800729d 	.word	0x0800729d
 8007228:	080072d1 	.word	0x080072d1
 800722c:	08007305 	.word	0x08007305
 8007230:	08007339 	.word	0x08007339
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7c12      	ldrb	r2, [r2, #16]
 800724c:	f107 0108 	add.w	r1, r7, #8
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007256:	e091      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa94 	bl	8007788 <USBD_CtlError>
            err++;
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	3301      	adds	r3, #1
 8007264:	72fb      	strb	r3, [r7, #11]
          break;
 8007266:	e089      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	7c12      	ldrb	r2, [r2, #16]
 8007280:	f107 0108 	add.w	r1, r7, #8
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800728a:	e077      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa7a 	bl	8007788 <USBD_CtlError>
            err++;
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	3301      	adds	r3, #1
 8007298:	72fb      	strb	r3, [r7, #11]
          break;
 800729a:	e06f      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7c12      	ldrb	r2, [r2, #16]
 80072b4:	f107 0108 	add.w	r1, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072be:	e05d      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa60 	bl	8007788 <USBD_CtlError>
            err++;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	3301      	adds	r3, #1
 80072cc:	72fb      	strb	r3, [r7, #11]
          break;
 80072ce:	e055      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f2:	e043      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa46 	bl	8007788 <USBD_CtlError>
            err++;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	3301      	adds	r3, #1
 8007300:	72fb      	strb	r3, [r7, #11]
          break;
 8007302:	e03b      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	7c12      	ldrb	r2, [r2, #16]
 800731c:	f107 0108 	add.w	r1, r7, #8
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
 8007324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007326:	e029      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa2c 	bl	8007788 <USBD_CtlError>
            err++;
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	3301      	adds	r3, #1
 8007334:	72fb      	strb	r3, [r7, #11]
          break;
 8007336:	e021      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	7c12      	ldrb	r2, [r2, #16]
 8007350:	f107 0108 	add.w	r1, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800735a:	e00f      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa12 	bl	8007788 <USBD_CtlError>
            err++;
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	3301      	adds	r3, #1
 8007368:	72fb      	strb	r3, [r7, #11]
          break;
 800736a:	e007      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa0a 	bl	8007788 <USBD_CtlError>
          err++;
 8007374:	7afb      	ldrb	r3, [r7, #11]
 8007376:	3301      	adds	r3, #1
 8007378:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800737a:	e038      	b.n	80073ee <USBD_GetDescriptor+0x286>
 800737c:	e037      	b.n	80073ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	7c1b      	ldrb	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800738c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800738e:	f107 0208 	add.w	r2, r7, #8
 8007392:	4610      	mov	r0, r2
 8007394:	4798      	blx	r3
 8007396:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007398:	e029      	b.n	80073ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f9f3 	bl	8007788 <USBD_CtlError>
        err++;
 80073a2:	7afb      	ldrb	r3, [r7, #11]
 80073a4:	3301      	adds	r3, #1
 80073a6:	72fb      	strb	r3, [r7, #11]
      break;
 80073a8:	e021      	b.n	80073ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7c1b      	ldrb	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10d      	bne.n	80073ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ba:	f107 0208 	add.w	r2, r7, #8
 80073be:	4610      	mov	r0, r2
 80073c0:	4798      	blx	r3
 80073c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3301      	adds	r3, #1
 80073c8:	2207      	movs	r2, #7
 80073ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073cc:	e00f      	b.n	80073ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f9d9 	bl	8007788 <USBD_CtlError>
        err++;
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	3301      	adds	r3, #1
 80073da:	72fb      	strb	r3, [r7, #11]
      break;
 80073dc:	e007      	b.n	80073ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9d1 	bl	8007788 <USBD_CtlError>
      err++;
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	3301      	adds	r3, #1
 80073ea:	72fb      	strb	r3, [r7, #11]
      break;
 80073ec:	bf00      	nop
  }

  if (err != 0U)
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11c      	bne.n	800742e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80073f4:	893b      	ldrh	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d011      	beq.n	800741e <USBD_GetDescriptor+0x2b6>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	88db      	ldrh	r3, [r3, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00d      	beq.n	800741e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	88da      	ldrh	r2, [r3, #6]
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	4293      	cmp	r3, r2
 800740a:	bf28      	it	cs
 800740c:	4613      	movcs	r3, r2
 800740e:	b29b      	uxth	r3, r3
 8007410:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007412:	893b      	ldrh	r3, [r7, #8]
 8007414:	461a      	mov	r2, r3
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f9c6 	bl	80077aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	88db      	ldrh	r3, [r3, #6]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9ff 	bl	800782a <USBD_CtlSendStatus>
 800742c:	e000      	b.n	8007430 <USBD_GetDescriptor+0x2c8>
    return;
 800742e:	bf00      	nop
    }
  }
}
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop

08007438 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	889b      	ldrh	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d130      	bne.n	80074ac <USBD_SetAddress+0x74>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	88db      	ldrh	r3, [r3, #6]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d12c      	bne.n	80074ac <USBD_SetAddress+0x74>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	2b7f      	cmp	r3, #127	@ 0x7f
 8007458:	d828      	bhi.n	80074ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	885b      	ldrh	r3, [r3, #2]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007464:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800746c:	2b03      	cmp	r3, #3
 800746e:	d104      	bne.n	800747a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f988 	bl	8007788 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007478:	e01d      	b.n	80074b6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7bfa      	ldrb	r2, [r7, #15]
 800747e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fb1f 	bl	8007aca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9cc 	bl	800782a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a0:	e009      	b.n	80074b6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074aa:	e004      	b.n	80074b6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f96a 	bl	8007788 <USBD_CtlError>
  }
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	885b      	ldrh	r3, [r3, #2]
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	4b41      	ldr	r3, [pc, #260]	@ (80075d8 <USBD_SetConfig+0x118>)
 80074d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074d4:	4b40      	ldr	r3, [pc, #256]	@ (80075d8 <USBD_SetConfig+0x118>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d904      	bls.n	80074e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f952 	bl	8007788 <USBD_CtlError>
 80074e4:	e075      	b.n	80075d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d002      	beq.n	80074f6 <USBD_SetConfig+0x36>
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d023      	beq.n	800753c <USBD_SetConfig+0x7c>
 80074f4:	e062      	b.n	80075bc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80074f6:	4b38      	ldr	r3, [pc, #224]	@ (80075d8 <USBD_SetConfig+0x118>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01a      	beq.n	8007534 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80074fe:	4b36      	ldr	r3, [pc, #216]	@ (80075d8 <USBD_SetConfig+0x118>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2203      	movs	r2, #3
 800750c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007510:	4b31      	ldr	r3, [pc, #196]	@ (80075d8 <USBD_SetConfig+0x118>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff f9e7 	bl	80068ea <USBD_SetClassConfig>
 800751c:	4603      	mov	r3, r0
 800751e:	2b02      	cmp	r3, #2
 8007520:	d104      	bne.n	800752c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f92f 	bl	8007788 <USBD_CtlError>
            return;
 800752a:	e052      	b.n	80075d2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f97c 	bl	800782a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007532:	e04e      	b.n	80075d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f978 	bl	800782a <USBD_CtlSendStatus>
        break;
 800753a:	e04a      	b.n	80075d2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800753c:	4b26      	ldr	r3, [pc, #152]	@ (80075d8 <USBD_SetConfig+0x118>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d112      	bne.n	800756a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800754c:	4b22      	ldr	r3, [pc, #136]	@ (80075d8 <USBD_SetConfig+0x118>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007556:	4b20      	ldr	r3, [pc, #128]	@ (80075d8 <USBD_SetConfig+0x118>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff f9e3 	bl	8006928 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f961 	bl	800782a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007568:	e033      	b.n	80075d2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800756a:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <USBD_SetConfig+0x118>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	429a      	cmp	r2, r3
 8007576:	d01d      	beq.n	80075b4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff f9d1 	bl	8006928 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007586:	4b14      	ldr	r3, [pc, #80]	@ (80075d8 <USBD_SetConfig+0x118>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007590:	4b11      	ldr	r3, [pc, #68]	@ (80075d8 <USBD_SetConfig+0x118>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff f9a7 	bl	80068ea <USBD_SetClassConfig>
 800759c:	4603      	mov	r3, r0
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d104      	bne.n	80075ac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f8ef 	bl	8007788 <USBD_CtlError>
            return;
 80075aa:	e012      	b.n	80075d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f93c 	bl	800782a <USBD_CtlSendStatus>
        break;
 80075b2:	e00e      	b.n	80075d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f938 	bl	800782a <USBD_CtlSendStatus>
        break;
 80075ba:	e00a      	b.n	80075d2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f8e2 	bl	8007788 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80075c4:	4b04      	ldr	r3, [pc, #16]	@ (80075d8 <USBD_SetConfig+0x118>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff f9ac 	bl	8006928 <USBD_ClrClassConfig>
        break;
 80075d0:	bf00      	nop
    }
  }
}
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	200000d4 	.word	0x200000d4

080075dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	88db      	ldrh	r3, [r3, #6]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d004      	beq.n	80075f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f8c9 	bl	8007788 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075f6:	e022      	b.n	800763e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075fe:	2b02      	cmp	r3, #2
 8007600:	dc02      	bgt.n	8007608 <USBD_GetConfig+0x2c>
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc03      	bgt.n	800760e <USBD_GetConfig+0x32>
 8007606:	e015      	b.n	8007634 <USBD_GetConfig+0x58>
 8007608:	2b03      	cmp	r3, #3
 800760a:	d00b      	beq.n	8007624 <USBD_GetConfig+0x48>
 800760c:	e012      	b.n	8007634 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3308      	adds	r3, #8
 8007618:	2201      	movs	r2, #1
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f8c4 	bl	80077aa <USBD_CtlSendData>
        break;
 8007622:	e00c      	b.n	800763e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	2201      	movs	r2, #1
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f8bc 	bl	80077aa <USBD_CtlSendData>
        break;
 8007632:	e004      	b.n	800763e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8a6 	bl	8007788 <USBD_CtlError>
        break;
 800763c:	bf00      	nop
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007656:	3b01      	subs	r3, #1
 8007658:	2b02      	cmp	r3, #2
 800765a:	d81e      	bhi.n	800769a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88db      	ldrh	r3, [r3, #6]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d004      	beq.n	800766e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f88e 	bl	8007788 <USBD_CtlError>
        break;
 800766c:	e01a      	b.n	80076a4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f043 0202 	orr.w	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	330c      	adds	r3, #12
 800768e:	2202      	movs	r2, #2
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f889 	bl	80077aa <USBD_CtlSendData>
      break;
 8007698:	e004      	b.n	80076a4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f873 	bl	8007788 <USBD_CtlError>
      break;
 80076a2:	bf00      	nop
  }
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	885b      	ldrh	r3, [r3, #2]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d106      	bne.n	80076cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f8af 	bl	800782a <USBD_CtlSendStatus>
  }
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e4:	3b01      	subs	r3, #1
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d80b      	bhi.n	8007702 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	885b      	ldrh	r3, [r3, #2]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d10c      	bne.n	800770c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f895 	bl	800782a <USBD_CtlSendStatus>
      }
      break;
 8007700:	e004      	b.n	800770c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f83f 	bl	8007788 <USBD_CtlError>
      break;
 800770a:	e000      	b.n	800770e <USBD_ClrFeature+0x3a>
      break;
 800770c:	bf00      	nop
  }
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	785a      	ldrb	r2, [r3, #1]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	3302      	adds	r3, #2
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	3303      	adds	r3, #3
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	b29b      	uxth	r3, r3
 8007742:	4413      	add	r3, r2
 8007744:	b29a      	uxth	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	3304      	adds	r3, #4
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	3305      	adds	r3, #5
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	b29b      	uxth	r3, r3
 800775c:	4413      	add	r3, r2
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	3306      	adds	r3, #6
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	3307      	adds	r3, #7
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	b29b      	uxth	r3, r3
 8007776:	4413      	add	r3, r2
 8007778:	b29a      	uxth	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	80da      	strh	r2, [r3, #6]

}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007792:	2180      	movs	r1, #128	@ 0x80
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f92f 	bl	80079f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800779a:	2100      	movs	r1, #0
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f92b 	bl	80079f8 <USBD_LL_StallEP>
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80077c0:	88fa      	ldrh	r2, [r7, #6]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077c6:	88fa      	ldrh	r2, [r7, #6]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	2100      	movs	r1, #0
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f998 	bl	8007b08 <USBD_LL_Transmit>

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	4613      	mov	r3, r2
 80077ee:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	2100      	movs	r1, #0
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f986 	bl	8007b08 <USBD_LL_Transmit>

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	2100      	movs	r1, #0
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f997 	bl	8007b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2204      	movs	r2, #4
 8007836:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800783a:	2300      	movs	r3, #0
 800783c:	2200      	movs	r2, #0
 800783e:	2100      	movs	r1, #0
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f961 	bl	8007b08 <USBD_LL_Transmit>

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2205      	movs	r2, #5
 800785c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007860:	2300      	movs	r3, #0
 8007862:	2200      	movs	r2, #0
 8007864:	2100      	movs	r1, #0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f971 	bl	8007b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800788a:	4619      	mov	r1, r3
 800788c:	4610      	mov	r0, r2
 800788e:	f7ff f85e 	bl	800694e <USBD_LL_SetupStage>
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	440b      	add	r3, r1
 80078ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	4619      	mov	r1, r3
 80078c4:	f7ff f890 	bl	80069e8 <USBD_LL_DataOutStage>
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	440b      	add	r3, r1
 80078f0:	3324      	adds	r3, #36	@ 0x24
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	4619      	mov	r1, r3
 80078f8:	f7ff f8e7 	bl	8006aca <USBD_LL_DataInStage>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff f9f7 	bl	8006d06 <USBD_LL_SOF>
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007928:	2301      	movs	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	799b      	ldrb	r3, [r3, #6]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d001      	beq.n	8007938 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007934:	f7f9 fa09 	bl	8000d4a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800793e:	7bfa      	ldrb	r2, [r7, #15]
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff f9a7 	bl	8006c96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff f960 	bl	8006c14 <USBD_LL_Reset>
}
 8007954:	bf00      	nop
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff f9a2 	bl	8006cb4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	7a9b      	ldrb	r3, [r3, #10]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007978:	4b04      	ldr	r3, [pc, #16]	@ (800798c <HAL_PCD_SuspendCallback+0x30>)
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	4a03      	ldr	r2, [pc, #12]	@ (800798c <HAL_PCD_SuspendCallback+0x30>)
 800797e:	f043 0306 	orr.w	r3, r3, #6
 8007982:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	e000ed00 	.word	0xe000ed00

08007990 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff f99c 	bl	8006cdc <USBD_LL_Resume>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	4608      	mov	r0, r1
 80079b6:	4611      	mov	r1, r2
 80079b8:	461a      	mov	r2, r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	70fb      	strb	r3, [r7, #3]
 80079be:	460b      	mov	r3, r1
 80079c0:	70bb      	strb	r3, [r7, #2]
 80079c2:	4613      	mov	r3, r2
 80079c4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80079d4:	78bb      	ldrb	r3, [r7, #2]
 80079d6:	883a      	ldrh	r2, [r7, #0]
 80079d8:	78f9      	ldrb	r1, [r7, #3]
 80079da:	f7fa fc1e 	bl	800221a <HAL_PCD_EP_Open>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 f8d5 	bl	8007b94 <USBD_Get_USB_Status>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a12:	78fa      	ldrb	r2, [r7, #3]
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fa fcc4 	bl	80023a4 <HAL_PCD_EP_SetStall>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f8b6 	bl	8007b94 <USBD_Get_USB_Status>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	4611      	mov	r1, r2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fa fd05 	bl	8002464 <HAL_PCD_EP_ClrStall>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f897 	bl	8007b94 <USBD_Get_USB_Status>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	da0b      	bge.n	8007aa8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	440b      	add	r3, r1
 8007aa2:	3312      	adds	r3, #18
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	e00b      	b.n	8007ac0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007aae:	68f9      	ldr	r1, [r7, #12]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	440b      	add	r3, r1
 8007aba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007abe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr

08007aca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fa fb72 	bl	80021d2 <HAL_PCD_SetAddress>
 8007aee:	4603      	mov	r3, r0
 8007af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 f84d 	bl	8007b94 <USBD_Get_USB_Status>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	607a      	str	r2, [r7, #4]
 8007b12:	461a      	mov	r2, r3
 8007b14:	460b      	mov	r3, r1
 8007b16:	72fb      	strb	r3, [r7, #11]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007b2a:	893b      	ldrh	r3, [r7, #8]
 8007b2c:	7af9      	ldrb	r1, [r7, #11]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	f7fa fc01 	bl	8002336 <HAL_PCD_EP_Transmit>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 f82a 	bl	8007b94 <USBD_Get_USB_Status>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b44:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	72fb      	strb	r3, [r7, #11]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007b70:	893b      	ldrh	r3, [r7, #8]
 8007b72:	7af9      	ldrb	r1, [r7, #11]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	f7fa fbad 	bl	80022d4 <HAL_PCD_EP_Receive>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f807 	bl	8007b94 <USBD_Get_USB_Status>
 8007b86:	4603      	mov	r3, r0
 8007b88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d817      	bhi.n	8007bd8 <USBD_Get_USB_Status+0x44>
 8007ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb0 <USBD_Get_USB_Status+0x1c>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bc7 	.word	0x08007bc7
 8007bb8:	08007bcd 	.word	0x08007bcd
 8007bbc:	08007bd3 	.word	0x08007bd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc4:	e00b      	b.n	8007bde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bca:	e008      	b.n	8007bde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd0:	e005      	b.n	8007bde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd6:	e002      	b.n	8007bde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	73fb      	strb	r3, [r7, #15]
    break;
 8007bdc:	bf00      	nop
  }
  return usb_status;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop

08007bec <memset>:
 8007bec:	4603      	mov	r3, r0
 8007bee:	4402      	add	r2, r0
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d100      	bne.n	8007bf6 <memset+0xa>
 8007bf4:	4770      	bx	lr
 8007bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfa:	e7f9      	b.n	8007bf0 <memset+0x4>

08007bfc <__libc_init_array>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	2600      	movs	r6, #0
 8007c00:	4d0c      	ldr	r5, [pc, #48]	@ (8007c34 <__libc_init_array+0x38>)
 8007c02:	4c0d      	ldr	r4, [pc, #52]	@ (8007c38 <__libc_init_array+0x3c>)
 8007c04:	1b64      	subs	r4, r4, r5
 8007c06:	10a4      	asrs	r4, r4, #2
 8007c08:	42a6      	cmp	r6, r4
 8007c0a:	d109      	bne.n	8007c20 <__libc_init_array+0x24>
 8007c0c:	f000 f81a 	bl	8007c44 <_init>
 8007c10:	2600      	movs	r6, #0
 8007c12:	4d0a      	ldr	r5, [pc, #40]	@ (8007c3c <__libc_init_array+0x40>)
 8007c14:	4c0a      	ldr	r4, [pc, #40]	@ (8007c40 <__libc_init_array+0x44>)
 8007c16:	1b64      	subs	r4, r4, r5
 8007c18:	10a4      	asrs	r4, r4, #2
 8007c1a:	42a6      	cmp	r6, r4
 8007c1c:	d105      	bne.n	8007c2a <__libc_init_array+0x2e>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c24:	4798      	blx	r3
 8007c26:	3601      	adds	r6, #1
 8007c28:	e7ee      	b.n	8007c08 <__libc_init_array+0xc>
 8007c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2e:	4798      	blx	r3
 8007c30:	3601      	adds	r6, #1
 8007c32:	e7f2      	b.n	8007c1a <__libc_init_array+0x1e>
 8007c34:	08007c9c 	.word	0x08007c9c
 8007c38:	08007c9c 	.word	0x08007c9c
 8007c3c:	08007c9c 	.word	0x08007c9c
 8007c40:	08007ca0 	.word	0x08007ca0

08007c44 <_init>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr

08007c50 <_fini>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	bf00      	nop
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr
