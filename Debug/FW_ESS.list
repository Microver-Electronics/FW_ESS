
FW_ESS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08009fd0  08009fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f0  0800a0f0  0000c1cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a0f0  0800a0f0  0000c1cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a0f0  0800a0f0  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0f0  0800a0f0  0000b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0f4  0800a0f4  0000b0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800a0f8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a0  200001cc  0800a2c4  0000c1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800a2c4  0000c66c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013563  00000000  00000000  0000c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8f  00000000  00000000  0001f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000234e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df4  00000000  00000000  00024780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdf6  00000000  00000000  00025574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ede  00000000  00000000  0004136a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a7c  00000000  00000000  0005a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eccc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  000ecd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f1dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009fb8 	.word	0x08009fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08009fb8 	.word	0x08009fb8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000752:	4a19      	ldr	r2, [pc, #100]	@ (80007b8 <MX_ADC2_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_ADC2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_ADC2_Init+0x74>)
 800076a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800076e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_ADC2_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077c:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_ADC2_Init+0x74>)
 800077e:	f000 ff75 	bl	800166c <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fbae 	bl	8000ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800078c:	2301      	movs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_ADC2_Init+0x74>)
 800079e:	f001 fa29 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80007a8:	f000 fb9e 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200001e8 	.word	0x200001e8
 80007b8:	40012800 	.word	0x40012800

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a14      	ldr	r2, [pc, #80]	@ (8000828 <HAL_ADC_MspInit+0x6c>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d121      	bne.n	8000820 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a12      	ldr	r2, [pc, #72]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <HAL_ADC_MspInit+0x70>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <HAL_ADC_MspInit+0x70>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3
    PA4     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = VFB_LOAD_ADC_Pin|VFB_BANK_A_ADC_Pin|VFB_BANK_B_ADC_Pin|VFB_CHARGE_ADC_Pin;
 800080c:	231e      	movs	r3, #30
 800080e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <HAL_ADC_MspInit+0x74>)
 800081c:	f001 fc8c 	bl	8002138 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40012800 	.word	0x40012800
 800082c:	40021000 	.word	0x40021000
 8000830:	40010800 	.word	0x40010800

08000834 <ADC_ReadChannel>:
  * @brief  Read a specific ADC channel
  * @param  channel: ADC channel to read
  * @retval Raw ADC value
  */
uint16_t ADC_ReadChannel(uint32_t channel)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
  uint16_t adcValue = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	82fb      	strh	r3, [r7, #22]

  // Configure ADC channel
  sConfig.Channel = channel;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000850:	2301      	movs	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000854:	2306      	movs	r3, #6
 8000856:	613b      	str	r3, [r7, #16]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <ADC_ReadChannel+0x60>)
 8000860:	f001 f9c8 	bl	8001bf4 <HAL_ADC_ConfigChannel>

  // Start ADC conversion
  HAL_ADC_Start(&hadc2);
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <ADC_ReadChannel+0x60>)
 8000866:	f000 ffd9 	bl	800181c <HAL_ADC_Start>

  // Wait for conversion to complete
  if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK) {
 800086a:	2164      	movs	r1, #100	@ 0x64
 800086c:	4809      	ldr	r0, [pc, #36]	@ (8000894 <ADC_ReadChannel+0x60>)
 800086e:	f001 f8af 	bl	80019d0 <HAL_ADC_PollForConversion>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d104      	bne.n	8000882 <ADC_ReadChannel+0x4e>
    // Read ADC value
    adcValue = HAL_ADC_GetValue(&hadc2);
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <ADC_ReadChannel+0x60>)
 800087a:	f001 f9af 	bl	8001bdc <HAL_ADC_GetValue>
 800087e:	4603      	mov	r3, r0
 8000880:	82fb      	strh	r3, [r7, #22]
  }

  // Stop ADC conversion
  HAL_ADC_Stop(&hadc2);
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <ADC_ReadChannel+0x60>)
 8000884:	f001 f878 	bl	8001978 <HAL_ADC_Stop>

  return adcValue;
 8000888:	8afb      	ldrh	r3, [r7, #22]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001e8 	.word	0x200001e8

08000898 <ADC_ConvertToVoltage>:
  * @brief  Convert ADC raw value to actual voltage
  * @param  adcValue: Raw ADC value
  * @retval Voltage in volts
  */
float ADC_ConvertToVoltage(uint16_t adcValue)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
  // Convert ADC value to voltage using the voltage divider ratio
  // First convert to the ADC input voltage
  float voltage = (float)adcValue * ADC_REFERENCE / ADC_RESOLUTION;
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd07 	bl	80002b8 <__aeabi_ui2f>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4909      	ldr	r1, [pc, #36]	@ (80008d4 <ADC_ConvertToVoltage+0x3c>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fd5a 	bl	8000368 <__aeabi_fmul>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4908      	ldr	r1, [pc, #32]	@ (80008d8 <ADC_ConvertToVoltage+0x40>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe09 	bl	80004d0 <__aeabi_fdiv>
 80008be:	4603      	mov	r3, r0
 80008c0:	60fb      	str	r3, [r7, #12]

  // Then apply the voltage divider ratio to get the actual voltage
  return voltage * VOLTAGE_DIVIDER_RATIO;
 80008c2:	4906      	ldr	r1, [pc, #24]	@ (80008dc <ADC_ConvertToVoltage+0x44>)
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fd4f 	bl	8000368 <__aeabi_fmul>
 80008ca:	4603      	mov	r3, r0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40533333 	.word	0x40533333
 80008d8:	457ff000 	.word	0x457ff000
 80008dc:	40a00000 	.word	0x40a00000

080008e0 <ADC_ReadAll>:
  * @brief  Read all ADC channels for system voltages
  * @param  voltages: Array to store the voltage values (in volts)
  * @retval None
  */
void ADC_ReadAll(float* voltages)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  // Read LOAD voltage (ADC channel 1 - PA1)
  voltages[LOAD] = ADC_ConvertToVoltage(ADC_ReadChannel(ADC_CHANNEL_1));
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff ffa3 	bl	8000834 <ADC_ReadChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f103 040c 	add.w	r4, r3, #12
 80008f8:	4610      	mov	r0, r2
 80008fa:	f7ff ffcd 	bl	8000898 <ADC_ConvertToVoltage>
 80008fe:	4603      	mov	r3, r0
 8000900:	6023      	str	r3, [r4, #0]

  // Read BANK_A voltage (ADC channel 2 - PA2)
  voltages[BANK_A] = ADC_ConvertToVoltage(ADC_ReadChannel(ADC_CHANNEL_2));
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff ff96 	bl	8000834 <ADC_ReadChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ffc4 	bl	8000898 <ADC_ConvertToVoltage>
 8000910:	4602      	mov	r2, r0
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]

  // Read BANK_B voltage (ADC channel 3 - PA3)
  voltages[BANK_B] = ADC_ConvertToVoltage(ADC_ReadChannel(ADC_CHANNEL_3));
 8000916:	2003      	movs	r0, #3
 8000918:	f7ff ff8c 	bl	8000834 <ADC_ReadChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	1d1c      	adds	r4, r3, #4
 8000924:	4610      	mov	r0, r2
 8000926:	f7ff ffb7 	bl	8000898 <ADC_ConvertToVoltage>
 800092a:	4603      	mov	r3, r0
 800092c:	6023      	str	r3, [r4, #0]

  // Read CHARGE voltage (ADC channel 4 - PA4)
  voltages[CHARGE] = ADC_ConvertToVoltage(ADC_ReadChannel(ADC_CHANNEL_4));
 800092e:	2004      	movs	r0, #4
 8000930:	f7ff ff80 	bl	8000834 <ADC_ReadChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f103 0408 	add.w	r4, r3, #8
 800093e:	4610      	mov	r0, r2
 8000940:	f7ff ffaa 	bl	8000898 <ADC_ConvertToVoltage>
 8000944:	4603      	mov	r3, r0
 8000946:	6023      	str	r3, [r4, #0]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}

08000950 <BATTERY_Update>:
/**
  * @brief  Update battery state
  * @retval None
  */
void BATTERY_Update(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  // This function is called periodically to update battery state
  // and handle low battery warning
  // The actual voltage measurement is done elsewhere (ADC_ReadAll)
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <BATTERY_CalculateLevel>:
  * @brief  Calculate battery level from voltage
  * @param  voltage: Battery voltage
  * @retval Battery level (0-100%)
  */
uint8_t BATTERY_CalculateLevel(float voltage)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  int level;

  // Check if voltage is below minimum
  if (voltage <= BATTERY_MIN_VOLTAGE) {
 8000964:	4924      	ldr	r1, [pc, #144]	@ (80009f8 <BATTERY_CalculateLevel+0x9c>)
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fea6 	bl	80006b8 <__aeabi_fcmple>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <BATTERY_CalculateLevel+0x1a>
    return 0;
 8000972:	2300      	movs	r3, #0
 8000974:	e03c      	b.n	80009f0 <BATTERY_CalculateLevel+0x94>
  }

  // Check if voltage is above maximum
  if (voltage >= BATTERY_MAX_VOLTAGE) {
 8000976:	4921      	ldr	r1, [pc, #132]	@ (80009fc <BATTERY_CalculateLevel+0xa0>)
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fea7 	bl	80006cc <__aeabi_fcmpge>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <BATTERY_CalculateLevel+0x2c>
    return 100;
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	e033      	b.n	80009f0 <BATTERY_CalculateLevel+0x94>
  }

  // Calculate level as percentage between min and max
  level = (int)((voltage - BATTERY_MIN_VOLTAGE) /
 8000988:	491b      	ldr	r1, [pc, #108]	@ (80009f8 <BATTERY_CalculateLevel+0x9c>)
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fbe2 	bl	8000154 <__aeabi_fsub>
 8000990:	4603      	mov	r3, r0
 8000992:	491b      	ldr	r1, [pc, #108]	@ (8000a00 <BATTERY_CalculateLevel+0xa4>)
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fd9b 	bl	80004d0 <__aeabi_fdiv>
 800099a:	4603      	mov	r3, r0
                (BATTERY_MAX_VOLTAGE - BATTERY_MIN_VOLTAGE) * 100.0f);
 800099c:	4919      	ldr	r1, [pc, #100]	@ (8000a04 <BATTERY_CalculateLevel+0xa8>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fce2 	bl	8000368 <__aeabi_fmul>
 80009a4:	4603      	mov	r3, r0
  level = (int)((voltage - BATTERY_MIN_VOLTAGE) /
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fea4 	bl	80006f4 <__aeabi_f2iz>
 80009ac:	4603      	mov	r3, r0
 80009ae:	60fb      	str	r3, [r7, #12]

  // Ensure result is within 0-100 range
  if (level < 0) level = 0;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da01      	bge.n	80009ba <BATTERY_CalculateLevel+0x5e>
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  if (level > 100) level = 100;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b64      	cmp	r3, #100	@ 0x64
 80009be:	dd01      	ble.n	80009c4 <BATTERY_CalculateLevel+0x68>
 80009c0:	2364      	movs	r3, #100	@ 0x64
 80009c2:	60fb      	str	r3, [r7, #12]

  // Check if battery is low
  batteryLowFlag = BATTERY_IsLow(voltage);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 f823 	bl	8000a10 <BATTERY_IsLow>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <BATTERY_CalculateLevel+0xac>)
 80009d0:	701a      	strb	r2, [r3, #0]

  // Update warning LED if needed
  HAL_GPIO_WritePin(WARNING_LOW_VOLTAGE_GPIO_Port, WARNING_LOW_VOLTAGE_Pin,
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <BATTERY_CalculateLevel+0xac>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e6:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <BATTERY_CalculateLevel+0xb0>)
 80009e8:	f001 fd41 	bl	800246e <HAL_GPIO_WritePin>
                    batteryLowFlag ? GPIO_PIN_SET : GPIO_PIN_RESET);

  return (uint8_t)level;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	b2db      	uxtb	r3, r3
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	41300000 	.word	0x41300000
 80009fc:	41666666 	.word	0x41666666
 8000a00:	40599998 	.word	0x40599998
 8000a04:	42c80000 	.word	0x42c80000
 8000a08:	20000218 	.word	0x20000218
 8000a0c:	40010c00 	.word	0x40010c00

08000a10 <BATTERY_IsLow>:
  * @brief  Check if battery is low
  * @param  voltage: Battery voltage
  * @retval 1 if battery is low, 0 otherwise
  */
uint8_t BATTERY_IsLow(float voltage)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  // Return 1 if voltage is below low threshold
  return (voltage < BATTERY_LOW_VOLTAGE) ? 1 : 0;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	4906      	ldr	r1, [pc, #24]	@ (8000a38 <BATTERY_IsLow+0x28>)
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fe40 	bl	80006a4 <__aeabi_fcmplt>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <BATTERY_IsLow+0x1e>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	461c      	mov	r4, r3
 8000a2e:	b2e3      	uxtb	r3, r4
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	41380000 	.word	0x41380000

08000a3c <FAULT_Check>:
/**
  * @brief  Check for faults
  * @retval None
  */
void FAULT_Check(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
  uint8_t currentFaults = FAULT_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
  uint32_t currentTime = HAL_GetTick();
 8000a46:	f000 fde3 	bl	8001610 <HAL_GetTick>
 8000a4a:	6078      	str	r0, [r7, #4]

  // Check BLOCK_200A fault line (PB1)
  if (HAL_GPIO_ReadPin(FLT_BLOCK_200A_GPIO_Port, FLT_BLOCK_200A_Pin) == GPIO_PIN_RESET) {
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4837      	ldr	r0, [pc, #220]	@ (8000b2c <FAULT_Check+0xf0>)
 8000a50:	f001 fcf6 	bl	8002440 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <FAULT_Check+0x26>
    currentFaults |= FAULT_BLOCK_200A;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
  }

  // Check BLOCK_100A fault line (PA7)
  if (HAL_GPIO_ReadPin(FLT_BLOCK_100A_GPIO_Port, FLT_BLOCK_100A_Pin) == GPIO_PIN_RESET) {
 8000a62:	2180      	movs	r1, #128	@ 0x80
 8000a64:	4832      	ldr	r0, [pc, #200]	@ (8000b30 <FAULT_Check+0xf4>)
 8000a66:	f001 fceb 	bl	8002440 <HAL_GPIO_ReadPin>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d103      	bne.n	8000a78 <FAULT_Check+0x3c>
    currentFaults |= FAULT_BLOCK_100A;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	73fb      	strb	r3, [r7, #15]
  }

  // Check CHARGE fault line (PA6)
  if (HAL_GPIO_ReadPin(FLT_CHARGE_GPIO_Port, FLT_CHARGE_Pin) == GPIO_PIN_RESET) {
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	482d      	ldr	r0, [pc, #180]	@ (8000b30 <FAULT_Check+0xf4>)
 8000a7c:	f001 fce0 	bl	8002440 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <FAULT_Check+0x52>
    currentFaults |= FAULT_CHARGE;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	73fb      	strb	r3, [r7, #15]
  }

  // Check FAST_CHARGE fault line (PA5)
  if (HAL_GPIO_ReadPin(FLT_FAST_CHARGE_GPIO_Port, FLT_FAST_CHARGE_Pin) == GPIO_PIN_RESET) {
 8000a8e:	2120      	movs	r1, #32
 8000a90:	4827      	ldr	r0, [pc, #156]	@ (8000b30 <FAULT_Check+0xf4>)
 8000a92:	f001 fcd5 	bl	8002440 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d103      	bne.n	8000aa4 <FAULT_Check+0x68>
    currentFaults |= FAULT_FAST_CHARGE;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	73fb      	strb	r3, [r7, #15]
  }

  // Update fault state
  for (int i = 0; i < 4; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	e037      	b.n	8000b1a <FAULT_Check+0xde>
    uint8_t faultBit = (1 << i);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	70fb      	strb	r3, [r7, #3]

    // If fault is active
    if (currentFaults & faultBit) {
 8000ab4:	7bfa      	ldrb	r2, [r7, #15]
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00c      	beq.n	8000ada <FAULT_Check+0x9e>
      // Set fault state
      faultState |= faultBit;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <FAULT_Check+0xf8>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <FAULT_Check+0xf8>)
 8000acc:	701a      	strb	r2, [r3, #0]
      // Update timestamp
      faultTimestamps[i] = currentTime;
 8000ace:	491a      	ldr	r1, [pc, #104]	@ (8000b38 <FAULT_Check+0xfc>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ad8:	e01c      	b.n	8000b14 <FAULT_Check+0xd8>
    }
    // If fault is not active but was active
    else if (faultState & faultBit) {
 8000ada:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <FAULT_Check+0xf8>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d015      	beq.n	8000b14 <FAULT_Check+0xd8>
      // Check if timeout has elapsed
      if (currentTime - faultTimestamps[i] > FAULT_TIMEOUT) {
 8000ae8:	4a13      	ldr	r2, [pc, #76]	@ (8000b38 <FAULT_Check+0xfc>)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d90b      	bls.n	8000b14 <FAULT_Check+0xd8>
        // Clear fault state
        faultState &= ~faultBit;
 8000afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	b25a      	sxtb	r2, r3
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <FAULT_Check+0xf8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <FAULT_Check+0xf8>)
 8000b12:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	ddc4      	ble.n	8000aaa <FAULT_Check+0x6e>
      }
    }
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010c00 	.word	0x40010c00
 8000b30:	40010800 	.word	0x40010800
 8000b34:	20000219 	.word	0x20000219
 8000b38:	2000021c 	.word	0x2000021c

08000b3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a39      	ldr	r2, [pc, #228]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b56:	f043 0320 	orr.w	r3, r3, #32
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b34      	ldr	r3, [pc, #208]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a33      	ldr	r2, [pc, #204]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b31      	ldr	r3, [pc, #196]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b2e      	ldr	r3, [pc, #184]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a2d      	ldr	r2, [pc, #180]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c3c <MX_GPIO_Init+0x100>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_BLOCK_200A_Pin|WARNING_LOW_VOLTAGE_Pin|CTRL_LED_100_Pin|CTRL_LED_50_Pin
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f64f 4131 	movw	r1, #64561	@ 0xfc31
 8000b9e:	4828      	ldr	r0, [pc, #160]	@ (8000c40 <MX_GPIO_Init+0x104>)
 8000ba0:	f001 fc65 	bl	800246e <HAL_GPIO_WritePin>
                          |CTRL_LED_0_Pin|CTRL_LED_CHARGING_Pin|CTRL_LED_CHECK_CHARGER_Pin|LATCH_IN1_Pin
                          |LATCH_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_FAST_CHARGE_Pin|EN_CHARGE_Pin|EN_BLOCK_100A_Pin|CTRL_SPK_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000baa:	4826      	ldr	r0, [pc, #152]	@ (8000c44 <MX_GPIO_Init+0x108>)
 8000bac:	f001 fc5f 	bl	800246e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FLT_FAST_CHARGE_Pin|FLT_CHARGE_Pin|FLT_BLOCK_100A_Pin;
 8000bb0:	23e0      	movs	r3, #224	@ 0xe0
 8000bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_GPIO_Init+0x10c>)
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4820      	ldr	r0, [pc, #128]	@ (8000c44 <MX_GPIO_Init+0x108>)
 8000bc4:	f001 fab8 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = EN_BLOCK_200A_Pin|WARNING_LOW_VOLTAGE_Pin|CTRL_LED_100_Pin|CTRL_LED_50_Pin
 8000bc8:	f64f 4331 	movw	r3, #64561	@ 0xfc31
 8000bcc:	613b      	str	r3, [r7, #16]
                          |CTRL_LED_0_Pin|CTRL_LED_CHARGING_Pin|CTRL_LED_CHECK_CHARGER_Pin|LATCH_IN1_Pin
                          |LATCH_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <MX_GPIO_Init+0x104>)
 8000be2:	f001 faa9 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLT_BLOCK_200A_Pin;
 8000be6:	2302      	movs	r3, #2
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_GPIO_Init+0x10c>)
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLT_BLOCK_200A_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_GPIO_Init+0x104>)
 8000bfa:	f001 fa9d 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EN_FAST_CHARGE_Pin|EN_CHARGE_Pin|EN_BLOCK_100A_Pin|CTRL_SPK_Pin;
 8000bfe:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <MX_GPIO_Init+0x108>)
 8000c18:	f001 fa8e 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LATCH_FB1_Pin|LATCH_FB2_Pin;
 8000c1c:	23c0      	movs	r3, #192	@ 0xc0
 8000c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <MX_GPIO_Init+0x104>)
 8000c30:	f001 fa82 	bl	8002138 <HAL_GPIO_Init>

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	40010800 	.word	0x40010800
 8000c48:	10110000 	.word	0x10110000

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fc86 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f824 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f7ff ff70 	bl	8000b3c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000c5c:	f7ff fd70 	bl	8000740 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000c60:	f008 f85e 	bl	8008d20 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000c64:	f000 fb94 	bl	8001390 <MX_TIM2_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Process incoming commands */
	if (commandReady) {
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <main+0x4c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <main+0x2e>
	  ProcessCommand();
 8000c70:	f000 f874 	bl	8000d5c <ProcessCommand>
	  commandReady = 0;
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <main+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
	}

	/* Update system state */
	SYSTEM_Update();
 8000c7a:	f000 f9d9 	bl	8001030 <SYSTEM_Update>

	/* Check for faults */
	FAULT_Check();
 8000c7e:	f7ff fedd 	bl	8000a3c <FAULT_Check>

	/* Update battery state */
	BATTERY_Update();
 8000c82:	f7ff fe65 	bl	8000950 <BATTERY_Update>

	/* Send periodic status if needed */
	if (SYSTEM_ShouldSendStatus()) {
 8000c86:	f000 f9dd 	bl	8001044 <SYSTEM_ShouldSendStatus>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0eb      	beq.n	8000c68 <main+0x1c>
	  USB_SendStatus(&systemState);
 8000c90:	4802      	ldr	r0, [pc, #8]	@ (8000c9c <main+0x50>)
 8000c92:	f000 fbe5 	bl	8001460 <USB_SendStatus>
	if (commandReady) {
 8000c96:	e7e7      	b.n	8000c68 <main+0x1c>
 8000c98:	20000280 	.word	0x20000280
 8000c9c:	2000022c 	.word	0x2000022c

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	@ 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000caa:	2228      	movs	r2, #40	@ 0x28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f008 fcf2 	bl	8009698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 f932 	bl	8003f60 <HAL_RCC_OscConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d02:	f000 f8f1 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d06:	230f      	movs	r3, #15
 8000d08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fb9e 	bl	8004464 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d2e:	f000 f8db 	bl	8000ee8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000d32:	2312      	movs	r3, #18
 8000d34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d3a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fd08 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d4e:	f000 f8cb 	bl	8000ee8 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3750      	adds	r7, #80	@ 0x50
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <ProcessCommand>:
  * @brief  Process received command from USB
  * @note   Parse and execute commands from the PC application
  * @retval None
  */
void ProcessCommand(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  char cmd = receiveBuffer[0];
 8000d62:	4b5e      	ldr	r3, [pc, #376]	@ (8000edc <ProcessCommand+0x180>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]

  switch(cmd) {
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	3b43      	subs	r3, #67	@ 0x43
 8000d6c:	2b10      	cmp	r3, #16
 8000d6e:	f200 80a6 	bhi.w	8000ebe <ProcessCommand+0x162>
 8000d72:	a201      	add	r2, pc, #4	@ (adr r2, 8000d78 <ProcessCommand+0x1c>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000e1b 	.word	0x08000e1b
 8000d7c:	08000ebf 	.word	0x08000ebf
 8000d80:	08000e81 	.word	0x08000e81
 8000d84:	08000ebf 	.word	0x08000ebf
 8000d88:	08000ebf 	.word	0x08000ebf
 8000d8c:	08000ebf 	.word	0x08000ebf
 8000d90:	08000ebf 	.word	0x08000ebf
 8000d94:	08000ebf 	.word	0x08000ebf
 8000d98:	08000ebf 	.word	0x08000ebf
 8000d9c:	08000ddd 	.word	0x08000ddd
 8000da0:	08000ebf 	.word	0x08000ebf
 8000da4:	08000ebf 	.word	0x08000ebf
 8000da8:	08000ebf 	.word	0x08000ebf
 8000dac:	08000e3d 	.word	0x08000e3d
 8000db0:	08000ebf 	.word	0x08000ebf
 8000db4:	08000e5f 	.word	0x08000e5f
 8000db8:	08000dbd 	.word	0x08000dbd
    case 'S': // Status request
      // Update all values and send status
      ADC_ReadAll(systemState.voltages);
 8000dbc:	4848      	ldr	r0, [pc, #288]	@ (8000ee0 <ProcessCommand+0x184>)
 8000dbe:	f7ff fd8f 	bl	80008e0 <ADC_ReadAll>
      systemState.batteryLevel = BATTERY_CalculateLevel(systemState.voltages[BANK_A]);
 8000dc2:	4b48      	ldr	r3, [pc, #288]	@ (8000ee4 <ProcessCommand+0x188>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdc8 	bl	800095c <BATTERY_CalculateLevel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b44      	ldr	r3, [pc, #272]	@ (8000ee4 <ProcessCommand+0x188>)
 8000dd2:	701a      	strb	r2, [r3, #0]
      USB_SendStatus(&systemState);
 8000dd4:	4843      	ldr	r0, [pc, #268]	@ (8000ee4 <ProcessCommand+0x188>)
 8000dd6:	f000 fb43 	bl	8001460 <USB_SendStatus>
      break;
 8000dda:	e07b      	b.n	8000ed4 <ProcessCommand+0x178>

    case 'L': // LED control (L0-5)(0-1)
      if (receiveBuffer[1] >= '0' && receiveBuffer[1] <= '5' &&
 8000ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8000edc <ProcessCommand+0x180>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000de2:	d96e      	bls.n	8000ec2 <ProcessCommand+0x166>
 8000de4:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <ProcessCommand+0x180>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	2b35      	cmp	r3, #53	@ 0x35
 8000dea:	d86a      	bhi.n	8000ec2 <ProcessCommand+0x166>
          receiveBuffer[2] >= '0' && receiveBuffer[2] <= '1') {
 8000dec:	4b3b      	ldr	r3, [pc, #236]	@ (8000edc <ProcessCommand+0x180>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
      if (receiveBuffer[1] >= '0' && receiveBuffer[1] <= '5' &&
 8000df0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000df2:	d966      	bls.n	8000ec2 <ProcessCommand+0x166>
          receiveBuffer[2] >= '0' && receiveBuffer[2] <= '1') {
 8000df4:	4b39      	ldr	r3, [pc, #228]	@ (8000edc <ProcessCommand+0x180>)
 8000df6:	789b      	ldrb	r3, [r3, #2]
 8000df8:	2b31      	cmp	r3, #49	@ 0x31
 8000dfa:	d862      	bhi.n	8000ec2 <ProcessCommand+0x166>
        uint8_t ledIndex = receiveBuffer[1] - '0';
 8000dfc:	4b37      	ldr	r3, [pc, #220]	@ (8000edc <ProcessCommand+0x180>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	3b30      	subs	r3, #48	@ 0x30
 8000e02:	713b      	strb	r3, [r7, #4]
        uint8_t ledState = receiveBuffer[2] - '0';
 8000e04:	4b35      	ldr	r3, [pc, #212]	@ (8000edc <ProcessCommand+0x180>)
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	3b30      	subs	r3, #48	@ 0x30
 8000e0a:	70fb      	strb	r3, [r7, #3]
        SYSTEM_SetLED(ledIndex, ledState);
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	793b      	ldrb	r3, [r7, #4]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f930 	bl	8001078 <SYSTEM_SetLED>
      }
      break;
 8000e18:	e053      	b.n	8000ec2 <ProcessCommand+0x166>

    case 'C': // Charge control (C0-2)
      if (receiveBuffer[1] >= '0' && receiveBuffer[1] <= '2') {
 8000e1a:	4b30      	ldr	r3, [pc, #192]	@ (8000edc <ProcessCommand+0x180>)
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e20:	d951      	bls.n	8000ec6 <ProcessCommand+0x16a>
 8000e22:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <ProcessCommand+0x180>)
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	2b32      	cmp	r3, #50	@ 0x32
 8000e28:	d84d      	bhi.n	8000ec6 <ProcessCommand+0x16a>
        uint8_t chargeMode = receiveBuffer[1] - '0';
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <ProcessCommand+0x180>)
 8000e2c:	785b      	ldrb	r3, [r3, #1]
 8000e2e:	3b30      	subs	r3, #48	@ 0x30
 8000e30:	703b      	strb	r3, [r7, #0]
        SYSTEM_SetChargeMode(chargeMode);
 8000e32:	783b      	ldrb	r3, [r7, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f93b 	bl	80010b0 <SYSTEM_SetChargeMode>
      }
      break;
 8000e3a:	e044      	b.n	8000ec6 <ProcessCommand+0x16a>

    case 'P': // Power output control (P0-1)
      if (receiveBuffer[1] >= '0' && receiveBuffer[1] <= '1') {
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <ProcessCommand+0x180>)
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e42:	d942      	bls.n	8000eca <ProcessCommand+0x16e>
 8000e44:	4b25      	ldr	r3, [pc, #148]	@ (8000edc <ProcessCommand+0x180>)
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	2b31      	cmp	r3, #49	@ 0x31
 8000e4a:	d83e      	bhi.n	8000eca <ProcessCommand+0x16e>
        uint8_t powerState = receiveBuffer[1] - '0';
 8000e4c:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <ProcessCommand+0x180>)
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	3b30      	subs	r3, #48	@ 0x30
 8000e52:	717b      	strb	r3, [r7, #5]
        SYSTEM_SetPowerOutput(powerState);
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f93c 	bl	80010d4 <SYSTEM_SetPowerOutput>
      }
      break;
 8000e5c:	e035      	b.n	8000eca <ProcessCommand+0x16e>

    case 'R': // Relay control (R0-2)
      if (receiveBuffer[1] >= '0' && receiveBuffer[1] <= '2') {
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <ProcessCommand+0x180>)
 8000e60:	785b      	ldrb	r3, [r3, #1]
 8000e62:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e64:	d933      	bls.n	8000ece <ProcessCommand+0x172>
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <ProcessCommand+0x180>)
 8000e68:	785b      	ldrb	r3, [r3, #1]
 8000e6a:	2b32      	cmp	r3, #50	@ 0x32
 8000e6c:	d82f      	bhi.n	8000ece <ProcessCommand+0x172>
        uint8_t relayMode = receiveBuffer[1] - '0';
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <ProcessCommand+0x180>)
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	3b30      	subs	r3, #48	@ 0x30
 8000e74:	71bb      	strb	r3, [r7, #6]
        SYSTEM_SetRelayMode(relayMode);
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f941 	bl	8001100 <SYSTEM_SetRelayMode>
      }
      break;
 8000e7e:	e026      	b.n	8000ece <ProcessCommand+0x172>

    case 'E': // Individual enable signal control (E0-3)(0-1)
      if (receiveBuffer[1] >= '0' && receiveBuffer[1] <= '3' &&
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <ProcessCommand+0x180>)
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e86:	d924      	bls.n	8000ed2 <ProcessCommand+0x176>
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <ProcessCommand+0x180>)
 8000e8a:	785b      	ldrb	r3, [r3, #1]
 8000e8c:	2b33      	cmp	r3, #51	@ 0x33
 8000e8e:	d820      	bhi.n	8000ed2 <ProcessCommand+0x176>
          receiveBuffer[2] >= '0' && receiveBuffer[2] <= '1') {
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <ProcessCommand+0x180>)
 8000e92:	789b      	ldrb	r3, [r3, #2]
      if (receiveBuffer[1] >= '0' && receiveBuffer[1] <= '3' &&
 8000e94:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e96:	d91c      	bls.n	8000ed2 <ProcessCommand+0x176>
          receiveBuffer[2] >= '0' && receiveBuffer[2] <= '1') {
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <ProcessCommand+0x180>)
 8000e9a:	789b      	ldrb	r3, [r3, #2]
 8000e9c:	2b31      	cmp	r3, #49	@ 0x31
 8000e9e:	d818      	bhi.n	8000ed2 <ProcessCommand+0x176>
        uint8_t signalIndex = receiveBuffer[1] - '0';
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <ProcessCommand+0x180>)
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	3b30      	subs	r3, #48	@ 0x30
 8000ea6:	70bb      	strb	r3, [r7, #2]
        uint8_t signalState = receiveBuffer[2] - '0';
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <ProcessCommand+0x180>)
 8000eaa:	789b      	ldrb	r3, [r3, #2]
 8000eac:	3b30      	subs	r3, #48	@ 0x30
 8000eae:	707b      	strb	r3, [r7, #1]
        SYSTEM_SetEnableSignal(signalIndex, signalState);
 8000eb0:	787a      	ldrb	r2, [r7, #1]
 8000eb2:	78bb      	ldrb	r3, [r7, #2]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fa1e 	bl	80012f8 <SYSTEM_SetEnableSignal>
      }
      break;
 8000ebc:	e009      	b.n	8000ed2 <ProcessCommand+0x176>

    default:
      break;
 8000ebe:	bf00      	nop
 8000ec0:	e008      	b.n	8000ed4 <ProcessCommand+0x178>
      break;
 8000ec2:	bf00      	nop
 8000ec4:	e006      	b.n	8000ed4 <ProcessCommand+0x178>
      break;
 8000ec6:	bf00      	nop
 8000ec8:	e004      	b.n	8000ed4 <ProcessCommand+0x178>
      break;
 8000eca:	bf00      	nop
 8000ecc:	e002      	b.n	8000ed4 <ProcessCommand+0x178>
      break;
 8000ece:	bf00      	nop
 8000ed0:	e000      	b.n	8000ed4 <ProcessCommand+0x178>
      break;
 8000ed2:	bf00      	nop
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000240 	.word	0x20000240
 8000ee0:	20000230 	.word	0x20000230
 8000ee4:	2000022c 	.word	0x2000022c

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <Error_Handler+0x8>

08000ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <HAL_MspInit+0x5c>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <HAL_MspInit+0x5c>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_MspInit+0x5c>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_MspInit+0x5c>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <HAL_MspInit+0x5c>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1c:	61d3      	str	r3, [r2, #28]
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_MspInit+0x5c>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_MspInit+0x60>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_MspInit+0x60>)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010000 	.word	0x40010000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <NMI_Handler+0x4>

08000f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <MemManage_Handler+0x4>

08000f70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 fb20 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fb6:	f001 fb8e 	bl	80026d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000102c 	.word	0x2000102c

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	@ (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f008 fb58 	bl	80096a8 <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20005000 	.word	0x20005000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000284 	.word	0x20000284
 800102c:	20001670 	.word	0x20001670

08001030 <SYSTEM_Update>:
/**
  * @brief  Update system status
  * @retval None
  */
void SYSTEM_Update(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  // Update hardware states if there were any changes
  UpdateLEDs();
 8001034:	f000 f8aa 	bl	800118c <UpdateLEDs>
  UpdateChargeMode();
 8001038:	f000 f8fe 	bl	8001238 <UpdateChargeMode>
  UpdatePowerOutput();
 800103c:	f000 f936 	bl	80012ac <UpdatePowerOutput>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <SYSTEM_ShouldSendStatus>:
/**
  * @brief  Check if status should be sent periodically
  * @retval 1 if status should be sent, 0 otherwise
  */
uint8_t SYSTEM_ShouldSendStatus(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  if (systemTicks - lastStatusTime > STATUS_INTERVAL) {
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <SYSTEM_ShouldSendStatus+0x2c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <SYSTEM_ShouldSendStatus+0x30>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001056:	d905      	bls.n	8001064 <SYSTEM_ShouldSendStatus+0x20>
    lastStatusTime = systemTicks;
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SYSTEM_ShouldSendStatus+0x2c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <SYSTEM_ShouldSendStatus+0x30>)
 800105e:	6013      	str	r3, [r2, #0]
    return 1;
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <SYSTEM_ShouldSendStatus+0x22>
  }
  return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000288 	.word	0x20000288
 8001074:	2000028c 	.word	0x2000028c

08001078 <SYSTEM_SetLED>:
  * @param  ledIndex: LED index (0-5)
  * @param  state: 0 for off, 1 for on
  * @retval None
  */
void SYSTEM_SetLED(uint8_t ledIndex, uint8_t state)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
  if (ledIndex < LED_COUNT) {
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d809      	bhi.n	80010a2 <SYSTEM_SetLED+0x2a>
    ledStates[ledIndex] = state ? 1 : 0;
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2da      	uxtb	r2, r3
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4611      	mov	r1, r2
 800109e:	4a03      	ldr	r2, [pc, #12]	@ (80010ac <SYSTEM_SetLED+0x34>)
 80010a0:	54d1      	strb	r1, [r2, r3]
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	20000290 	.word	0x20000290

080010b0 <SYSTEM_SetChargeMode>:
  * @brief  Set charge mode
  * @param  mode: 0 for off, 1 for normal, 2 for fast
  * @retval None
  */
void SYSTEM_SetChargeMode(uint8_t mode)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if (mode <= CHARGE_FAST) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d802      	bhi.n	80010c6 <SYSTEM_SetChargeMode+0x16>
    currentChargeMode = mode;
 80010c0:	4a03      	ldr	r2, [pc, #12]	@ (80010d0 <SYSTEM_SetChargeMode+0x20>)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	7013      	strb	r3, [r2, #0]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000296 	.word	0x20000296

080010d4 <SYSTEM_SetPowerOutput>:
  * @brief  Set power output state
  * @param  state: 0 for off, 1 for on
  * @retval None
  */
void SYSTEM_SetPowerOutput(uint8_t state)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  powerOutputEnabled = state ? 1 : 0;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf14      	ite	ne
 80010e4:	2301      	movne	r3, #1
 80010e6:	2300      	moveq	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <SYSTEM_SetPowerOutput+0x28>)
 80010ee:	701a      	strb	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000297 	.word	0x20000297

08001100 <SYSTEM_SetRelayMode>:
  * @brief  Set relay mode
  * @param  mode: 0 for off, 1 for set, 2 for reset
  * @retval None
  */
void SYSTEM_SetRelayMode(uint8_t mode)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  switch (mode) {
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d024      	beq.n	800115a <SYSTEM_SetRelayMode+0x5a>
 8001110:	2b02      	cmp	r3, #2
 8001112:	dc35      	bgt.n	8001180 <SYSTEM_SetRelayMode+0x80>
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <SYSTEM_SetRelayMode+0x1e>
 8001118:	2b01      	cmp	r3, #1
 800111a:	d00b      	beq.n	8001134 <SYSTEM_SetRelayMode+0x34>
      HAL_GPIO_WritePin(LATCH_IN2_GPIO_Port, LATCH_IN2_Pin, GPIO_PIN_SET);
      HAL_Delay(100); // Pulse for 100ms
      HAL_GPIO_WritePin(LATCH_IN2_GPIO_Port, LATCH_IN2_Pin, GPIO_PIN_RESET);
      break;
  }
}
 800111c:	e030      	b.n	8001180 <SYSTEM_SetRelayMode+0x80>
      HAL_GPIO_WritePin(LATCH_IN1_GPIO_Port, LATCH_IN1_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2110      	movs	r1, #16
 8001122:	4819      	ldr	r0, [pc, #100]	@ (8001188 <SYSTEM_SetRelayMode+0x88>)
 8001124:	f001 f9a3 	bl	800246e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LATCH_IN2_GPIO_Port, LATCH_IN2_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2120      	movs	r1, #32
 800112c:	4816      	ldr	r0, [pc, #88]	@ (8001188 <SYSTEM_SetRelayMode+0x88>)
 800112e:	f001 f99e 	bl	800246e <HAL_GPIO_WritePin>
      break;
 8001132:	e025      	b.n	8001180 <SYSTEM_SetRelayMode+0x80>
      HAL_GPIO_WritePin(LATCH_IN2_GPIO_Port, LATCH_IN2_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2120      	movs	r1, #32
 8001138:	4813      	ldr	r0, [pc, #76]	@ (8001188 <SYSTEM_SetRelayMode+0x88>)
 800113a:	f001 f998 	bl	800246e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LATCH_IN1_GPIO_Port, LATCH_IN1_Pin, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2110      	movs	r1, #16
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <SYSTEM_SetRelayMode+0x88>)
 8001144:	f001 f993 	bl	800246e <HAL_GPIO_WritePin>
      HAL_Delay(100); // Pulse for 100ms
 8001148:	2064      	movs	r0, #100	@ 0x64
 800114a:	f000 fa6b 	bl	8001624 <HAL_Delay>
      HAL_GPIO_WritePin(LATCH_IN1_GPIO_Port, LATCH_IN1_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2110      	movs	r1, #16
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <SYSTEM_SetRelayMode+0x88>)
 8001154:	f001 f98b 	bl	800246e <HAL_GPIO_WritePin>
      break;
 8001158:	e012      	b.n	8001180 <SYSTEM_SetRelayMode+0x80>
      HAL_GPIO_WritePin(LATCH_IN1_GPIO_Port, LATCH_IN1_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2110      	movs	r1, #16
 800115e:	480a      	ldr	r0, [pc, #40]	@ (8001188 <SYSTEM_SetRelayMode+0x88>)
 8001160:	f001 f985 	bl	800246e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LATCH_IN2_GPIO_Port, LATCH_IN2_Pin, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	2120      	movs	r1, #32
 8001168:	4807      	ldr	r0, [pc, #28]	@ (8001188 <SYSTEM_SetRelayMode+0x88>)
 800116a:	f001 f980 	bl	800246e <HAL_GPIO_WritePin>
      HAL_Delay(100); // Pulse for 100ms
 800116e:	2064      	movs	r0, #100	@ 0x64
 8001170:	f000 fa58 	bl	8001624 <HAL_Delay>
      HAL_GPIO_WritePin(LATCH_IN2_GPIO_Port, LATCH_IN2_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2120      	movs	r1, #32
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <SYSTEM_SetRelayMode+0x88>)
 800117a:	f001 f978 	bl	800246e <HAL_GPIO_WritePin>
      break;
 800117e:	bf00      	nop
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40010c00 	.word	0x40010c00

0800118c <UpdateLEDs>:
/**
  * @brief  Update LEDs based on current state
  * @retval None
  */
static void UpdateLEDs(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  // Update LED 0%
  HAL_GPIO_WritePin(CTRL_LED_0_GPIO_Port, CTRL_LED_0_Pin,
                    ledStates[LED_0_PERCENT] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001190:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <UpdateLEDs+0xa4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
  HAL_GPIO_WritePin(CTRL_LED_0_GPIO_Port, CTRL_LED_0_Pin,
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf14      	ite	ne
 8001198:	2301      	movne	r3, #1
 800119a:	2300      	moveq	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a4:	4823      	ldr	r0, [pc, #140]	@ (8001234 <UpdateLEDs+0xa8>)
 80011a6:	f001 f962 	bl	800246e <HAL_GPIO_WritePin>

  // Update LED 50%
  HAL_GPIO_WritePin(CTRL_LED_50_GPIO_Port, CTRL_LED_50_Pin,
                    ledStates[LED_50_PERCENT] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <UpdateLEDs+0xa4>)
 80011ac:	785b      	ldrb	r3, [r3, #1]
  HAL_GPIO_WritePin(CTRL_LED_50_GPIO_Port, CTRL_LED_50_Pin,
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011be:	481d      	ldr	r0, [pc, #116]	@ (8001234 <UpdateLEDs+0xa8>)
 80011c0:	f001 f955 	bl	800246e <HAL_GPIO_WritePin>

  // Update LED 100%
  HAL_GPIO_WritePin(CTRL_LED_100_GPIO_Port, CTRL_LED_100_Pin,
                    ledStates[LED_100_PERCENT] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <UpdateLEDs+0xa4>)
 80011c6:	789b      	ldrb	r3, [r3, #2]
  HAL_GPIO_WritePin(CTRL_LED_100_GPIO_Port, CTRL_LED_100_Pin,
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011d8:	4816      	ldr	r0, [pc, #88]	@ (8001234 <UpdateLEDs+0xa8>)
 80011da:	f001 f948 	bl	800246e <HAL_GPIO_WritePin>

  // Update LED Charging
  HAL_GPIO_WritePin(CTRL_LED_CHARGING_GPIO_Port, CTRL_LED_CHARGING_Pin,
                    ledStates[LED_CHARGING] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <UpdateLEDs+0xa4>)
 80011e0:	78db      	ldrb	r3, [r3, #3]
  HAL_GPIO_WritePin(CTRL_LED_CHARGING_GPIO_Port, CTRL_LED_CHARGING_Pin,
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011f2:	4810      	ldr	r0, [pc, #64]	@ (8001234 <UpdateLEDs+0xa8>)
 80011f4:	f001 f93b 	bl	800246e <HAL_GPIO_WritePin>

  // Update LED Check Charger
  HAL_GPIO_WritePin(CTRL_LED_CHECK_CHARGER_GPIO_Port, CTRL_LED_CHECK_CHARGER_Pin,
                    ledStates[LED_CHECK_CHARGER] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <UpdateLEDs+0xa4>)
 80011fa:	791b      	ldrb	r3, [r3, #4]
  HAL_GPIO_WritePin(CTRL_LED_CHECK_CHARGER_GPIO_Port, CTRL_LED_CHECK_CHARGER_Pin,
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800120c:	4809      	ldr	r0, [pc, #36]	@ (8001234 <UpdateLEDs+0xa8>)
 800120e:	f001 f92e 	bl	800246e <HAL_GPIO_WritePin>

  // Update Warning LED
  HAL_GPIO_WritePin(WARNING_LOW_VOLTAGE_GPIO_Port, WARNING_LOW_VOLTAGE_Pin,
                    ledStates[LED_WARNING] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <UpdateLEDs+0xa4>)
 8001214:	795b      	ldrb	r3, [r3, #5]
  HAL_GPIO_WritePin(WARNING_LOW_VOLTAGE_GPIO_Port, WARNING_LOW_VOLTAGE_Pin,
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf14      	ite	ne
 800121a:	2301      	movne	r3, #1
 800121c:	2300      	moveq	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001226:	4803      	ldr	r0, [pc, #12]	@ (8001234 <UpdateLEDs+0xa8>)
 8001228:	f001 f921 	bl	800246e <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000290 	.word	0x20000290
 8001234:	40010c00 	.word	0x40010c00

08001238 <UpdateChargeMode>:
/**
  * @brief  Update charge mode based on current setting
  * @retval None
  */
static void UpdateChargeMode(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  switch (currentChargeMode) {
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <UpdateChargeMode+0x6c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d020      	beq.n	8001286 <UpdateChargeMode+0x4e>
 8001244:	2b02      	cmp	r3, #2
 8001246:	dc2b      	bgt.n	80012a0 <UpdateChargeMode+0x68>
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <UpdateChargeMode+0x1a>
 800124c:	2b01      	cmp	r3, #1
 800124e:	d00d      	beq.n	800126c <UpdateChargeMode+0x34>
      // Enable fast charge, disable normal charge
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, GPIO_PIN_SET);
      break;
  }
}
 8001250:	e026      	b.n	80012a0 <UpdateChargeMode+0x68>
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001258:	4813      	ldr	r0, [pc, #76]	@ (80012a8 <UpdateChargeMode+0x70>)
 800125a:	f001 f908 	bl	800246e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001264:	4810      	ldr	r0, [pc, #64]	@ (80012a8 <UpdateChargeMode+0x70>)
 8001266:	f001 f902 	bl	800246e <HAL_GPIO_WritePin>
      break;
 800126a:	e019      	b.n	80012a0 <UpdateChargeMode+0x68>
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <UpdateChargeMode+0x70>)
 8001274:	f001 f8fb 	bl	800246e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127e:	480a      	ldr	r0, [pc, #40]	@ (80012a8 <UpdateChargeMode+0x70>)
 8001280:	f001 f8f5 	bl	800246e <HAL_GPIO_WritePin>
      break;
 8001284:	e00c      	b.n	80012a0 <UpdateChargeMode+0x68>
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800128c:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <UpdateChargeMode+0x70>)
 800128e:	f001 f8ee 	bl	800246e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <UpdateChargeMode+0x70>)
 800129a:	f001 f8e8 	bl	800246e <HAL_GPIO_WritePin>
      break;
 800129e:	bf00      	nop
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000296 	.word	0x20000296
 80012a8:	40010800 	.word	0x40010800

080012ac <UpdatePowerOutput>:
/**
  * @brief  Update power output based on current setting
  * @retval None
  */
static void UpdatePowerOutput(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  // Enable/disable power output by controlling the blocking MOSFETs
  if (powerOutputEnabled) {
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <UpdatePowerOutput+0x40>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <UpdatePowerOutput+0x24>
    // Enable power output
    HAL_GPIO_WritePin(EN_BLOCK_100A_GPIO_Port, EN_BLOCK_100A_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012be:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <UpdatePowerOutput+0x44>)
 80012c0:	f001 f8d5 	bl	800246e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_BLOCK_200A_GPIO_Port, EN_BLOCK_200A_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2101      	movs	r1, #1
 80012c8:	480a      	ldr	r0, [pc, #40]	@ (80012f4 <UpdatePowerOutput+0x48>)
 80012ca:	f001 f8d0 	bl	800246e <HAL_GPIO_WritePin>
  } else {
    // Disable power output
    HAL_GPIO_WritePin(EN_BLOCK_100A_GPIO_Port, EN_BLOCK_100A_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(EN_BLOCK_200A_GPIO_Port, EN_BLOCK_200A_Pin, GPIO_PIN_RESET);
  }
}
 80012ce:	e00a      	b.n	80012e6 <UpdatePowerOutput+0x3a>
    HAL_GPIO_WritePin(EN_BLOCK_100A_GPIO_Port, EN_BLOCK_100A_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d6:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <UpdatePowerOutput+0x44>)
 80012d8:	f001 f8c9 	bl	800246e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_BLOCK_200A_GPIO_Port, EN_BLOCK_200A_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2101      	movs	r1, #1
 80012e0:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <UpdatePowerOutput+0x48>)
 80012e2:	f001 f8c4 	bl	800246e <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000297 	.word	0x20000297
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <SYSTEM_SetEnableSignal>:
  * @param  signalIndex: 0=EN_FAST_CHARGE, 1=EN_CHARGE, 2=EN_BLOCK_100A, 3=EN_BLOCK_200A
  * @param  state: 0 for off, 1 for on
  * @retval None
  */
void SYSTEM_SetEnableSignal(uint8_t signalIndex, uint8_t state)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
  GPIO_PinState pinState = state ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	73fb      	strb	r3, [r7, #15]

  switch (signalIndex) {
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d82a      	bhi.n	8001372 <SYSTEM_SetEnableSignal+0x7a>
 800131c:	a201      	add	r2, pc, #4	@ (adr r2, 8001324 <SYSTEM_SetEnableSignal+0x2c>)
 800131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001322:	bf00      	nop
 8001324:	08001335 	.word	0x08001335
 8001328:	08001345 	.word	0x08001345
 800132c:	08001355 	.word	0x08001355
 8001330:	08001365 	.word	0x08001365
    case 0: // EN_FAST_CHARGE
      HAL_GPIO_WritePin(EN_FAST_CHARGE_GPIO_Port, EN_FAST_CHARGE_Pin, pinState);
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	461a      	mov	r2, r3
 8001338:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133c:	480f      	ldr	r0, [pc, #60]	@ (800137c <SYSTEM_SetEnableSignal+0x84>)
 800133e:	f001 f896 	bl	800246e <HAL_GPIO_WritePin>
      break;
 8001342:	e017      	b.n	8001374 <SYSTEM_SetEnableSignal+0x7c>

    case 1: // EN_CHARGE
      HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, pinState);
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	461a      	mov	r2, r3
 8001348:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <SYSTEM_SetEnableSignal+0x84>)
 800134e:	f001 f88e 	bl	800246e <HAL_GPIO_WritePin>
      break;
 8001352:	e00f      	b.n	8001374 <SYSTEM_SetEnableSignal+0x7c>

    case 2: // EN_BLOCK_100A
      HAL_GPIO_WritePin(EN_BLOCK_100A_GPIO_Port, EN_BLOCK_100A_Pin, pinState);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	461a      	mov	r2, r3
 8001358:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800135c:	4807      	ldr	r0, [pc, #28]	@ (800137c <SYSTEM_SetEnableSignal+0x84>)
 800135e:	f001 f886 	bl	800246e <HAL_GPIO_WritePin>
      break;
 8001362:	e007      	b.n	8001374 <SYSTEM_SetEnableSignal+0x7c>

    case 3: // EN_BLOCK_200A
      HAL_GPIO_WritePin(EN_BLOCK_200A_GPIO_Port, EN_BLOCK_200A_Pin, pinState);
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	461a      	mov	r2, r3
 8001368:	2101      	movs	r1, #1
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <SYSTEM_SetEnableSignal+0x88>)
 800136c:	f001 f87f 	bl	800246e <HAL_GPIO_WritePin>
      break;
 8001370:	e000      	b.n	8001374 <SYSTEM_SetEnableSignal+0x7c>

    default:
      break;
 8001372:	bf00      	nop
  }
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010800 	.word	0x40010800
 8001380:	40010c00 	.word	0x40010c00

08001384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013b6:	2247      	movs	r2, #71	@ 0x47
 80013b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d4:	4813      	ldr	r0, [pc, #76]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013d6:	f003 fb2b 	bl	8004a30 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e0:	f7ff fd82 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013f2:	f003 fb6c 	bl	8004ace <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013fc:	f7ff fd74 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_TIM2_Init+0x94>)
 800140e:	f003 fd29 	bl	8004e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001418:	f7ff fd66 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000298 	.word	0x20000298

08001428 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001438:	d10b      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <HAL_TIM_Base_MspInit+0x34>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a07      	ldr	r2, [pc, #28]	@ (800145c <HAL_TIM_Base_MspInit+0x34>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_TIM_Base_MspInit+0x34>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000

08001460 <USB_SendStatus>:
  * @brief  Send system status over USB
  * @param  state: Pointer to system state structure
  * @retval None
  */
void USB_SendStatus(SystemState_t* state)
{
 8001460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001464:	b08b      	sub	sp, #44	@ 0x2c
 8001466:	af06      	add	r7, sp, #24
 8001468:	6078      	str	r0, [r7, #4]
  int length = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]

  // Format status string: BAT:xx,STATE:x,FAULT:xx,V1:xxxx,V2:xxxx,V3:xxxx,V4:xxxx
  length = sprintf(txBuffer, "BAT:%d,STATE:%d,FAULT:%d,V1:%d,V2:%d,V3:%d,V4:%d\r\n",
                  state->batteryLevel,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
  length = sprintf(txBuffer, "BAT:%d,STATE:%d,FAULT:%d,V1:%d,V2:%d,V3:%d,V4:%d\r\n",
 8001472:	4698      	mov	r8, r3
                  state->state,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	785b      	ldrb	r3, [r3, #1]
  length = sprintf(txBuffer, "BAT:%d,STATE:%d,FAULT:%d,V1:%d,V2:%d,V3:%d,V4:%d\r\n",
 8001478:	4699      	mov	r9, r3
                  state->fault,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	789b      	ldrb	r3, [r3, #2]
  length = sprintf(txBuffer, "BAT:%d,STATE:%d,FAULT:%d,V1:%d,V2:%d,V3:%d,V4:%d\r\n",
 800147e:	603b      	str	r3, [r7, #0]
                  (int)(state->voltages[LOAD] * 1000),     // Convert to millivolts
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	4920      	ldr	r1, [pc, #128]	@ (8001508 <USB_SendStatus+0xa8>)
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ff6e 	bl	8000368 <__aeabi_fmul>
 800148c:	4603      	mov	r3, r0
  length = sprintf(txBuffer, "BAT:%d,STATE:%d,FAULT:%d,V1:%d,V2:%d,V3:%d,V4:%d\r\n",
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f930 	bl	80006f4 <__aeabi_f2iz>
 8001494:	4604      	mov	r4, r0
                  (int)(state->voltages[CHARGE] * 1000),   // Convert to millivolts
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	491b      	ldr	r1, [pc, #108]	@ (8001508 <USB_SendStatus+0xa8>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ff63 	bl	8000368 <__aeabi_fmul>
 80014a2:	4603      	mov	r3, r0
  length = sprintf(txBuffer, "BAT:%d,STATE:%d,FAULT:%d,V1:%d,V2:%d,V3:%d,V4:%d\r\n",
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f925 	bl	80006f4 <__aeabi_f2iz>
 80014aa:	4605      	mov	r5, r0
                  (int)(state->voltages[BANK_A] * 1000),   // Convert to millivolts
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4915      	ldr	r1, [pc, #84]	@ (8001508 <USB_SendStatus+0xa8>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ff58 	bl	8000368 <__aeabi_fmul>
 80014b8:	4603      	mov	r3, r0
  length = sprintf(txBuffer, "BAT:%d,STATE:%d,FAULT:%d,V1:%d,V2:%d,V3:%d,V4:%d\r\n",
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f91a 	bl	80006f4 <__aeabi_f2iz>
 80014c0:	4606      	mov	r6, r0
                  (int)(state->voltages[BANK_B] * 1000));  // Convert to millivolts
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4910      	ldr	r1, [pc, #64]	@ (8001508 <USB_SendStatus+0xa8>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe ff4d 	bl	8000368 <__aeabi_fmul>
 80014ce:	4603      	mov	r3, r0
  length = sprintf(txBuffer, "BAT:%d,STATE:%d,FAULT:%d,V1:%d,V2:%d,V3:%d,V4:%d\r\n",
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f90f 	bl	80006f4 <__aeabi_f2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	9304      	str	r3, [sp, #16]
 80014da:	9603      	str	r6, [sp, #12]
 80014dc:	9502      	str	r5, [sp, #8]
 80014de:	9401      	str	r4, [sp, #4]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	464b      	mov	r3, r9
 80014e6:	4642      	mov	r2, r8
 80014e8:	4908      	ldr	r1, [pc, #32]	@ (800150c <USB_SendStatus+0xac>)
 80014ea:	4809      	ldr	r0, [pc, #36]	@ (8001510 <USB_SendStatus+0xb0>)
 80014ec:	f008 f8b4 	bl	8009658 <siprintf>
 80014f0:	60f8      	str	r0, [r7, #12]

  // Send via USB
  CDC_Transmit_FS((uint8_t*)txBuffer, length);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <USB_SendStatus+0xb0>)
 80014fa:	f007 fccf 	bl	8008e9c <CDC_Transmit_FS>
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001508:	447a0000 	.word	0x447a0000
 800150c:	08009ff8 	.word	0x08009ff8
 8001510:	200002e0 	.word	0x200002e0

08001514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001514:	f7ff ff36 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	@ (8001548 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800151a:	490c      	ldr	r1, [pc, #48]	@ (800154c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800151c:	4a0c      	ldr	r2, [pc, #48]	@ (8001550 <LoopFillZerobss+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001530:	4c09      	ldr	r4, [pc, #36]	@ (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f008 f8b9 	bl	80096b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fb83 	bl	8000c4c <main>
  bx lr
 8001546:	4770      	bx	lr
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001550:	0800a0f8 	.word	0x0800a0f8
  ldr r2, =_sbss
 8001554:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001558:	2000166c 	.word	0x2000166c

0800155c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_2_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <HAL_Init+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	@ (8001588 <HAL_Init+0x28>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 fd9f 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fcba 	bl	8000ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fdb7 	bl	800211e <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 fd7f 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <HAL_IncTick+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_IncTick+0x20>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a03      	ldr	r2, [pc, #12]	@ (800160c <HAL_IncTick+0x20>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000008 	.word	0x20000008
 800160c:	20000360 	.word	0x20000360

08001610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b02      	ldr	r3, [pc, #8]	@ (8001620 <HAL_GetTick+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000360 	.word	0x20000360

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fff0 	bl	8001610 <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_Delay+0x44>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffe0 	bl	8001610 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f7      	bhi.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008

0800166c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0be      	b.n	800180c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff f886 	bl	80007bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fbf1 	bl	8001e98 <ADC_ConversionStop_Disable>
 80016b6:	4603      	mov	r3, r0
 80016b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 8099 	bne.w	80017fa <HAL_ADC_Init+0x18e>
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 8095 	bne.w	80017fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016d8:	f023 0302 	bic.w	r3, r3, #2
 80016dc:	f043 0202 	orr.w	r2, r3, #2
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7b1b      	ldrb	r3, [r3, #12]
 80016f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001704:	d003      	beq.n	800170e <HAL_ADC_Init+0xa2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d102      	bne.n	8001714 <HAL_ADC_Init+0xa8>
 800170e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001712:	e000      	b.n	8001716 <HAL_ADC_Init+0xaa>
 8001714:	2300      	movs	r3, #0
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7d1b      	ldrb	r3, [r3, #20]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d119      	bne.n	8001758 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7b1b      	ldrb	r3, [r3, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	3b01      	subs	r3, #1
 8001732:	035a      	lsls	r2, r3, #13
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	e00b      	b.n	8001758 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	f043 0220 	orr.w	r2, r3, #32
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <HAL_ADC_Init+0x1a8>)
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001788:	d003      	beq.n	8001792 <HAL_ADC_Init+0x126>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d104      	bne.n	800179c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	3b01      	subs	r3, #1
 8001798:	051b      	lsls	r3, r3, #20
 800179a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <HAL_ADC_Init+0x1ac>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d10b      	bne.n	80017d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017d6:	e018      	b.n	800180a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	f023 0312 	bic.w	r3, r3, #18
 80017e0:	f043 0210 	orr.w	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017f8:	e007      	b.n	800180a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fe:	f043 0210 	orr.w	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800180a:	7dfb      	ldrb	r3, [r7, #23]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	ffe1f7fd 	.word	0xffe1f7fd
 8001818:	ff1f0efe 	.word	0xff1f0efe

0800181c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_ADC_Start+0x1a>
 8001832:	2302      	movs	r3, #2
 8001834:	e098      	b.n	8001968 <HAL_ADC_Start+0x14c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fad0 	bl	8001de4 <ADC_Enable>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 8087 	bne.w	800195e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a41      	ldr	r2, [pc, #260]	@ (8001970 <HAL_ADC_Start+0x154>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d105      	bne.n	800187a <HAL_ADC_Start+0x5e>
 800186e:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <HAL_ADC_Start+0x158>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d115      	bne.n	80018a6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001890:	2b00      	cmp	r3, #0
 8001892:	d026      	beq.n	80018e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800189c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a4:	e01d      	b.n	80018e2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001974 <HAL_ADC_Start+0x158>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d004      	beq.n	80018c6 <HAL_ADC_Start+0xaa>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001970 <HAL_ADC_Start+0x154>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10d      	bne.n	80018e2 <HAL_ADC_Start+0xc6>
 80018c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <HAL_ADC_Start+0x158>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	f023 0206 	bic.w	r2, r3, #6
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018fa:	e002      	b.n	8001902 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f06f 0202 	mvn.w	r2, #2
 8001912:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800191e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001922:	d113      	bne.n	800194c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001928:	4a11      	ldr	r2, [pc, #68]	@ (8001970 <HAL_ADC_Start+0x154>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d105      	bne.n	800193a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_ADC_Start+0x158>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001936:	2b00      	cmp	r3, #0
 8001938:	d108      	bne.n	800194c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	e00c      	b.n	8001966 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e003      	b.n	8001966 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40012800 	.word	0x40012800
 8001974:	40012400 	.word	0x40012400

08001978 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADC_Stop+0x1a>
 800198e:	2302      	movs	r3, #2
 8001990:	e01a      	b.n	80019c8 <HAL_ADC_Stop+0x50>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fa7c 	bl	8001e98 <ADC_ConversionStop_Disable>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019e6:	f7ff fe13 	bl	8001610 <HAL_GetTick>
 80019ea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	f043 0220 	orr.w	r2, r3, #32
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0d3      	b.n	8001bba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d131      	bne.n	8001a84 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12a      	bne.n	8001a84 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a2e:	e021      	b.n	8001a74 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a36:	d01d      	beq.n	8001a74 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_ADC_PollForConversion+0x7e>
 8001a3e:	f7ff fde7 	bl	8001610 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d212      	bcs.n	8001a74 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10b      	bne.n	8001a74 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a60:	f043 0204 	orr.w	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0a2      	b.n	8001bba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0d6      	beq.n	8001a30 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a82:	e070      	b.n	8001b66 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a84:	4b4f      	ldr	r3, [pc, #316]	@ (8001bc4 <HAL_ADC_PollForConversion+0x1f4>)
 8001a86:	681c      	ldr	r4, [r3, #0]
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f002 ff1b 	bl	80048c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6919      	ldr	r1, [r3, #16]
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <HAL_ADC_PollForConversion+0x1f8>)
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_ADC_PollForConversion+0x104>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68d9      	ldr	r1, [r3, #12]
 8001aa8:	4b48      	ldr	r3, [pc, #288]	@ (8001bcc <HAL_ADC_PollForConversion+0x1fc>)
 8001aaa:	400b      	ands	r3, r1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d111      	bne.n	8001ad4 <HAL_ADC_PollForConversion+0x104>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	4b46      	ldr	r3, [pc, #280]	@ (8001bd0 <HAL_ADC_PollForConversion+0x200>)
 8001ab8:	400b      	ands	r3, r1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x100>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68d9      	ldr	r1, [r3, #12]
 8001ac4:	4b43      	ldr	r3, [pc, #268]	@ (8001bd4 <HAL_ADC_PollForConversion+0x204>)
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x100>
 8001acc:	2314      	movs	r3, #20
 8001ace:	e020      	b.n	8001b12 <HAL_ADC_PollForConversion+0x142>
 8001ad0:	2329      	movs	r3, #41	@ 0x29
 8001ad2:	e01e      	b.n	8001b12 <HAL_ADC_PollForConversion+0x142>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6919      	ldr	r1, [r3, #16]
 8001ada:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd0 <HAL_ADC_PollForConversion+0x200>)
 8001adc:	400b      	ands	r3, r1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x120>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68d9      	ldr	r1, [r3, #12]
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <HAL_ADC_PollForConversion+0x204>)
 8001aea:	400b      	ands	r3, r1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00d      	beq.n	8001b0c <HAL_ADC_PollForConversion+0x13c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6919      	ldr	r1, [r3, #16]
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <HAL_ADC_PollForConversion+0x208>)
 8001af8:	400b      	ands	r3, r1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <HAL_ADC_PollForConversion+0x140>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68d9      	ldr	r1, [r3, #12]
 8001b04:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <HAL_ADC_PollForConversion+0x208>)
 8001b06:	400b      	ands	r3, r1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_PollForConversion+0x140>
 8001b0c:	2354      	movs	r3, #84	@ 0x54
 8001b0e:	e000      	b.n	8001b12 <HAL_ADC_PollForConversion+0x142>
 8001b10:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b18:	e021      	b.n	8001b5e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d01a      	beq.n	8001b58 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_ADC_PollForConversion+0x168>
 8001b28:	f7ff fd72 	bl	8001610 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d20f      	bcs.n	8001b58 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d90b      	bls.n	8001b58 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	f043 0204 	orr.w	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e030      	b.n	8001bba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d8d9      	bhi.n	8001b1a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f06f 0212 	mvn.w	r2, #18
 8001b6e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b86:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b8a:	d115      	bne.n	8001bb8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d111      	bne.n	8001bb8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	24924924 	.word	0x24924924
 8001bcc:	00924924 	.word	0x00924924
 8001bd0:	12492492 	.word	0x12492492
 8001bd4:	00492492 	.word	0x00492492
 8001bd8:	00249249 	.word	0x00249249

08001bdc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x20>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0dc      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1da>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b06      	cmp	r3, #6
 8001c22:	d81c      	bhi.n	8001c5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b05      	subs	r3, #5
 8001c36:	221f      	movs	r2, #31
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4019      	ands	r1, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3b05      	subs	r3, #5
 8001c50:	fa00 f203 	lsl.w	r2, r0, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c5c:	e03c      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d81c      	bhi.n	8001ca0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	3b23      	subs	r3, #35	@ 0x23
 8001c78:	221f      	movs	r2, #31
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4019      	ands	r1, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b23      	subs	r3, #35	@ 0x23
 8001c92:	fa00 f203 	lsl.w	r2, r0, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c9e:	e01b      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b41      	subs	r3, #65	@ 0x41
 8001cb2:	221f      	movs	r2, #31
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4019      	ands	r1, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b41      	subs	r3, #65	@ 0x41
 8001ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b09      	cmp	r3, #9
 8001cde:	d91c      	bls.n	8001d1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68d9      	ldr	r1, [r3, #12]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b1e      	subs	r3, #30
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4019      	ands	r1, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	6898      	ldr	r0, [r3, #8]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b1e      	subs	r3, #30
 8001d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	e019      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6919      	ldr	r1, [r3, #16]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4019      	ands	r1, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6898      	ldr	r0, [r3, #8]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	fa00 f203 	lsl.w	r2, r0, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d003      	beq.n	8001d5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d5a:	2b11      	cmp	r3, #17
 8001d5c:	d132      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d125      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d126      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d11a      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <HAL_ADC_ConfigChannel+0x1e8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a13      	ldr	r2, [pc, #76]	@ (8001de0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	0c9a      	lsrs	r2, r3, #18
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001da4:	e002      	b.n	8001dac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f9      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x1b2>
 8001db2:	e007      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	f043 0220 	orr.w	r2, r3, #32
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40012400 	.word	0x40012400
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	431bde83 	.word	0x431bde83

08001de4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d040      	beq.n	8001e84 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e12:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <ADC_Enable+0xac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <ADC_Enable+0xb0>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	0c9b      	lsrs	r3, r3, #18
 8001e1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e20:	e002      	b.n	8001e28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f9      	bne.n	8001e22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e2e:	f7ff fbef 	bl	8001610 <HAL_GetTick>
 8001e32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e34:	e01f      	b.n	8001e76 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e36:	f7ff fbeb 	bl	8001610 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d918      	bls.n	8001e76 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d011      	beq.n	8001e76 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e007      	b.n	8001e86 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d1d8      	bne.n	8001e36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000
 8001e94:	431bde83 	.word	0x431bde83

08001e98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d12e      	bne.n	8001f10 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ec2:	f7ff fba5 	bl	8001610 <HAL_GetTick>
 8001ec6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ec8:	e01b      	b.n	8001f02 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eca:	f7ff fba1 	bl	8001610 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d914      	bls.n	8001f02 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10d      	bne.n	8001f02 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eea:	f043 0210 	orr.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e007      	b.n	8001f12 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d0dc      	beq.n	8001eca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4906      	ldr	r1, [pc, #24]	@ (8001fb4 <__NVIC_EnableIRQ+0x34>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff90 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff2d 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff42 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff90 	bl	800200c <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5f 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff35 	bl	8001f80 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b08b      	sub	sp, #44	@ 0x2c
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	e169      	b.n	8002420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800214c:	2201      	movs	r2, #1
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8158 	bne.w	800241a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4a9a      	ldr	r2, [pc, #616]	@ (80023d8 <HAL_GPIO_Init+0x2a0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d05e      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002174:	4a98      	ldr	r2, [pc, #608]	@ (80023d8 <HAL_GPIO_Init+0x2a0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d875      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800217a:	4a98      	ldr	r2, [pc, #608]	@ (80023dc <HAL_GPIO_Init+0x2a4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d058      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002180:	4a96      	ldr	r2, [pc, #600]	@ (80023dc <HAL_GPIO_Init+0x2a4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d86f      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002186:	4a96      	ldr	r2, [pc, #600]	@ (80023e0 <HAL_GPIO_Init+0x2a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d052      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 800218c:	4a94      	ldr	r2, [pc, #592]	@ (80023e0 <HAL_GPIO_Init+0x2a8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d869      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002192:	4a94      	ldr	r2, [pc, #592]	@ (80023e4 <HAL_GPIO_Init+0x2ac>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04c      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002198:	4a92      	ldr	r2, [pc, #584]	@ (80023e4 <HAL_GPIO_Init+0x2ac>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d863      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800219e:	4a92      	ldr	r2, [pc, #584]	@ (80023e8 <HAL_GPIO_Init+0x2b0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d046      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 80021a4:	4a90      	ldr	r2, [pc, #576]	@ (80023e8 <HAL_GPIO_Init+0x2b0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d85d      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	d82a      	bhi.n	8002204 <HAL_GPIO_Init+0xcc>
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d859      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021b2:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <HAL_GPIO_Init+0x80>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	08002233 	.word	0x08002233
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	0800221f 	.word	0x0800221f
 80021c4:	08002261 	.word	0x08002261
 80021c8:	08002267 	.word	0x08002267
 80021cc:	08002267 	.word	0x08002267
 80021d0:	08002267 	.word	0x08002267
 80021d4:	08002267 	.word	0x08002267
 80021d8:	08002267 	.word	0x08002267
 80021dc:	08002267 	.word	0x08002267
 80021e0:	08002267 	.word	0x08002267
 80021e4:	08002267 	.word	0x08002267
 80021e8:	08002267 	.word	0x08002267
 80021ec:	08002267 	.word	0x08002267
 80021f0:	08002267 	.word	0x08002267
 80021f4:	08002267 	.word	0x08002267
 80021f8:	08002267 	.word	0x08002267
 80021fc:	08002215 	.word	0x08002215
 8002200:	08002229 	.word	0x08002229
 8002204:	4a79      	ldr	r2, [pc, #484]	@ (80023ec <HAL_GPIO_Init+0x2b4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800220a:	e02c      	b.n	8002266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	623b      	str	r3, [r7, #32]
          break;
 8002212:	e029      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	3304      	adds	r3, #4
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e024      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	3308      	adds	r3, #8
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e01f      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	330c      	adds	r3, #12
 800222e:	623b      	str	r3, [r7, #32]
          break;
 8002230:	e01a      	b.n	8002268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800223a:	2304      	movs	r3, #4
 800223c:	623b      	str	r3, [r7, #32]
          break;
 800223e:	e013      	b.n	8002268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	611a      	str	r2, [r3, #16]
          break;
 8002252:	e009      	b.n	8002268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002254:	2308      	movs	r3, #8
 8002256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	615a      	str	r2, [r3, #20]
          break;
 800225e:	e003      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x130>
          break;
 8002266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d801      	bhi.n	8002272 <HAL_GPIO_Init+0x13a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	e001      	b.n	8002276 <HAL_GPIO_Init+0x13e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	@ 0xff
 800227c:	d802      	bhi.n	8002284 <HAL_GPIO_Init+0x14c>
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	e002      	b.n	800228a <HAL_GPIO_Init+0x152>
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	3b08      	subs	r3, #8
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	210f      	movs	r1, #15
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	6a39      	ldr	r1, [r7, #32]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80b1 	beq.w	800241a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b8:	4b4d      	ldr	r3, [pc, #308]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b4a      	ldr	r3, [pc, #296]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d0:	4a48      	ldr	r2, [pc, #288]	@ (80023f4 <HAL_GPIO_Init+0x2bc>)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4013      	ands	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a40      	ldr	r2, [pc, #256]	@ (80023f8 <HAL_GPIO_Init+0x2c0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_GPIO_Init+0x1ec>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3f      	ldr	r2, [pc, #252]	@ (80023fc <HAL_GPIO_Init+0x2c4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00d      	beq.n	8002320 <HAL_GPIO_Init+0x1e8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3e      	ldr	r2, [pc, #248]	@ (8002400 <HAL_GPIO_Init+0x2c8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <HAL_GPIO_Init+0x1e4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3d      	ldr	r2, [pc, #244]	@ (8002404 <HAL_GPIO_Init+0x2cc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_GPIO_Init+0x1e0>
 8002314:	2303      	movs	r3, #3
 8002316:	e006      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002318:	2304      	movs	r3, #4
 800231a:	e004      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 800231c:	2302      	movs	r3, #2
 800231e:	e002      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002324:	2300      	movs	r3, #0
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	f002 0203 	and.w	r2, r2, #3
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	4093      	lsls	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002336:	492f      	ldr	r1, [pc, #188]	@ (80023f4 <HAL_GPIO_Init+0x2bc>)
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002350:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	492c      	ldr	r1, [pc, #176]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800235e:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	4928      	ldr	r1, [pc, #160]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002368:	4013      	ands	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4922      	ldr	r1, [pc, #136]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	43db      	mvns	r3, r3
 800238e:	491e      	ldr	r1, [pc, #120]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002390:	4013      	ands	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4918      	ldr	r1, [pc, #96]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4914      	ldr	r1, [pc, #80]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d021      	beq.n	800240c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	490e      	ldr	r1, [pc, #56]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e021      	b.n	800241a <HAL_GPIO_Init+0x2e2>
 80023d6:	bf00      	nop
 80023d8:	10320000 	.word	0x10320000
 80023dc:	10310000 	.word	0x10310000
 80023e0:	10220000 	.word	0x10220000
 80023e4:	10210000 	.word	0x10210000
 80023e8:	10120000 	.word	0x10120000
 80023ec:	10110000 	.word	0x10110000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40010800 	.word	0x40010800
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	40011000 	.word	0x40011000
 8002404:	40011400 	.word	0x40011400
 8002408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_GPIO_Init+0x304>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	43db      	mvns	r3, r3
 8002414:	4909      	ldr	r1, [pc, #36]	@ (800243c <HAL_GPIO_Init+0x304>)
 8002416:	4013      	ands	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	3301      	adds	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f ae8e 	bne.w	800214c <HAL_GPIO_Init+0x14>
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	372c      	adds	r7, #44	@ 0x2c
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e001      	b.n	8002462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
 800247a:	4613      	mov	r3, r2
 800247c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247e:	787b      	ldrb	r3, [r7, #1]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002484:	887a      	ldrh	r2, [r7, #2]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800248a:	e003      	b.n	8002494 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	611a      	str	r2, [r3, #16]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0e8      	b.n	8002682 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f006 fe1d 	bl	8009104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2203      	movs	r2, #3
 80024ce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 fd42 	bl	8004f66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ec:	f002 fd18 	bl	8004f20 <USB_CoreInit>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0bf      	b.n	8002682 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f002 fd46 	bl	8004f9a <USB_SetCurrentMode>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b0      	b.n	8002682 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e03e      	b.n	80025a4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3311      	adds	r3, #17
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	3310      	adds	r3, #16
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	3313      	adds	r3, #19
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	3320      	adds	r3, #32
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	3324      	adds	r3, #36	@ 0x24
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	791b      	ldrb	r3, [r3, #4]
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3bb      	bcc.n	8002526 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e044      	b.n	800263e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	791b      	ldrb	r3, [r3, #4]
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3b5      	bcc.n	80025b4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002652:	f002 fcae 	bl	8004fb2 <USB_DevInit>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e00c      	b.n	8002682 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f004 ff2d 	bl	80074da <USB_DevDisconnect>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_PCD_Start+0x16>
 800269c:	2302      	movs	r3, #2
 800269e:	e016      	b.n	80026ce <HAL_PCD_Start+0x44>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 fc44 	bl	8004f3a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80026b2:	2101      	movs	r1, #1
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f006 ff98 	bl	80095ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 ff01 	bl	80074c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b088      	sub	sp, #32
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 ff03 	bl	80074ee <USB_ReadInterrupts>
 80026e8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fb1a 	bl	8002d2e <PCD_EP_ISR_Handler>

    return;
 80026fa:	e119      	b.n	8002930 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d013      	beq.n	800272e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002718:	b292      	uxth	r2, r2
 800271a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f006 fd6b 	bl	80091fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002724:	2100      	movs	r1, #0
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f905 	bl	8002936 <HAL_PCD_SetAddress>

    return;
 800272c:	e100      	b.n	8002930 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00c      	beq.n	8002752 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800274a:	b292      	uxth	r2, r2
 800274c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002750:	e0ee      	b.n	8002930 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00c      	beq.n	8002776 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800276e:	b292      	uxth	r2, r2
 8002770:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002774:	e0dc      	b.n	8002930 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d027      	beq.n	80027d0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0204 	bic.w	r2, r2, #4
 8002792:	b292      	uxth	r2, r2
 8002794:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0208 	bic.w	r2, r2, #8
 80027aa:	b292      	uxth	r2, r2
 80027ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f006 fd5b 	bl	800926c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027be:	b29a      	uxth	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027c8:	b292      	uxth	r2, r2
 80027ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027ce:	e0af      	b.n	8002930 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8083 	beq.w	80028e2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
 80027e0:	e010      	b.n	8002804 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	7ffb      	ldrb	r3, [r7, #31]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	441a      	add	r2, r3
 80027ee:	7ffb      	ldrb	r3, [r7, #31]
 80027f0:	8812      	ldrh	r2, [r2, #0]
 80027f2:	b292      	uxth	r2, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	3320      	adds	r3, #32
 80027f8:	443b      	add	r3, r7
 80027fa:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80027fe:	7ffb      	ldrb	r3, [r7, #31]
 8002800:	3301      	adds	r3, #1
 8002802:	77fb      	strb	r3, [r7, #31]
 8002804:	7ffb      	ldrb	r3, [r7, #31]
 8002806:	2b07      	cmp	r3, #7
 8002808:	d9eb      	bls.n	80027e2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	b292      	uxth	r2, r2
 800281e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	b292      	uxth	r2, r2
 8002836:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800283a:	bf00      	nop
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002844:	b29b      	uxth	r3, r3
 8002846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f6      	beq.n	800283c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002860:	b292      	uxth	r2, r2
 8002862:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002866:	2300      	movs	r3, #0
 8002868:	77fb      	strb	r3, [r7, #31]
 800286a:	e00f      	b.n	800288c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800286c:	7ffb      	ldrb	r3, [r7, #31]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4611      	mov	r1, r2
 8002874:	7ffa      	ldrb	r2, [r7, #31]
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	440a      	add	r2, r1
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	3320      	adds	r3, #32
 800287e:	443b      	add	r3, r7
 8002880:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002884:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002886:	7ffb      	ldrb	r3, [r7, #31]
 8002888:	3301      	adds	r3, #1
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	7ffb      	ldrb	r3, [r7, #31]
 800288e:	2b07      	cmp	r3, #7
 8002890:	d9ec      	bls.n	800286c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0208 	orr.w	r2, r2, #8
 80028a4:	b292      	uxth	r2, r2
 80028a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028bc:	b292      	uxth	r2, r2
 80028be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0204 	orr.w	r2, r2, #4
 80028d4:	b292      	uxth	r2, r2
 80028d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f006 fcac 	bl	8009238 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028e0:	e026      	b.n	8002930 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00f      	beq.n	800290c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028fe:	b292      	uxth	r2, r2
 8002900:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f006 fc6a 	bl	80091de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800290a:	e011      	b.n	8002930 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002928:	b292      	uxth	r2, r2
 800292a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800292e:	bf00      	nop
  }
}
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_PCD_SetAddress+0x1a>
 800294c:	2302      	movs	r3, #2
 800294e:	e012      	b.n	8002976 <HAL_PCD_SetAddress+0x40>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f004 fd9a 	bl	80074a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	4608      	mov	r0, r1
 8002988:	4611      	mov	r1, r2
 800298a:	461a      	mov	r2, r3
 800298c:	4603      	mov	r3, r0
 800298e:	70fb      	strb	r3, [r7, #3]
 8002990:	460b      	mov	r3, r1
 8002992:	803b      	strh	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800299c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da0e      	bge.n	80029c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	f003 0207 	and.w	r2, r3, #7
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	3310      	adds	r3, #16
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	705a      	strb	r2, [r3, #1]
 80029c0:	e00e      	b.n	80029e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 0207 	and.w	r2, r3, #7
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029ec:	883a      	ldrh	r2, [r7, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	78ba      	ldrb	r2, [r7, #2]
 80029f6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029f8:	78bb      	ldrb	r3, [r7, #2]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d102      	bne.n	8002a04 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_PCD_EP_Open+0x94>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e00e      	b.n	8002a30 <HAL_PCD_EP_Open+0xb2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fae3 	bl	8004fec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da0e      	bge.n	8002a6a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 0207 	and.w	r2, r3, #7
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	3310      	adds	r3, #16
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	705a      	strb	r2, [r3, #1]
 8002a68:	e00e      	b.n	8002a88 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 0207 	and.w	r2, r3, #7
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_PCD_EP_Close+0x6a>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e00e      	b.n	8002ac0 <HAL_PCD_EP_Close+0x88>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68f9      	ldr	r1, [r7, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 fe5b 	bl	800576c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	f003 0207 	and.w	r2, r3, #7
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2200      	movs	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2200      	movs	r2, #0
 8002b06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 f812 	bl	8005b44 <USB_EPStartXfer>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 0207 	and.w	r2, r3, #7
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002b4c:	681b      	ldr	r3, [r3, #0]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	460b      	mov	r3, r1
 8002b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b68:	7afb      	ldrb	r3, [r7, #11]
 8002b6a:	f003 0207 	and.w	r2, r3, #7
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	3310      	adds	r3, #16
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6979      	ldr	r1, [r7, #20]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 ffc4 	bl	8005b44 <USB_EPStartXfer>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	7912      	ldrb	r2, [r2, #4]
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e04c      	b.n	8002c7e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da0e      	bge.n	8002c0a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 0207 	and.w	r2, r3, #7
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	3310      	adds	r3, #16
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	705a      	strb	r2, [r3, #1]
 8002c08:	e00c      	b.n	8002c24 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_PCD_EP_SetStall+0x7e>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e01c      	b.n	8002c7e <HAL_PCD_EP_SetStall+0xb8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68f9      	ldr	r1, [r7, #12]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 fb27 	bl	80072a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d108      	bne.n	8002c74 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f004 fc4c 	bl	800750c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	7912      	ldrb	r2, [r2, #4]
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e040      	b.n	8002d26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	da0e      	bge.n	8002cca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	f003 0207 	and.w	r2, r3, #7
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	3310      	adds	r3, #16
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	705a      	strb	r2, [r3, #1]
 8002cc8:	e00e      	b.n	8002ce8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 0207 	and.w	r2, r3, #7
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_PCD_EP_ClrStall+0x82>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e00e      	b.n	8002d26 <HAL_PCD_EP_ClrStall+0xa0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 fb15 	bl	8007346 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b096      	sub	sp, #88	@ 0x58
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d36:	e3bb      	b.n	80034b0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002d52:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 8175 	bne.w	8003046 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d14e      	bne.n	8002e06 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d78:	81fb      	strh	r3, [r7, #14]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3310      	adds	r3, #16
 8002d90:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	3302      	adds	r3, #2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dcc:	2100      	movs	r1, #0
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f006 f9eb 	bl	80091aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7b5b      	ldrb	r3, [r3, #13]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8368 	beq.w	80034b0 <PCD_EP_ISR_Handler+0x782>
 8002de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 8363 	bne.w	80034b0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7b5b      	ldrb	r3, [r3, #13]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	735a      	strb	r2, [r3, #13]
 8002e04:	e354      	b.n	80034b0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e0c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d034      	beq.n	8002e8e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	3306      	adds	r3, #6
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e60:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f004 fba2 	bl	80075ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e74:	4013      	ands	r3, r2
 8002e76:	823b      	strh	r3, [r7, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	8a3a      	ldrh	r2, [r7, #16]
 8002e7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e82:	b292      	uxth	r2, r2
 8002e84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f006 f962 	bl	8009150 <HAL_PCD_SetupStageCallback>
 8002e8c:	e310      	b.n	80034b0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e8e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f280 830c 	bge.w	80034b0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	83fb      	strh	r3, [r7, #30]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	8bfa      	ldrh	r2, [r7, #30]
 8002eae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3306      	adds	r3, #6
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d019      	beq.n	8002f1e <PCD_EP_ISR_Handler+0x1f0>
 8002eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef8:	6959      	ldr	r1, [r3, #20]
 8002efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f00:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f004 fb52 	bl	80075ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	441a      	add	r2, r3
 8002f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f14:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f16:	2100      	movs	r1, #0
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f006 f92b 	bl	8009174 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002f28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 82bd 	bne.w	80034b0 <PCD_EP_ISR_Handler+0x782>
 8002f36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f3a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002f3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f42:	f000 82b5 	beq.w	80034b0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f7c:	d91d      	bls.n	8002fba <PCD_EP_ISR_Handler+0x28c>
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <PCD_EP_ISR_Handler+0x26a>
 8002f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f94:	3b01      	subs	r3, #1
 8002f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	029b      	lsls	r3, r3, #10
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	e026      	b.n	8003008 <PCD_EP_ISR_Handler+0x2da>
 8002fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <PCD_EP_ISR_Handler+0x2aa>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	801a      	strh	r2, [r3, #0]
 8002fd6:	e017      	b.n	8003008 <PCD_EP_ISR_Handler+0x2da>
 8002fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <PCD_EP_ISR_Handler+0x2c4>
 8002fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fee:	3301      	adds	r3, #1
 8002ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4313      	orrs	r3, r2
 8003002:	b29a      	uxth	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003018:	827b      	strh	r3, [r7, #18]
 800301a:	8a7b      	ldrh	r3, [r7, #18]
 800301c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003020:	827b      	strh	r3, [r7, #18]
 8003022:	8a7b      	ldrh	r3, [r7, #18]
 8003024:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003028:	827b      	strh	r3, [r7, #18]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	8a7b      	ldrh	r3, [r7, #18]
 8003030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800303c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003040:	b29b      	uxth	r3, r3
 8003042:	8013      	strh	r3, [r2, #0]
 8003044:	e234      	b.n	80034b0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800305a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800305e:	2b00      	cmp	r3, #0
 8003060:	f280 80fc 	bge.w	800325c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29a      	uxth	r2, r3
 8003076:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800307a:	4013      	ands	r3, r2
 800307c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003092:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003096:	b292      	uxth	r2, r2
 8003098:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800309a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d125      	bne.n	8003104 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	3306      	adds	r3, #6
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80030e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8092 	beq.w	8003212 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f4:	6959      	ldr	r1, [r3, #20]
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	88da      	ldrh	r2, [r3, #6]
 80030fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030fe:	f004 fa55 	bl	80075ac <USB_ReadPMA>
 8003102:	e086      	b.n	8003212 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d10a      	bne.n	8003122 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800310c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003110:	461a      	mov	r2, r3
 8003112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f9d9 	bl	80034cc <HAL_PCD_EP_DB_Receive>
 800311a:	4603      	mov	r3, r0
 800311c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003120:	e077      	b.n	8003212 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800315a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800315e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d024      	beq.n	80031ca <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003188:	b29b      	uxth	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	3302      	adds	r3, #2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80031ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d02e      	beq.n	8003212 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ba:	6959      	ldr	r1, [r3, #20]
 80031bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031be:	891a      	ldrh	r2, [r3, #8]
 80031c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031c4:	f004 f9f2 	bl	80075ac <USB_ReadPMA>
 80031c8:	e023      	b.n	8003212 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	3306      	adds	r3, #6
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80031f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003204:	6959      	ldr	r1, [r3, #20]
 8003206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003208:	895a      	ldrh	r2, [r3, #10]
 800320a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800320e:	f004 f9cd 	bl	80075ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800321a:	441a      	add	r2, r3
 800321c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003228:	441a      	add	r2, r3
 800322a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800322e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <PCD_EP_ISR_Handler+0x514>
 8003236:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800323a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	429a      	cmp	r2, r3
 8003240:	d206      	bcs.n	8003250 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f005 ff93 	bl	8009174 <HAL_PCD_DataOutStageCallback>
 800324e:	e005      	b.n	800325c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003256:	4618      	mov	r0, r3
 8003258:	f002 fc74 	bl	8005b44 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800325c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8123 	beq.w	80034b0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800326a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	3310      	adds	r3, #16
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003298:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80032ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80032ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032bc:	78db      	ldrb	r3, [r3, #3]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	f040 80a2 	bne.w	8003408 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80032c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80032ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032cc:	7b1b      	ldrb	r3, [r3, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8093 	beq.w	80033fa <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d046      	beq.n	800336e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d126      	bne.n	8003336 <PCD_EP_ISR_Handler+0x608>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	4413      	add	r3, r2
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	011a      	lsls	r2, r3, #4
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	4413      	add	r3, r2
 800330a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331a:	b29a      	uxth	r2, r3
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	801a      	strh	r2, [r3, #0]
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800332a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800332e:	b29a      	uxth	r2, r3
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	e061      	b.n	80033fa <PCD_EP_ISR_Handler+0x6cc>
 8003336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d15d      	bne.n	80033fa <PCD_EP_ISR_Handler+0x6cc>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800334c:	b29b      	uxth	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003352:	4413      	add	r3, r2
 8003354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	011a      	lsls	r2, r3, #4
 800335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335e:	4413      	add	r3, r2
 8003360:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003368:	2200      	movs	r2, #0
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	e045      	b.n	80033fa <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003376:	785b      	ldrb	r3, [r3, #1]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d126      	bne.n	80033ca <PCD_EP_ISR_Handler+0x69c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	637b      	str	r3, [r7, #52]	@ 0x34
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800338a:	b29b      	uxth	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	4413      	add	r3, r2
 8003392:	637b      	str	r3, [r7, #52]	@ 0x34
 8003394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	011a      	lsls	r2, r3, #4
 800339a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339c:	4413      	add	r3, r2
 800339e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80033a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	801a      	strh	r2, [r3, #0]
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	e017      	b.n	80033fa <PCD_EP_ISR_Handler+0x6cc>
 80033ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033cc:	785b      	ldrb	r3, [r3, #1]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d113      	bne.n	80033fa <PCD_EP_ISR_Handler+0x6cc>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e0:	4413      	add	r3, r2
 80033e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	011a      	lsls	r2, r3, #4
 80033ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ec:	4413      	add	r3, r2
 80033ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f6:	2200      	movs	r2, #0
 80033f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f005 fed2 	bl	80091aa <HAL_PCD_DataInStageCallback>
 8003406:	e053      	b.n	80034b0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003408:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d146      	bne.n	80034a2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800341c:	b29b      	uxth	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	3302      	adds	r3, #2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003448:	429a      	cmp	r2, r3
 800344a:	d907      	bls.n	800345c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800344c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344e:	699a      	ldr	r2, [r3, #24]
 8003450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003454:	1ad2      	subs	r2, r2, r3
 8003456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003458:	619a      	str	r2, [r3, #24]
 800345a:	e002      	b.n	8003462 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800345c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f005 fe9a 	bl	80091aa <HAL_PCD_DataInStageCallback>
 8003476:	e01b      	b.n	80034b0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003480:	441a      	add	r2, r3
 8003482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003484:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800348e:	441a      	add	r2, r3
 8003490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003492:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800349a:	4618      	mov	r0, r3
 800349c:	f002 fb52 	bl	8005b44 <USB_EPStartXfer>
 80034a0:	e006      	b.n	80034b0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80034a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034a6:	461a      	mov	r2, r3
 80034a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f91b 	bl	80036e6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f6ff ac3b 	blt.w	8002d38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3758      	adds	r7, #88	@ 0x58
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d07e      	beq.n	80035e2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	3302      	adds	r3, #2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	8b7b      	ldrh	r3, [r7, #26]
 8003514:	429a      	cmp	r2, r3
 8003516:	d306      	bcc.n	8003526 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	8b7b      	ldrh	r3, [r7, #26]
 800351e:	1ad2      	subs	r2, r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	619a      	str	r2, [r3, #24]
 8003524:	e002      	b.n	800352c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d123      	bne.n	800357c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800354a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354e:	833b      	strh	r3, [r7, #24]
 8003550:	8b3b      	ldrh	r3, [r7, #24]
 8003552:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003556:	833b      	strh	r3, [r7, #24]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	441a      	add	r2, r3
 8003566:	8b3b      	ldrh	r3, [r7, #24]
 8003568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800356c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003578:	b29b      	uxth	r3, r3
 800357a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01f      	beq.n	80035c6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800359c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a0:	82fb      	strh	r3, [r7, #22]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	441a      	add	r2, r3
 80035b0:	8afb      	ldrh	r3, [r7, #22]
 80035b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035c6:	8b7b      	ldrh	r3, [r7, #26]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8087 	beq.w	80036dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6959      	ldr	r1, [r3, #20]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	891a      	ldrh	r2, [r3, #8]
 80035da:	8b7b      	ldrh	r3, [r7, #26]
 80035dc:	f003 ffe6 	bl	80075ac <USB_ReadPMA>
 80035e0:	e07c      	b.n	80036dc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	3306      	adds	r3, #6
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800360a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	699a      	ldr	r2, [r3, #24]
 8003610:	8b7b      	ldrh	r3, [r7, #26]
 8003612:	429a      	cmp	r2, r3
 8003614:	d306      	bcc.n	8003624 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	8b7b      	ldrh	r3, [r7, #26]
 800361c:	1ad2      	subs	r2, r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	619a      	str	r2, [r3, #24]
 8003622:	e002      	b.n	800362a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d123      	bne.n	800367a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364c:	83fb      	strh	r3, [r7, #30]
 800364e:	8bfb      	ldrh	r3, [r7, #30]
 8003650:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003654:	83fb      	strh	r3, [r7, #30]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	441a      	add	r2, r3
 8003664:	8bfb      	ldrh	r3, [r7, #30]
 8003666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800366a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800366e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003676:	b29b      	uxth	r3, r3
 8003678:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11f      	bne.n	80036c4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800369a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369e:	83bb      	strh	r3, [r7, #28]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	8bbb      	ldrh	r3, [r7, #28]
 80036b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036c4:	8b7b      	ldrh	r3, [r7, #26]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6959      	ldr	r1, [r3, #20]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	895a      	ldrh	r2, [r3, #10]
 80036d6:	8b7b      	ldrh	r3, [r7, #26]
 80036d8:	f003 ff68 	bl	80075ac <USB_ReadPMA>
    }
  }

  return count;
 80036dc:	8b7b      	ldrh	r3, [r7, #26]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b0a4      	sub	sp, #144	@ 0x90
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	4613      	mov	r3, r2
 80036f2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 81dd 	beq.w	8003aba <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	3302      	adds	r3, #2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003728:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003734:	429a      	cmp	r2, r3
 8003736:	d907      	bls.n	8003748 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003740:	1ad2      	subs	r2, r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	619a      	str	r2, [r3, #24]
 8003746:	e002      	b.n	800374e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2200      	movs	r2, #0
 800374c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 80b9 	bne.w	80038ca <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d126      	bne.n	80037ae <HAL_PCD_EP_DB_Transmit+0xc8>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800376e:	b29b      	uxth	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003774:	4413      	add	r3, r2
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	011a      	lsls	r2, r3, #4
 800377e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003780:	4413      	add	r3, r2
 8003782:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003792:	b29a      	uxth	r2, r3
 8003794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003796:	801a      	strh	r2, [r3, #0]
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29b      	uxth	r3, r3
 800379e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	e01a      	b.n	80037e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d116      	bne.n	80037e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ca:	4413      	add	r3, r2
 80037cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	011a      	lsls	r2, r3, #4
 80037d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d6:	4413      	add	r3, r2
 80037d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	2200      	movs	r2, #0
 80037e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d126      	bne.n	8003840 <HAL_PCD_EP_DB_Transmit+0x15a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	011a      	lsls	r2, r3, #4
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	b29b      	uxth	r3, r3
 8003820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003824:	b29a      	uxth	r2, r3
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003838:	b29a      	uxth	r2, r3
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	e017      	b.n	8003870 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	785b      	ldrb	r3, [r3, #1]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d113      	bne.n	8003870 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003850:	b29b      	uxth	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	4413      	add	r3, r2
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	011a      	lsls	r2, r3, #4
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	4413      	add	r3, r2
 8003864:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003868:	623b      	str	r3, [r7, #32]
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	2200      	movs	r2, #0
 800386e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	4619      	mov	r1, r3
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f005 fc97 	bl	80091aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 82fc 	beq.w	8003e80 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a2:	82fb      	strh	r3, [r7, #22]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	8afb      	ldrh	r3, [r7, #22]
 80038b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	8013      	strh	r3, [r2, #0]
 80038c8:	e2da      	b.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d021      	beq.n	8003918 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	441a      	add	r2, r3
 8003900:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800390c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003914:	b29b      	uxth	r3, r3
 8003916:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800391e:	2b01      	cmp	r3, #1
 8003920:	f040 82ae 	bne.w	8003e80 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800392c:	441a      	add	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800393a:	441a      	add	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	429a      	cmp	r2, r3
 800394a:	d30b      	bcc.n	8003964 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800395c:	1ad2      	subs	r2, r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	621a      	str	r2, [r3, #32]
 8003962:	e017      	b.n	8003994 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800396c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800397c:	e00a      	b.n	8003994 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d165      	bne.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x382>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b0:	4413      	add	r3, r2
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	011a      	lsls	r2, r3, #4
 80039ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039bc:	4413      	add	r3, r2
 80039be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80039da:	d91d      	bls.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x332>
 80039dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <HAL_PCD_EP_DB_Transmit+0x310>
 80039f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039f2:	3b01      	subs	r3, #1
 80039f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	029b      	lsls	r3, r3, #10
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a14:	801a      	strh	r2, [r3, #0]
 8003a16:	e044      	b.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <HAL_PCD_EP_DB_Transmit+0x350>
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	e035      	b.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	029b      	lsls	r3, r3, #10
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	e01c      	b.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d118      	bne.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a84:	4413      	add	r3, r2
 8003a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	011a      	lsls	r2, r3, #4
 8003a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a90:	4413      	add	r3, r2
 8003a92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a96:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	6959      	ldr	r1, [r3, #20]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	891a      	ldrh	r2, [r3, #8]
 8003aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 fd35 	bl	8007522 <USB_WritePMA>
 8003ab8:	e1e2      	b.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	3306      	adds	r3, #6
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d307      	bcc.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	619a      	str	r2, [r3, #24]
 8003b00:	e002      	b.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 80c0 	bne.w	8003c92 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d126      	bne.n	8003b68 <HAL_PCD_EP_DB_Transmit+0x482>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b2e:	4413      	add	r3, r2
 8003b30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	011a      	lsls	r2, r3, #4
 8003b38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e01a      	b.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d116      	bne.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b84:	4413      	add	r3, r2
 8003b86:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d12b      	bne.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc0:	4413      	add	r3, r2
 8003bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	011a      	lsls	r2, r3, #4
 8003bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bcc:	4413      	add	r3, r2
 8003bce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	e017      	b.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	785b      	ldrb	r3, [r3, #1]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d113      	bne.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c1a:	4413      	add	r3, r2
 8003c1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	011a      	lsls	r2, r3, #4
 8003c24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c26:	4413      	add	r3, r2
 8003c28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c30:	2200      	movs	r2, #0
 8003c32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f005 fab5 	bl	80091aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 811a 	bne.w	8003e80 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c66:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	441a      	add	r2, r3
 8003c78:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	8013      	strh	r3, [r2, #0]
 8003c90:	e0f6      	b.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d121      	bne.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	441a      	add	r2, r3
 8003cc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	f040 80ca 	bne.w	8003e80 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cf4:	441a      	add	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d02:	441a      	add	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d30b      	bcc.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6a1a      	ldr	r2, [r3, #32]
 8003d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d24:	1ad2      	subs	r2, r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	621a      	str	r2, [r3, #32]
 8003d2a:	e017      	b.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d108      	bne.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003d34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d44:	e00a      	b.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d165      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x750>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d7e:	4413      	add	r3, r2
 8003d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	011a      	lsls	r2, r3, #4
 8003d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003da6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003da8:	d91d      	bls.n	8003de6 <HAL_PCD_EP_DB_Transmit+0x700>
 8003daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003de2:	801a      	strh	r2, [r3, #0]
 8003de4:	e041      	b.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x784>
 8003de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e032      	b.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x784>
 8003e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_PCD_EP_DB_Transmit+0x738>
 8003e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e019      	b.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x784>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d115      	bne.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x784>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4c:	4413      	add	r3, r2
 8003e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	011a      	lsls	r2, r3, #4
 8003e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e58:	4413      	add	r3, r2
 8003e5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e68:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6959      	ldr	r1, [r3, #20]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	895a      	ldrh	r2, [r3, #10]
 8003e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f003 fb51 	bl	8007522 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e9a:	82bb      	strh	r3, [r7, #20]
 8003e9c:	8abb      	ldrh	r3, [r7, #20]
 8003e9e:	f083 0310 	eor.w	r3, r3, #16
 8003ea2:	82bb      	strh	r3, [r7, #20]
 8003ea4:	8abb      	ldrh	r3, [r7, #20]
 8003ea6:	f083 0320 	eor.w	r3, r3, #32
 8003eaa:	82bb      	strh	r3, [r7, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	8abb      	ldrh	r3, [r7, #20]
 8003ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3790      	adds	r7, #144	@ 0x90
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b087      	sub	sp, #28
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	817b      	strh	r3, [r7, #10]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003eec:	897b      	ldrh	r3, [r7, #10]
 8003eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	f003 0207 	and.w	r2, r3, #7
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	3310      	adds	r3, #16
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	e009      	b.n	8003f24 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f10:	897a      	ldrh	r2, [r7, #10]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f24:	893b      	ldrh	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d107      	bne.n	8003f3a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	80da      	strh	r2, [r3, #6]
 8003f38:	e00b      	b.n	8003f52 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	0c1b      	lsrs	r3, r3, #16
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
	...

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e272      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8087 	beq.w	800408e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f80:	4b92      	ldr	r3, [pc, #584]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d00c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d112      	bne.n	8003fbe <HAL_RCC_OscConfig+0x5e>
 8003f98:	4b8c      	ldr	r3, [pc, #560]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa4:	d10b      	bne.n	8003fbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa6:	4b89      	ldr	r3, [pc, #548]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d06c      	beq.n	800408c <HAL_RCC_OscConfig+0x12c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d168      	bne.n	800408c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e24c      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x76>
 8003fc8:	4b80      	ldr	r3, [pc, #512]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7f      	ldr	r2, [pc, #508]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e02e      	b.n	8004034 <HAL_RCC_OscConfig+0xd4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x98>
 8003fde:	4b7b      	ldr	r3, [pc, #492]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7a      	ldr	r2, [pc, #488]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b78      	ldr	r3, [pc, #480]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a77      	ldr	r2, [pc, #476]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e01d      	b.n	8004034 <HAL_RCC_OscConfig+0xd4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0xbc>
 8004002:	4b72      	ldr	r3, [pc, #456]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a71      	ldr	r2, [pc, #452]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6e      	ldr	r2, [pc, #440]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0xd4>
 800401c:	4b6b      	ldr	r3, [pc, #428]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a6a      	ldr	r2, [pc, #424]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b68      	ldr	r3, [pc, #416]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a67      	ldr	r2, [pc, #412]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004032:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fd fae8 	bl	8001610 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fd fae4 	bl	8001610 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e200      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b5d      	ldr	r3, [pc, #372]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0xe4>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fd fad4 	bl	8001610 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fd fad0 	bl	8001610 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	@ 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e1ec      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407e:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x10c>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d063      	beq.n	8004162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800409a:	4b4c      	ldr	r3, [pc, #304]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040a6:	4b49      	ldr	r3, [pc, #292]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d11c      	bne.n	80040ec <HAL_RCC_OscConfig+0x18c>
 80040b2:	4b46      	ldr	r3, [pc, #280]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b43      	ldr	r3, [pc, #268]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x176>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e1c0      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b3d      	ldr	r3, [pc, #244]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4939      	ldr	r1, [pc, #228]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b36      	ldr	r3, [pc, #216]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fd fa89 	bl	8001610 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004102:	f7fd fa85 	bl	8001610 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e1a1      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	4b2d      	ldr	r3, [pc, #180]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004120:	4b2a      	ldr	r3, [pc, #168]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4927      	ldr	r1, [pc, #156]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
 8004134:	e015      	b.n	8004162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b26      	ldr	r3, [pc, #152]	@ (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fd fa68 	bl	8001610 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004144:	f7fd fa64 	bl	8001610 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e180      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	4b1d      	ldr	r3, [pc, #116]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d03a      	beq.n	80041e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d019      	beq.n	80041aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b17      	ldr	r3, [pc, #92]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417c:	f7fd fa48 	bl	8001610 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd fa44 	bl	8001610 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e160      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041a2:	2001      	movs	r0, #1
 80041a4:	f000 faba 	bl	800471c <RCC_Delay>
 80041a8:	e01c      	b.n	80041e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041aa:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b0:	f7fd fa2e 	bl	8001610 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b6:	e00f      	b.n	80041d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b8:	f7fd fa2a 	bl	8001610 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d908      	bls.n	80041d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e146      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	42420000 	.word	0x42420000
 80041d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	4b92      	ldr	r3, [pc, #584]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e9      	bne.n	80041b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a6 	beq.w	800433e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	4b88      	ldr	r3, [pc, #544]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4a87      	ldr	r2, [pc, #540]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420c:	61d3      	str	r3, [r2, #28]
 800420e:	4b85      	ldr	r3, [pc, #532]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	4b82      	ldr	r3, [pc, #520]	@ (8004428 <HAL_RCC_OscConfig+0x4c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d118      	bne.n	800425c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422a:	4b7f      	ldr	r3, [pc, #508]	@ (8004428 <HAL_RCC_OscConfig+0x4c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7e      	ldr	r2, [pc, #504]	@ (8004428 <HAL_RCC_OscConfig+0x4c8>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004236:	f7fd f9eb 	bl	8001610 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fd f9e7 	bl	8001610 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	@ 0x64
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e103      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004250:	4b75      	ldr	r3, [pc, #468]	@ (8004428 <HAL_RCC_OscConfig+0x4c8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x312>
 8004264:	4b6f      	ldr	r3, [pc, #444]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4a6e      	ldr	r2, [pc, #440]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6213      	str	r3, [r2, #32]
 8004270:	e02d      	b.n	80042ce <HAL_RCC_OscConfig+0x36e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x334>
 800427a:	4b6a      	ldr	r3, [pc, #424]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4a69      	ldr	r2, [pc, #420]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6213      	str	r3, [r2, #32]
 8004286:	4b67      	ldr	r3, [pc, #412]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4a66      	ldr	r2, [pc, #408]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6213      	str	r3, [r2, #32]
 8004292:	e01c      	b.n	80042ce <HAL_RCC_OscConfig+0x36e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	2b05      	cmp	r3, #5
 800429a:	d10c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x356>
 800429c:	4b61      	ldr	r3, [pc, #388]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4a60      	ldr	r2, [pc, #384]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	6213      	str	r3, [r2, #32]
 80042a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6213      	str	r3, [r2, #32]
 80042b4:	e00b      	b.n	80042ce <HAL_RCC_OscConfig+0x36e>
 80042b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6213      	str	r3, [r2, #32]
 80042c2:	4b58      	ldr	r3, [pc, #352]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4a57      	ldr	r2, [pc, #348]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d015      	beq.n	8004302 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d6:	f7fd f99b 	bl	8001610 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fd f997 	bl	8001610 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0b1      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ee      	beq.n	80042de <HAL_RCC_OscConfig+0x37e>
 8004300:	e014      	b.n	800432c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fd f985 	bl	8001610 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd f981 	bl	8001610 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e09b      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004320:	4b40      	ldr	r3, [pc, #256]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4b3c      	ldr	r3, [pc, #240]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	4a3b      	ldr	r2, [pc, #236]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8087 	beq.w	8004456 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004348:	4b36      	ldr	r3, [pc, #216]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d061      	beq.n	8004418 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d146      	bne.n	80043ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b33      	ldr	r3, [pc, #204]	@ (800442c <HAL_RCC_OscConfig+0x4cc>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fd f955 	bl	8001610 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436a:	f7fd f951 	bl	8001610 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e06d      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437c:	4b29      	ldr	r3, [pc, #164]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004390:	d108      	bne.n	80043a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004392:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	4921      	ldr	r1, [pc, #132]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a19      	ldr	r1, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	430b      	orrs	r3, r1
 80043b6:	491b      	ldr	r1, [pc, #108]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043bc:	4b1b      	ldr	r3, [pc, #108]	@ (800442c <HAL_RCC_OscConfig+0x4cc>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fd f925 	bl	8001610 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fd f921 	bl	8001610 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e03d      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043dc:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x46a>
 80043e8:	e035      	b.n	8004456 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <HAL_RCC_OscConfig+0x4cc>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fd f90e 	bl	8001610 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fd f90a 	bl	8001610 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e026      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800440a:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_RCC_OscConfig+0x4c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x498>
 8004416:	e01e      	b.n	8004456 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d107      	bne.n	8004430 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e019      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
 8004424:	40021000 	.word	0x40021000
 8004428:	40007000 	.word	0x40007000
 800442c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004430:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <HAL_RCC_OscConfig+0x500>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	429a      	cmp	r2, r3
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000

08004464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0d0      	b.n	800461a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004478:	4b6a      	ldr	r3, [pc, #424]	@ (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d910      	bls.n	80044a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b67      	ldr	r3, [pc, #412]	@ (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 0207 	bic.w	r2, r3, #7
 800448e:	4965      	ldr	r1, [pc, #404]	@ (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b63      	ldr	r3, [pc, #396]	@ (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0b8      	b.n	800461a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c0:	4b59      	ldr	r3, [pc, #356]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	4a58      	ldr	r2, [pc, #352]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d8:	4b53      	ldr	r3, [pc, #332]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a52      	ldr	r2, [pc, #328]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80044de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80044e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e4:	4b50      	ldr	r3, [pc, #320]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	494d      	ldr	r1, [pc, #308]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d040      	beq.n	8004584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d107      	bne.n	800451a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d115      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e07f      	b.n	800461a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004522:	4b41      	ldr	r3, [pc, #260]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e073      	b.n	800461a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004532:	4b3d      	ldr	r3, [pc, #244]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e06b      	b.n	800461a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004542:	4b39      	ldr	r3, [pc, #228]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f023 0203 	bic.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4936      	ldr	r1, [pc, #216]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004554:	f7fd f85c 	bl	8001610 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	e00a      	b.n	8004572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455c:	f7fd f858 	bl	8001610 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e053      	b.n	800461a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004572:	4b2d      	ldr	r3, [pc, #180]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 020c 	and.w	r2, r3, #12
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	429a      	cmp	r2, r3
 8004582:	d1eb      	bne.n	800455c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004584:	4b27      	ldr	r3, [pc, #156]	@ (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d210      	bcs.n	80045b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 0207 	bic.w	r2, r3, #7
 800459a:	4922      	ldr	r1, [pc, #136]	@ (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a2:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e032      	b.n	800461a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c0:	4b19      	ldr	r3, [pc, #100]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4916      	ldr	r1, [pc, #88]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045de:	4b12      	ldr	r3, [pc, #72]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	490e      	ldr	r1, [pc, #56]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045f2:	f000 f821 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80045f6:	4602      	mov	r2, r0
 80045f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	490a      	ldr	r1, [pc, #40]	@ (800462c <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	5ccb      	ldrb	r3, [r1, r3]
 8004606:	fa22 f303 	lsr.w	r3, r2, r3
 800460a:	4a09      	ldr	r2, [pc, #36]	@ (8004630 <HAL_RCC_ClockConfig+0x1cc>)
 800460c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800460e:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <HAL_RCC_ClockConfig+0x1d0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc ffba 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40022000 	.word	0x40022000
 8004628:	40021000 	.word	0x40021000
 800462c:	0800a07c 	.word	0x0800a07c
 8004630:	20000000 	.word	0x20000000
 8004634:	20000004 	.word	0x20000004

08004638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004652:	4b1e      	ldr	r3, [pc, #120]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b04      	cmp	r3, #4
 8004660:	d002      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x30>
 8004662:	2b08      	cmp	r3, #8
 8004664:	d003      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0x36>
 8004666:	e027      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004668:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800466a:	613b      	str	r3, [r7, #16]
      break;
 800466c:	e027      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	0c9b      	lsrs	r3, r3, #18
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	4a17      	ldr	r2, [pc, #92]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004678:	5cd3      	ldrb	r3, [r2, r3]
 800467a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d010      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004686:	4b11      	ldr	r3, [pc, #68]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	0c5b      	lsrs	r3, r3, #17
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	4a11      	ldr	r2, [pc, #68]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004692:	5cd3      	ldrb	r3, [r2, r3]
 8004694:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800469a:	fb03 f202 	mul.w	r2, r3, r2
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e004      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a0c      	ldr	r2, [pc, #48]	@ (80046dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	613b      	str	r3, [r7, #16]
      break;
 80046b6:	e002      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ba:	613b      	str	r3, [r7, #16]
      break;
 80046bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046be:	693b      	ldr	r3, [r7, #16]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000
 80046d0:	007a1200 	.word	0x007a1200
 80046d4:	0800a094 	.word	0x0800a094
 80046d8:	0800a0a4 	.word	0x0800a0a4
 80046dc:	003d0900 	.word	0x003d0900

080046e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e4:	4b02      	ldr	r3, [pc, #8]	@ (80046f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	20000000 	.word	0x20000000

080046f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046f8:	f7ff fff2 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	0adb      	lsrs	r3, r3, #11
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4903      	ldr	r1, [pc, #12]	@ (8004718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	0800a08c 	.word	0x0800a08c

0800471c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004724:	4b0a      	ldr	r3, [pc, #40]	@ (8004750 <RCC_Delay+0x34>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0a      	ldr	r2, [pc, #40]	@ (8004754 <RCC_Delay+0x38>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	0a5b      	lsrs	r3, r3, #9
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004738:	bf00      	nop
  }
  while (Delay --);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1e5a      	subs	r2, r3, #1
 800473e:	60fa      	str	r2, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f9      	bne.n	8004738 <RCC_Delay+0x1c>
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	20000000 	.word	0x20000000
 8004754:	10624dd3 	.word	0x10624dd3

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d07d      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004774:	2300      	movs	r3, #0
 8004776:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004778:	4b4f      	ldr	r3, [pc, #316]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10d      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004784:	4b4c      	ldr	r3, [pc, #304]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	4a4b      	ldr	r2, [pc, #300]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478e:	61d3      	str	r3, [r2, #28]
 8004790:	4b49      	ldr	r3, [pc, #292]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479c:	2301      	movs	r3, #1
 800479e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b46      	ldr	r3, [pc, #280]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d118      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ac:	4b43      	ldr	r3, [pc, #268]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a42      	ldr	r2, [pc, #264]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b8:	f7fc ff2a 	bl	8001610 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	e008      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c0:	f7fc ff26 	bl	8001610 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	@ 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e06d      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b3a      	ldr	r3, [pc, #232]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047de:	4b36      	ldr	r3, [pc, #216]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d02e      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d027      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047fc:	4b2e      	ldr	r3, [pc, #184]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004804:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004806:	4b2e      	ldr	r3, [pc, #184]	@ (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800480c:	4b2c      	ldr	r3, [pc, #176]	@ (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004812:	4a29      	ldr	r2, [pc, #164]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d014      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004822:	f7fc fef5 	bl	8001610 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fc fef1 	bl	8001610 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e036      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	4b1d      	ldr	r3, [pc, #116]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ee      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484c:	4b1a      	ldr	r3, [pc, #104]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4917      	ldr	r1, [pc, #92]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	4313      	orrs	r3, r2
 800485c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	4b14      	ldr	r3, [pc, #80]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	4a13      	ldr	r2, [pc, #76]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800486e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800487c:	4b0e      	ldr	r3, [pc, #56]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	490b      	ldr	r1, [pc, #44]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800489a:	4b07      	ldr	r3, [pc, #28]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4904      	ldr	r1, [pc, #16]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
 80048c0:	42420440 	.word	0x42420440

080048c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	f200 808a 	bhi.w	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d045      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d075      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048fa:	e082      	b.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80048fc:	4b46      	ldr	r3, [pc, #280]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004902:	4b45      	ldr	r3, [pc, #276]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d07b      	beq.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0c9b      	lsrs	r3, r3, #18
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	4a41      	ldr	r2, [pc, #260]	@ (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004918:	5cd3      	ldrb	r3, [r2, r3]
 800491a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d015      	beq.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004926:	4b3c      	ldr	r3, [pc, #240]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	0c5b      	lsrs	r3, r3, #17
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	4a3b      	ldr	r2, [pc, #236]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004940:	4a38      	ldr	r2, [pc, #224]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	fbb2 f2f3 	udiv	r2, r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e004      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4a34      	ldr	r2, [pc, #208]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800495c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004968:	d102      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	61bb      	str	r3, [r7, #24]
      break;
 800496e:	e04a      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4a2d      	ldr	r2, [pc, #180]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
      break;
 800497e:	e042      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004980:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800498c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004990:	d108      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800499c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	e01f      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ae:	d109      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80049b0:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80049bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e00f      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ce:	d11c      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049d0:	4b11      	ldr	r3, [pc, #68]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d016      	beq.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80049dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80049e0:	61bb      	str	r3, [r7, #24]
      break;
 80049e2:	e012      	b.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049e4:	e011      	b.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049e6:	f7ff fe85 	bl	80046f4 <HAL_RCC_GetPCLK2Freq>
 80049ea:	4602      	mov	r2, r0
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	0b9b      	lsrs	r3, r3, #14
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	3301      	adds	r3, #1
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	61bb      	str	r3, [r7, #24]
      break;
 8004a00:	e004      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a02:	bf00      	nop
 8004a04:	e002      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a06:	bf00      	nop
 8004a08:	e000      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a0a:	bf00      	nop
    }
  }
  return (frequency);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	0800a0a8 	.word	0x0800a0a8
 8004a20:	0800a0b8 	.word	0x0800a0b8
 8004a24:	007a1200 	.word	0x007a1200
 8004a28:	003d0900 	.word	0x003d0900
 8004a2c:	aaaaaaab 	.word	0xaaaaaaab

08004a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e041      	b.n	8004ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fc fce6 	bl	8001428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 f8f4 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_ConfigClockSource+0x1c>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e0b4      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x186>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b22:	d03e      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0xd4>
 8004b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b28:	f200 8087 	bhi.w	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b30:	f000 8086 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0x172>
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b38:	d87f      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
 8004b3a:	2b70      	cmp	r3, #112	@ 0x70
 8004b3c:	d01a      	beq.n	8004b74 <HAL_TIM_ConfigClockSource+0xa6>
 8004b3e:	2b70      	cmp	r3, #112	@ 0x70
 8004b40:	d87b      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
 8004b42:	2b60      	cmp	r3, #96	@ 0x60
 8004b44:	d050      	beq.n	8004be8 <HAL_TIM_ConfigClockSource+0x11a>
 8004b46:	2b60      	cmp	r3, #96	@ 0x60
 8004b48:	d877      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
 8004b4a:	2b50      	cmp	r3, #80	@ 0x50
 8004b4c:	d03c      	beq.n	8004bc8 <HAL_TIM_ConfigClockSource+0xfa>
 8004b4e:	2b50      	cmp	r3, #80	@ 0x50
 8004b50:	d873      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
 8004b52:	2b40      	cmp	r3, #64	@ 0x40
 8004b54:	d058      	beq.n	8004c08 <HAL_TIM_ConfigClockSource+0x13a>
 8004b56:	2b40      	cmp	r3, #64	@ 0x40
 8004b58:	d86f      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
 8004b5a:	2b30      	cmp	r3, #48	@ 0x30
 8004b5c:	d064      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x15a>
 8004b5e:	2b30      	cmp	r3, #48	@ 0x30
 8004b60:	d86b      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d060      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x15a>
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d867      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d05c      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x15a>
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d05a      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x15a>
 8004b72:	e062      	b.n	8004c3a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b84:	f000 f94f 	bl	8004e26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]
      break;
 8004ba0:	e04f      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bb2:	f000 f938 	bl	8004e26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bc4:	609a      	str	r2, [r3, #8]
      break;
 8004bc6:	e03c      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f000 f8af 	bl	8004d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2150      	movs	r1, #80	@ 0x50
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f906 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004be6:	e02c      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f000 f8cd 	bl	8004d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2160      	movs	r1, #96	@ 0x60
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f8f6 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004c06:	e01c      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c14:	461a      	mov	r2, r3
 8004c16:	f000 f88f 	bl	8004d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2140      	movs	r1, #64	@ 0x40
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f8e6 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004c26:	e00c      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 f8dd 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004c38:	e003      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3e:	e000      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d2c <TIM_Base_SetConfig+0xd0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x30>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x30>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <TIM_Base_SetConfig+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x30>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a2b      	ldr	r2, [pc, #172]	@ (8004d34 <TIM_Base_SetConfig+0xd8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	@ (8004d2c <TIM_Base_SetConfig+0xd0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00b      	beq.n	8004cbe <TIM_Base_SetConfig+0x62>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cac:	d007      	beq.n	8004cbe <TIM_Base_SetConfig+0x62>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d30 <TIM_Base_SetConfig+0xd4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <TIM_Base_SetConfig+0x62>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d34 <TIM_Base_SetConfig+0xd8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8004d2c <TIM_Base_SetConfig+0xd0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	611a      	str	r2, [r3, #16]
  }
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800

08004d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f023 0201 	bic.w	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 030a 	bic.w	r3, r3, #10
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0210 	bic.w	r2, r3, #16
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	031b      	lsls	r3, r3, #12
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	621a      	str	r2, [r3, #32]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f043 0307 	orr.w	r3, r3, #7
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b087      	sub	sp, #28
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	607a      	str	r2, [r7, #4]
 8004e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	021a      	lsls	r2, r3, #8
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	609a      	str	r2, [r3, #8]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e046      	b.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a16      	ldr	r2, [pc, #88]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec8:	d009      	beq.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a12      	ldr	r2, [pc, #72]	@ (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a10      	ldr	r2, [pc, #64]	@ (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10c      	bne.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800

08004f20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	4638      	mov	r0, r7
 8004f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f4a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004f4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b085      	sub	sp, #20
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f6e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004f72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	4638      	mov	r0, r7
 8004fbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b09d      	sub	sp, #116	@ 0x74
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800500e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005012:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	78db      	ldrb	r3, [r3, #3]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d81f      	bhi.n	800505e <USB_ActivateEndpoint+0x72>
 800501e:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <USB_ActivateEndpoint+0x38>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005035 	.word	0x08005035
 8005028:	08005051 	.word	0x08005051
 800502c:	08005067 	.word	0x08005067
 8005030:	08005043 	.word	0x08005043
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005034:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005038:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800503c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005040:	e012      	b.n	8005068 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005042:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005046:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800504a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800504e:	e00b      	b.n	8005068 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005050:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005054:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005058:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800505c:	e004      	b.n	8005068 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005064:	e000      	b.n	8005068 <USB_ActivateEndpoint+0x7c>
      break;
 8005066:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	441a      	add	r2, r3
 8005072:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800507a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800507e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005086:	b29b      	uxth	r3, r3
 8005088:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	7812      	ldrb	r2, [r2, #0]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80050ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	7b1b      	ldrb	r3, [r3, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f040 8178 	bne.w	80053c8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8084 	beq.w	80051ea <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4413      	add	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	011a      	lsls	r2, r3, #4
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	88db      	ldrh	r3, [r3, #6]
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	827b      	strh	r3, [r7, #18]
 8005124:	8a7b      	ldrh	r3, [r7, #18]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01b      	beq.n	8005166 <USB_ActivateEndpoint+0x17a>
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005144:	823b      	strh	r3, [r7, #16]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	8a3b      	ldrh	r3, [r7, #16]
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800515e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	78db      	ldrb	r3, [r3, #3]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d020      	beq.n	80051b0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005184:	81bb      	strh	r3, [r7, #12]
 8005186:	89bb      	ldrh	r3, [r7, #12]
 8005188:	f083 0320 	eor.w	r3, r3, #32
 800518c:	81bb      	strh	r3, [r7, #12]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	89bb      	ldrh	r3, [r7, #12]
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]
 80051ae:	e2d5      	b.n	800575c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c6:	81fb      	strh	r3, [r7, #14]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	89fb      	ldrh	r3, [r7, #14]
 80051d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	8013      	strh	r3, [r2, #0]
 80051e8:	e2b8      	b.n	800575c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	4413      	add	r3, r2
 80051fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011a      	lsls	r2, r3, #4
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	4413      	add	r3, r2
 8005208:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	88db      	ldrh	r3, [r3, #6]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	b29b      	uxth	r3, r3
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005228:	b29b      	uxth	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	4413      	add	r3, r2
 8005230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	011a      	lsls	r2, r3, #4
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	4413      	add	r3, r2
 800523c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800524c:	b29a      	uxth	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b3e      	cmp	r3, #62	@ 0x3e
 8005258:	d91d      	bls.n	8005296 <USB_ActivateEndpoint+0x2aa>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <USB_ActivateEndpoint+0x288>
 800526e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005270:	3b01      	subs	r3, #1
 8005272:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29a      	uxth	r2, r3
 800527a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800527c:	b29b      	uxth	r3, r3
 800527e:	029b      	lsls	r3, r3, #10
 8005280:	b29b      	uxth	r3, r3
 8005282:	4313      	orrs	r3, r2
 8005284:	b29b      	uxth	r3, r3
 8005286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528e:	b29a      	uxth	r2, r3
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e026      	b.n	80052e4 <USB_ActivateEndpoint+0x2f8>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <USB_ActivateEndpoint+0x2c8>
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	e017      	b.n	80052e4 <USB_ActivateEndpoint+0x2f8>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <USB_ActivateEndpoint+0x2e2>
 80052c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ca:	3301      	adds	r3, #1
 80052cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	029b      	lsls	r3, r3, #10
 80052da:	b29b      	uxth	r3, r3
 80052dc:	4313      	orrs	r3, r2
 80052de:	b29a      	uxth	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80052f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01b      	beq.n	8005334 <USB_ActivateEndpoint+0x348>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005312:	843b      	strh	r3, [r7, #32]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	8c3b      	ldrh	r3, [r7, #32]
 8005320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005328:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800532c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005330:	b29b      	uxth	r3, r3
 8005332:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d124      	bne.n	8005386 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800534e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005352:	83bb      	strh	r3, [r7, #28]
 8005354:	8bbb      	ldrh	r3, [r7, #28]
 8005356:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800535a:	83bb      	strh	r3, [r7, #28]
 800535c:	8bbb      	ldrh	r3, [r7, #28]
 800535e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005362:	83bb      	strh	r3, [r7, #28]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	8bbb      	ldrh	r3, [r7, #28]
 8005370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800537c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005380:	b29b      	uxth	r3, r3
 8005382:	8013      	strh	r3, [r2, #0]
 8005384:	e1ea      	b.n	800575c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539c:	83fb      	strh	r3, [r7, #30]
 800539e:	8bfb      	ldrh	r3, [r7, #30]
 80053a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053a4:	83fb      	strh	r3, [r7, #30]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	441a      	add	r2, r3
 80053b0:	8bfb      	ldrh	r3, [r7, #30]
 80053b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	8013      	strh	r3, [r2, #0]
 80053c6:	e1c9      	b.n	800575c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	78db      	ldrb	r3, [r3, #3]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d11e      	bne.n	800540e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80053f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005400:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005408:	b29b      	uxth	r3, r3
 800540a:	8013      	strh	r3, [r2, #0]
 800540c:	e01d      	b.n	800544a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005424:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800543e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005454:	b29b      	uxth	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800545a:	4413      	add	r3, r2
 800545c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	011a      	lsls	r2, r3, #4
 8005464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005466:	4413      	add	r3, r2
 8005468:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800546c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	891b      	ldrh	r3, [r3, #8]
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	657b      	str	r3, [r7, #84]	@ 0x54
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548e:	4413      	add	r3, r2
 8005490:	657b      	str	r3, [r7, #84]	@ 0x54
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	011a      	lsls	r2, r3, #4
 8005498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549a:	4413      	add	r3, r2
 800549c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80054a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	895b      	ldrh	r3, [r3, #10]
 80054a6:	085b      	lsrs	r3, r3, #1
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054b0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 8093 	bne.w	80055e2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80054cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80054d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <USB_ActivateEndpoint+0x524>
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005504:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800551e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <USB_ActivateEndpoint+0x574>
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005558:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005576:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005578:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800557a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800557e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005580:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005582:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005586:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800559c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055be:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8013      	strh	r3, [r2, #0]
 80055e0:	e0bc      	b.n	800575c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80055f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80055f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01d      	beq.n	800563a <USB_ActivateEndpoint+0x64e>
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005614:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800562e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800564a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800564e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01d      	beq.n	8005692 <USB_ActivateEndpoint+0x6a6>
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800567e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800568a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800568e:	b29b      	uxth	r3, r3
 8005690:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	78db      	ldrb	r3, [r3, #3]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d024      	beq.n	80056e4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80056b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80056b8:	f083 0320 	eor.w	r3, r3, #32
 80056bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80056ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056de:	b29b      	uxth	r3, r3
 80056e0:	8013      	strh	r3, [r2, #0]
 80056e2:	e01d      	b.n	8005720 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	441a      	add	r2, r3
 8005708:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800570c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800571c:	b29b      	uxth	r3, r3
 800571e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005736:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	441a      	add	r2, r3
 8005744:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800575c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005760:	4618      	mov	r0, r3
 8005762:	3774      	adds	r7, #116	@ 0x74
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop

0800576c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800576c:	b480      	push	{r7}
 800576e:	b08d      	sub	sp, #52	@ 0x34
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	7b1b      	ldrb	r3, [r3, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 808e 	bne.w	800589c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d044      	beq.n	8005812 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	81bb      	strh	r3, [r7, #12]
 8005796:	89bb      	ldrh	r3, [r7, #12]
 8005798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01b      	beq.n	80057d8 <USB_DeactivateEndpoint+0x6c>
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b6:	817b      	strh	r3, [r7, #10]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	441a      	add	r2, r3
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ee:	813b      	strh	r3, [r7, #8]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	893b      	ldrh	r3, [r7, #8]
 80057fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580c:	b29b      	uxth	r3, r3
 800580e:	8013      	strh	r3, [r2, #0]
 8005810:	e192      	b.n	8005b38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	827b      	strh	r3, [r7, #18]
 8005820:	8a7b      	ldrh	r3, [r7, #18]
 8005822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01b      	beq.n	8005862 <USB_DeactivateEndpoint+0xf6>
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29b      	uxth	r3, r3
 8005838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800583c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005840:	823b      	strh	r3, [r7, #16]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	441a      	add	r2, r3
 800584c:	8a3b      	ldrh	r3, [r7, #16]
 800584e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005856:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800585a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800585e:	b29b      	uxth	r3, r3
 8005860:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005878:	81fb      	strh	r3, [r7, #14]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	441a      	add	r2, r3
 8005884:	89fb      	ldrh	r3, [r7, #14]
 8005886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800588a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800588e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005896:	b29b      	uxth	r3, r3
 8005898:	8013      	strh	r3, [r2, #0]
 800589a:	e14d      	b.n	8005b38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f040 80a5 	bne.w	80059f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	843b      	strh	r3, [r7, #32]
 80058b4:	8c3b      	ldrh	r3, [r7, #32]
 80058b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d01b      	beq.n	80058f6 <USB_DeactivateEndpoint+0x18a>
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d4:	83fb      	strh	r3, [r7, #30]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	441a      	add	r2, r3
 80058e0:	8bfb      	ldrh	r3, [r7, #30]
 80058e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	83bb      	strh	r3, [r7, #28]
 8005904:	8bbb      	ldrh	r3, [r7, #28]
 8005906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01b      	beq.n	8005946 <USB_DeactivateEndpoint+0x1da>
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005924:	837b      	strh	r3, [r7, #26]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	8b7b      	ldrh	r3, [r7, #26]
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595c:	833b      	strh	r3, [r7, #24]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	441a      	add	r2, r3
 8005968:	8b3b      	ldrh	r3, [r7, #24]
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005976:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005994:	82fb      	strh	r3, [r7, #22]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	441a      	add	r2, r3
 80059a0:	8afb      	ldrh	r3, [r7, #22]
 80059a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059cc:	82bb      	strh	r3, [r7, #20]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	8abb      	ldrh	r3, [r7, #20]
 80059da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	8013      	strh	r3, [r2, #0]
 80059ee:	e0a3      	b.n	8005b38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80059fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01b      	beq.n	8005a40 <USB_DeactivateEndpoint+0x2d4>
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	441a      	add	r2, r3
 8005a2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005a2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005a4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01b      	beq.n	8005a90 <USB_DeactivateEndpoint+0x324>
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005abc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ade:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	441a      	add	r2, r3
 8005aea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b16:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3734      	adds	r7, #52	@ 0x34
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b0c2      	sub	sp, #264	@ 0x108
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b52:	6018      	str	r0, [r3, #0]
 8005b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	f040 86b7 	bne.w	80068de <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d908      	bls.n	8005b9e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005b9c:	e007      	b.n	8005bae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	7b1b      	ldrb	r3, [r3, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d13a      	bne.n	8005c34 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6959      	ldr	r1, [r3, #20]
 8005bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	88da      	ldrh	r2, [r3, #6]
 8005bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005be0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005be4:	6800      	ldr	r0, [r0, #0]
 8005be6:	f001 fc9c 	bl	8007522 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	011a      	lsls	r2, r3, #4
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	f000 be1f 	b.w	8006872 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	78db      	ldrb	r3, [r3, #3]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	f040 8462 	bne.w	800650a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6a1a      	ldr	r2, [r3, #32]
 8005c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	f240 83df 	bls.w	8006422 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	441a      	add	r2, r3
 8005ca8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005cac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6a1a      	ldr	r2, [r3, #32]
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 81c7 	beq.w	8006094 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d177      	bne.n	8005e12 <USB_EPStartXfer+0x2ce>
 8005d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d42:	4413      	add	r3, r2
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	011a      	lsls	r2, r3, #4
 8005d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d56:	4413      	add	r3, r2
 8005d58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d72:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d74:	d921      	bls.n	8005dba <USB_EPStartXfer+0x276>
 8005d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <USB_EPStartXfer+0x252>
 8005d8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005d90:	3b01      	subs	r3, #1
 8005d92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	029b      	lsls	r3, r3, #10
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	4313      	orrs	r3, r2
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	801a      	strh	r2, [r3, #0]
 8005db8:	e050      	b.n	8005e5c <USB_EPStartXfer+0x318>
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <USB_EPStartXfer+0x294>
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e041      	b.n	8005e5c <USB_EPStartXfer+0x318>
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <USB_EPStartXfer+0x2b4>
 8005dee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005df2:	3301      	adds	r3, #1
 8005df4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	e024      	b.n	8005e5c <USB_EPStartXfer+0x318>
 8005e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d11c      	bne.n	8005e5c <USB_EPStartXfer+0x318>
 8005e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	4413      	add	r3, r2
 8005e38:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	011a      	lsls	r2, r3, #4
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	895b      	ldrh	r3, [r3, #10]
 8005e68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6959      	ldr	r1, [r3, #20]
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	f001 fb49 	bl	8007522 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea0:	441a      	add	r2, r3
 8005ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d90f      	bls.n	8005eea <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1a      	ldr	r2, [r3, #32]
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	1ad2      	subs	r2, r2, r3
 8005edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	621a      	str	r2, [r3, #32]
 8005ee8:	e00e      	b.n	8005f08 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2200      	movs	r2, #0
 8005f06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d177      	bne.n	8006008 <USB_EPStartXfer+0x4c4>
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	011a      	lsls	r2, r3, #4
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	801a      	strh	r2, [r3, #0]
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f68:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f6a:	d921      	bls.n	8005fb0 <USB_EPStartXfer+0x46c>
 8005f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <USB_EPStartXfer+0x448>
 8005f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f86:	3b01      	subs	r3, #1
 8005f88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	e056      	b.n	800605e <USB_EPStartXfer+0x51a>
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <USB_EPStartXfer+0x48a>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	e047      	b.n	800605e <USB_EPStartXfer+0x51a>
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <USB_EPStartXfer+0x4aa>
 8005fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe8:	3301      	adds	r3, #1
 8005fea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	029b      	lsls	r3, r3, #10
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	4313      	orrs	r3, r2
 8006000:	b29a      	uxth	r2, r3
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e02a      	b.n	800605e <USB_EPStartXfer+0x51a>
 8006008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d122      	bne.n	800605e <USB_EPStartXfer+0x51a>
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006032:	b29b      	uxth	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	4413      	add	r3, r2
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	011a      	lsls	r2, r3, #4
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	4413      	add	r3, r2
 800604e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006058:	b29a      	uxth	r2, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800605e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	891b      	ldrh	r3, [r3, #8]
 800606a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6959      	ldr	r1, [r3, #20]
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	b29b      	uxth	r3, r3
 8006080:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006084:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006088:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f001 fa48 	bl	8007522 <USB_WritePMA>
 8006092:	e3ee      	b.n	8006872 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d177      	bne.n	8006194 <USB_EPStartXfer+0x650>
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060be:	b29b      	uxth	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060c4:	4413      	add	r3, r2
 80060c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	011a      	lsls	r2, r3, #4
 80060d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060d8:	4413      	add	r3, r2
 80060da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060de:	647b      	str	r3, [r7, #68]	@ 0x44
 80060e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80060f6:	d921      	bls.n	800613c <USB_EPStartXfer+0x5f8>
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	f003 031f 	and.w	r3, r3, #31
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <USB_EPStartXfer+0x5d4>
 800610e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006112:	3b01      	subs	r3, #1
 8006114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006122:	b29b      	uxth	r3, r3
 8006124:	029b      	lsls	r3, r3, #10
 8006126:	b29b      	uxth	r3, r3
 8006128:	4313      	orrs	r3, r2
 800612a:	b29b      	uxth	r3, r3
 800612c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006134:	b29a      	uxth	r2, r3
 8006136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e056      	b.n	80061ea <USB_EPStartXfer+0x6a6>
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <USB_EPStartXfer+0x616>
 8006144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006152:	b29a      	uxth	r2, r3
 8006154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	e047      	b.n	80061ea <USB_EPStartXfer+0x6a6>
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <USB_EPStartXfer+0x636>
 8006170:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006174:	3301      	adds	r3, #1
 8006176:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800617a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29a      	uxth	r2, r3
 8006180:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	b29a      	uxth	r2, r3
 800618e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e02a      	b.n	80061ea <USB_EPStartXfer+0x6a6>
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d122      	bne.n	80061ea <USB_EPStartXfer+0x6a6>
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80061b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061be:	b29b      	uxth	r3, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061c4:	4413      	add	r3, r2
 80061c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	011a      	lsls	r2, r3, #4
 80061d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061d8:	4413      	add	r3, r2
 80061da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	891b      	ldrh	r3, [r3, #8]
 80061f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6959      	ldr	r1, [r3, #20]
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	b29b      	uxth	r3, r3
 800620c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006210:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006214:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006218:	6800      	ldr	r0, [r0, #0]
 800621a:	f001 f982 	bl	8007522 <USB_WritePMA>
            ep->xfer_buff += len;
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622e:	441a      	add	r2, r3
 8006230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800623c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d90f      	bls.n	8006278 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	1ad2      	subs	r2, r2, r3
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	621a      	str	r2, [r3, #32]
 8006276:	e00e      	b.n	8006296 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d177      	bne.n	80063a2 <USB_EPStartXfer+0x85e>
 80062b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d2:	4413      	add	r3, r2
 80062d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	011a      	lsls	r2, r3, #4
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e6:	4413      	add	r3, r2
 80062e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006302:	2b3e      	cmp	r3, #62	@ 0x3e
 8006304:	d921      	bls.n	800634a <USB_EPStartXfer+0x806>
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <USB_EPStartXfer+0x7e2>
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	3b01      	subs	r3, #1
 8006322:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29a      	uxth	r2, r3
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	b29b      	uxth	r3, r3
 8006332:	029b      	lsls	r3, r3, #10
 8006334:	b29b      	uxth	r3, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	b29b      	uxth	r3, r3
 800633a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006342:	b29a      	uxth	r2, r3
 8006344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	e050      	b.n	80063ec <USB_EPStartXfer+0x8a8>
 800634a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <USB_EPStartXfer+0x824>
 8006352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006360:	b29a      	uxth	r2, r3
 8006362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e041      	b.n	80063ec <USB_EPStartXfer+0x8a8>
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <USB_EPStartXfer+0x844>
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	3301      	adds	r3, #1
 8006384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	b29b      	uxth	r3, r3
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	b29b      	uxth	r3, r3
 8006398:	4313      	orrs	r3, r2
 800639a:	b29a      	uxth	r2, r3
 800639c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e024      	b.n	80063ec <USB_EPStartXfer+0x8a8>
 80063a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d11c      	bne.n	80063ec <USB_EPStartXfer+0x8a8>
 80063b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063c6:	4413      	add	r3, r2
 80063c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	011a      	lsls	r2, r3, #4
 80063d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063da:	4413      	add	r3, r2
 80063dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	895b      	ldrh	r3, [r3, #10]
 80063f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6959      	ldr	r1, [r3, #20]
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	b29b      	uxth	r3, r3
 800640e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006412:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006416:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	f001 f881 	bl	8007522 <USB_WritePMA>
 8006420:	e227      	b.n	8006872 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006458:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800647a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800647e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800648a:	b29b      	uxth	r3, r3
 800648c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800648e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006492:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064ae:	4413      	add	r3, r2
 80064b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	011a      	lsls	r2, r3, #4
 80064c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064c2:	4413      	add	r3, r2
 80064c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	891b      	ldrh	r3, [r3, #8]
 80064e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6959      	ldr	r1, [r3, #20]
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006502:	6800      	ldr	r0, [r0, #0]
 8006504:	f001 f80d 	bl	8007522 <USB_WritePMA>
 8006508:	e1b3      	b.n	8006872 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800650a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80c6 	beq.w	80066dc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	673b      	str	r3, [r7, #112]	@ 0x70
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d177      	bne.n	800665c <USB_EPStartXfer+0xb18>
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006586:	b29b      	uxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800658c:	4413      	add	r3, r2
 800658e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	011a      	lsls	r2, r3, #4
 800659e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065a0:	4413      	add	r3, r2
 80065a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80065a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80065be:	d921      	bls.n	8006604 <USB_EPStartXfer+0xac0>
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <USB_EPStartXfer+0xa9c>
 80065d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065da:	3b01      	subs	r3, #1
 80065dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	029b      	lsls	r3, r3, #10
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	4313      	orrs	r3, r2
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	e050      	b.n	80066a6 <USB_EPStartXfer+0xb62>
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <USB_EPStartXfer+0xade>
 800660c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e041      	b.n	80066a6 <USB_EPStartXfer+0xb62>
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <USB_EPStartXfer+0xafe>
 8006638:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800663c:	3301      	adds	r3, #1
 800663e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006642:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29a      	uxth	r2, r3
 8006648:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800664c:	b29b      	uxth	r3, r3
 800664e:	029b      	lsls	r3, r3, #10
 8006650:	b29b      	uxth	r3, r3
 8006652:	4313      	orrs	r3, r2
 8006654:	b29a      	uxth	r2, r3
 8006656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	e024      	b.n	80066a6 <USB_EPStartXfer+0xb62>
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d11c      	bne.n	80066a6 <USB_EPStartXfer+0xb62>
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800667a:	b29b      	uxth	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006680:	4413      	add	r3, r2
 8006682:	673b      	str	r3, [r7, #112]	@ 0x70
 8006684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	011a      	lsls	r2, r3, #4
 8006692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006694:	4413      	add	r3, r2
 8006696:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800669a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80066a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	895b      	ldrh	r3, [r3, #10]
 80066b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6959      	ldr	r1, [r3, #20]
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066d4:	6800      	ldr	r0, [r0, #0]
 80066d6:	f000 ff24 	bl	8007522 <USB_WritePMA>
 80066da:	e0ca      	b.n	8006872 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	785b      	ldrb	r3, [r3, #1]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d177      	bne.n	80067dc <USB_EPStartXfer+0xc98>
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006706:	b29b      	uxth	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800670c:	4413      	add	r3, r2
 800670e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	011a      	lsls	r2, r3, #4
 800671e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006720:	4413      	add	r3, r2
 8006722:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006726:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006732:	b29a      	uxth	r2, r3
 8006734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	2b3e      	cmp	r3, #62	@ 0x3e
 800673e:	d921      	bls.n	8006784 <USB_EPStartXfer+0xc40>
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <USB_EPStartXfer+0xc1c>
 8006756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800675a:	3b01      	subs	r3, #1
 800675c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800676a:	b29b      	uxth	r3, r3
 800676c:	029b      	lsls	r3, r3, #10
 800676e:	b29b      	uxth	r3, r3
 8006770:	4313      	orrs	r3, r2
 8006772:	b29b      	uxth	r3, r3
 8006774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800677c:	b29a      	uxth	r2, r3
 800677e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006780:	801a      	strh	r2, [r3, #0]
 8006782:	e05c      	b.n	800683e <USB_EPStartXfer+0xcfa>
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <USB_EPStartXfer+0xc5e>
 800678c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	e04d      	b.n	800683e <USB_EPStartXfer+0xcfa>
 80067a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a6:	085b      	lsrs	r3, r3, #1
 80067a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <USB_EPStartXfer+0xc7e>
 80067b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80067bc:	3301      	adds	r3, #1
 80067be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	029b      	lsls	r3, r3, #10
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4313      	orrs	r3, r2
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	e030      	b.n	800683e <USB_EPStartXfer+0xcfa>
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d128      	bne.n	800683e <USB_EPStartXfer+0xcfa>
 80067ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006808:	b29b      	uxth	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006810:	4413      	add	r3, r2
 8006812:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	011a      	lsls	r2, r3, #4
 8006824:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006828:	4413      	add	r3, r2
 800682a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800682e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006836:	b29a      	uxth	r2, r3
 8006838:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800683c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	891b      	ldrh	r3, [r3, #8]
 800684a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800684e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6959      	ldr	r1, [r3, #20]
 800685a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685e:	b29b      	uxth	r3, r3
 8006860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006864:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006868:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f000 fe58 	bl	8007522 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006898:	817b      	strh	r3, [r7, #10]
 800689a:	897b      	ldrh	r3, [r7, #10]
 800689c:	f083 0310 	eor.w	r3, r3, #16
 80068a0:	817b      	strh	r3, [r7, #10]
 80068a2:	897b      	ldrh	r3, [r7, #10]
 80068a4:	f083 0320 	eor.w	r3, r3, #32
 80068a8:	817b      	strh	r3, [r7, #10]
 80068aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	897b      	ldrh	r3, [r7, #10]
 80068c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8013      	strh	r3, [r2, #0]
 80068da:	f000 bcde 	b.w	800729a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	7b1b      	ldrb	r3, [r3, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f040 80bb 	bne.w	8006a66 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	429a      	cmp	r2, r3
 800690a:	d917      	bls.n	800693c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800690c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699a      	ldr	r2, [r3, #24]
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	1ad2      	subs	r2, r2, r3
 800692e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	619a      	str	r2, [r3, #24]
 800693a:	e00e      	b.n	800695a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800693c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2200      	movs	r2, #0
 8006958:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800695a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800697e:	4413      	add	r3, r2
 8006980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	011a      	lsls	r2, r3, #4
 8006992:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006996:	4413      	add	r3, r2
 8006998:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800699c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80069ba:	d924      	bls.n	8006a06 <USB_EPStartXfer+0xec2>
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d104      	bne.n	80069dc <USB_EPStartXfer+0xe98>
 80069d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80069d6:	3b01      	subs	r3, #1
 80069d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	029b      	lsls	r3, r3, #10
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	f000 bc10 	b.w	8007226 <USB_EPStartXfer+0x16e2>
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10c      	bne.n	8006a28 <USB_EPStartXfer+0xee4>
 8006a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	e3fe      	b.n	8007226 <USB_EPStartXfer+0x16e2>
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <USB_EPStartXfer+0xf04>
 8006a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a42:	3301      	adds	r3, #1
 8006a44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	029b      	lsls	r3, r3, #10
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e3df      	b.n	8007226 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	78db      	ldrb	r3, [r3, #3]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	f040 8218 	bne.w	8006ea8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f040 809d 	bne.w	8006bc4 <USB_EPStartXfer+0x1080>
 8006a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aae:	4413      	add	r3, r2
 8006ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	011a      	lsls	r2, r3, #4
 8006ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006acc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006af2:	d92b      	bls.n	8006b4c <USB_EPStartXfer+0x1008>
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <USB_EPStartXfer+0xfe0>
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	4313      	orrs	r3, r2
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	e070      	b.n	8006c2e <USB_EPStartXfer+0x10ea>
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10c      	bne.n	8006b76 <USB_EPStartXfer+0x1032>
 8006b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e05b      	b.n	8006c2e <USB_EPStartXfer+0x10ea>
 8006b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <USB_EPStartXfer+0x1062>
 8006b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	029b      	lsls	r3, r3, #10
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bc0:	801a      	strh	r2, [r3, #0]
 8006bc2:	e034      	b.n	8006c2e <USB_EPStartXfer+0x10ea>
 8006bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	785b      	ldrb	r3, [r3, #1]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d12c      	bne.n	8006c2e <USB_EPStartXfer+0x10ea>
 8006bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	011a      	lsls	r2, r3, #4
 8006c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006c2c:	801a      	strh	r2, [r3, #0]
 8006c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	785b      	ldrb	r3, [r3, #1]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f040 809d 	bne.w	8006d88 <USB_EPStartXfer+0x1244>
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c72:	4413      	add	r3, r2
 8006c74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	011a      	lsls	r2, r3, #4
 8006c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cb6:	d92b      	bls.n	8006d10 <USB_EPStartXfer+0x11cc>
 8006cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <USB_EPStartXfer+0x11a4>
 8006cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	029b      	lsls	r3, r3, #10
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e069      	b.n	8006de4 <USB_EPStartXfer+0x12a0>
 8006d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10c      	bne.n	8006d3a <USB_EPStartXfer+0x11f6>
 8006d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e054      	b.n	8006de4 <USB_EPStartXfer+0x12a0>
 8006d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <USB_EPStartXfer+0x1226>
 8006d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d64:	3301      	adds	r3, #1
 8006d66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	029b      	lsls	r3, r3, #10
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	e02d      	b.n	8006de4 <USB_EPStartXfer+0x12a0>
 8006d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d125      	bne.n	8006de4 <USB_EPStartXfer+0x12a0>
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006dae:	4413      	add	r3, r2
 8006db0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	011a      	lsls	r2, r3, #4
 8006dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006de2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8218 	beq.w	8007226 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <USB_EPStartXfer+0x12ea>
 8006e22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10d      	bne.n	8006e4a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f040 81f5 	bne.w	8007226 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 81ee 	bne.w	8007226 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e70:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	441a      	add	r2, r3
 8006e8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8013      	strh	r3, [r2, #0]
 8006ea6:	e1be      	b.n	8007226 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	78db      	ldrb	r3, [r3, #3]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 81b4 	bne.w	8007222 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d917      	bls.n	8006f06 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	619a      	str	r2, [r3, #24]
 8006f04:	e00e      	b.n	8006f24 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2200      	movs	r2, #0
 8006f22:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 8085 	bne.w	8007040 <USB_EPStartXfer+0x14fc>
 8006f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	011a      	lsls	r2, r3, #4
 8006f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f72:	4413      	add	r3, r2
 8006f74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f94:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f96:	d923      	bls.n	8006fe0 <USB_EPStartXfer+0x149c>
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <USB_EPStartXfer+0x1474>
 8006fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	029b      	lsls	r3, r3, #10
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fdc:	801a      	strh	r2, [r3, #0]
 8006fde:	e060      	b.n	80070a2 <USB_EPStartXfer+0x155e>
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10c      	bne.n	8007002 <USB_EPStartXfer+0x14be>
 8006fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e04f      	b.n	80070a2 <USB_EPStartXfer+0x155e>
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <USB_EPStartXfer+0x14de>
 8007018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800701c:	3301      	adds	r3, #1
 800701e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29a      	uxth	r2, r3
 800702a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800702e:	b29b      	uxth	r3, r3
 8007030:	029b      	lsls	r3, r3, #10
 8007032:	b29b      	uxth	r3, r3
 8007034:	4313      	orrs	r3, r2
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e030      	b.n	80070a2 <USB_EPStartXfer+0x155e>
 8007040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d128      	bne.n	80070a2 <USB_EPStartXfer+0x155e>
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800706c:	b29b      	uxth	r3, r3
 800706e:	461a      	mov	r2, r3
 8007070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007074:	4413      	add	r3, r2
 8007076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800707a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	011a      	lsls	r2, r3, #4
 8007088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800708c:	4413      	add	r3, r2
 800708e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007092:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	b29a      	uxth	r2, r3
 800709c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f040 8085 	bne.w	80071cc <USB_EPStartXfer+0x1688>
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070de:	b29b      	uxth	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80070e6:	4413      	add	r3, r2
 80070e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	011a      	lsls	r2, r3, #4
 80070fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80070fe:	4413      	add	r3, r2
 8007100:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007108:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007114:	b29a      	uxth	r2, r3
 8007116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007120:	2b3e      	cmp	r3, #62	@ 0x3e
 8007122:	d923      	bls.n	800716c <USB_EPStartXfer+0x1628>
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007128:	095b      	lsrs	r3, r3, #5
 800712a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800712e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <USB_EPStartXfer+0x1600>
 800713a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800713e:	3b01      	subs	r3, #1
 8007140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29a      	uxth	r2, r3
 800714c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007150:	b29b      	uxth	r3, r3
 8007152:	029b      	lsls	r3, r3, #10
 8007154:	b29b      	uxth	r3, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	b29b      	uxth	r3, r3
 800715a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007162:	b29a      	uxth	r2, r3
 8007164:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	e05c      	b.n	8007226 <USB_EPStartXfer+0x16e2>
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10c      	bne.n	800718e <USB_EPStartXfer+0x164a>
 8007174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e04b      	b.n	8007226 <USB_EPStartXfer+0x16e2>
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <USB_EPStartXfer+0x166a>
 80071a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071a8:	3301      	adds	r3, #1
 80071aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	029b      	lsls	r3, r3, #10
 80071be:	b29b      	uxth	r3, r3
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e02c      	b.n	8007226 <USB_EPStartXfer+0x16e2>
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d124      	bne.n	8007226 <USB_EPStartXfer+0x16e2>
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071f2:	4413      	add	r3, r2
 80071f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	011a      	lsls	r2, r3, #4
 8007206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800720a:	4413      	add	r3, r2
 800720c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	b29a      	uxth	r2, r3
 800721a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	e001      	b.n	8007226 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e03a      	b.n	800729c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007250:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007254:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007258:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800725c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007260:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007264:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	441a      	add	r2, r3
 8007282:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800728a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800728e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007296:	b29b      	uxth	r3, r3
 8007298:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d020      	beq.n	80072fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ce:	81bb      	strh	r3, [r7, #12]
 80072d0:	89bb      	ldrh	r3, [r7, #12]
 80072d2:	f083 0310 	eor.w	r3, r3, #16
 80072d6:	81bb      	strh	r3, [r7, #12]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	89bb      	ldrh	r3, [r7, #12]
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]
 80072f8:	e01f      	b.n	800733a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800730c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007310:	81fb      	strh	r3, [r7, #14]
 8007312:	89fb      	ldrh	r3, [r7, #14]
 8007314:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007318:	81fb      	strh	r3, [r7, #14]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	441a      	add	r2, r3
 8007324:	89fb      	ldrh	r3, [r7, #14]
 8007326:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800732a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800732e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007336:	b29b      	uxth	r3, r3
 8007338:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	7b1b      	ldrb	r3, [r3, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 809d 	bne.w	8007494 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d04c      	beq.n	80073fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	823b      	strh	r3, [r7, #16]
 8007370:	8a3b      	ldrh	r3, [r7, #16]
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01b      	beq.n	80073b2 <USB_EPClearStall+0x6c>
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	b29b      	uxth	r3, r3
 8007388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800738c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007390:	81fb      	strh	r3, [r7, #14]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	441a      	add	r2, r3
 800739c:	89fb      	ldrh	r3, [r7, #14]
 800739e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	78db      	ldrb	r3, [r3, #3]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d06c      	beq.n	8007494 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d0:	81bb      	strh	r3, [r7, #12]
 80073d2:	89bb      	ldrh	r3, [r7, #12]
 80073d4:	f083 0320 	eor.w	r3, r3, #32
 80073d8:	81bb      	strh	r3, [r7, #12]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	89bb      	ldrh	r3, [r7, #12]
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
 80073fa:	e04b      	b.n	8007494 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	82fb      	strh	r3, [r7, #22]
 800740a:	8afb      	ldrh	r3, [r7, #22]
 800740c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01b      	beq.n	800744c <USB_EPClearStall+0x106>
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800742a:	82bb      	strh	r3, [r7, #20]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	8abb      	ldrh	r3, [r7, #20]
 8007438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800743c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007440:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800745e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007462:	827b      	strh	r3, [r7, #18]
 8007464:	8a7b      	ldrh	r3, [r7, #18]
 8007466:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800746a:	827b      	strh	r3, [r7, #18]
 800746c:	8a7b      	ldrh	r3, [r7, #18]
 800746e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007472:	827b      	strh	r3, [r7, #18]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	441a      	add	r2, r3
 800747e:	8a7b      	ldrh	r3, [r7, #18]
 8007480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800748c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007490:	b29b      	uxth	r3, r3
 8007492:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr

080074a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d103      	bne.n	80074ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2280      	movs	r2, #128	@ 0x80
 80074b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bc80      	pop	{r7}
 80074c4:	4770      	bx	lr

080074c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr

080074da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bc80      	pop	{r7}
 80074ec:	4770      	bx	lr

080074ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b085      	sub	sp, #20
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	bc80      	pop	{r7}
 800750a:	4770      	bx	lr

0800750c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr

08007522 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007522:	b480      	push	{r7}
 8007524:	b08b      	sub	sp, #44	@ 0x2c
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	4611      	mov	r1, r2
 800752e:	461a      	mov	r2, r3
 8007530:	460b      	mov	r3, r1
 8007532:	80fb      	strh	r3, [r7, #6]
 8007534:	4613      	mov	r3, r2
 8007536:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007538:	88bb      	ldrh	r3, [r7, #4]
 800753a:	3301      	adds	r3, #1
 800753c:	085b      	lsrs	r3, r3, #1
 800753e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	005a      	lsls	r2, r3, #1
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007554:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
 800755a:	e01e      	b.n	800759a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	3301      	adds	r3, #1
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	b21a      	sxth	r2, r3
 800756c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007570:	4313      	orrs	r3, r2
 8007572:	b21b      	sxth	r3, r3
 8007574:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	8a7a      	ldrh	r2, [r7, #18]
 800757a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	3302      	adds	r3, #2
 8007580:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	3302      	adds	r3, #2
 8007586:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	3301      	adds	r3, #1
 800758c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	3301      	adds	r3, #1
 8007592:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	3b01      	subs	r3, #1
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1dd      	bne.n	800755c <USB_WritePMA+0x3a>
  }
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	372c      	adds	r7, #44	@ 0x2c
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr

080075ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b08b      	sub	sp, #44	@ 0x2c
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4611      	mov	r1, r2
 80075b8:	461a      	mov	r2, r3
 80075ba:	460b      	mov	r3, r1
 80075bc:	80fb      	strh	r3, [r7, #6]
 80075be:	4613      	mov	r3, r2
 80075c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075c2:	88bb      	ldrh	r3, [r7, #4]
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	005a      	lsls	r2, r3, #1
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075e4:	e01b      	b.n	800761e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	3302      	adds	r3, #2
 80075f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	3301      	adds	r3, #1
 8007600:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	0a1b      	lsrs	r3, r3, #8
 8007606:	b2da      	uxtb	r2, r3
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	3301      	adds	r3, #1
 8007610:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	3302      	adds	r3, #2
 8007616:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	3b01      	subs	r3, #1
 800761c:	627b      	str	r3, [r7, #36]	@ 0x24
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e0      	bne.n	80075e6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007624:	88bb      	ldrh	r3, [r7, #4]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	701a      	strb	r2, [r3, #0]
  }
}
 8007640:	bf00      	nop
 8007642:	372c      	adds	r7, #44	@ 0x2c
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr

0800764a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7c1b      	ldrb	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d115      	bne.n	800768e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007662:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007666:	2202      	movs	r2, #2
 8007668:	2181      	movs	r1, #129	@ 0x81
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fe81 	bl	8009372 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800767a:	2202      	movs	r2, #2
 800767c:	2101      	movs	r1, #1
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fe77 	bl	8009372 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800768c:	e012      	b.n	80076b4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800768e:	2340      	movs	r3, #64	@ 0x40
 8007690:	2202      	movs	r2, #2
 8007692:	2181      	movs	r1, #129	@ 0x81
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 fe6c 	bl	8009372 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076a0:	2340      	movs	r3, #64	@ 0x40
 80076a2:	2202      	movs	r2, #2
 80076a4:	2101      	movs	r1, #1
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fe63 	bl	8009372 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076b4:	2308      	movs	r3, #8
 80076b6:	2203      	movs	r2, #3
 80076b8:	2182      	movs	r1, #130	@ 0x82
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fe59 	bl	8009372 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076c6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80076ca:	f001 ff79 	bl	80095c0 <USBD_static_malloc>
 80076ce:	4602      	mov	r2, r0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
 80076e4:	e026      	b.n	8007734 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7c1b      	ldrb	r3, [r3, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d109      	bne.n	8007724 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800771a:	2101      	movs	r1, #1
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 ff18 	bl	8009552 <USBD_LL_PrepareReceive>
 8007722:	e007      	b.n	8007734 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800772a:	2340      	movs	r3, #64	@ 0x40
 800772c:	2101      	movs	r1, #1
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 ff0f 	bl	8009552 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800774e:	2181      	movs	r1, #129	@ 0x81
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fe34 	bl	80093be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800775c:	2101      	movs	r1, #1
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fe2d 	bl	80093be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800776c:	2182      	movs	r1, #130	@ 0x82
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fe25 	bl	80093be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00e      	beq.n	80077a2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007794:	4618      	mov	r0, r3
 8007796:	f001 ff1f 	bl	80095d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077bc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d039      	beq.n	800784a <USBD_CDC_Setup+0x9e>
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d17f      	bne.n	80078da <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d029      	beq.n	8007836 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	da11      	bge.n	8007810 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80077f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	88d2      	ldrh	r2, [r2, #6]
 80077fe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007800:	6939      	ldr	r1, [r7, #16]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	88db      	ldrh	r3, [r3, #6]
 8007806:	461a      	mov	r2, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fa05 	bl	8008c18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800780e:	e06b      	b.n	80078e8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	785a      	ldrb	r2, [r3, #1]
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	88db      	ldrh	r3, [r3, #6]
 800781e:	b2da      	uxtb	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007826:	6939      	ldr	r1, [r7, #16]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	88db      	ldrh	r3, [r3, #6]
 800782c:	461a      	mov	r2, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fa20 	bl	8008c74 <USBD_CtlPrepareRx>
      break;
 8007834:	e058      	b.n	80078e8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	7850      	ldrb	r0, [r2, #1]
 8007842:	2200      	movs	r2, #0
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	4798      	blx	r3
      break;
 8007848:	e04e      	b.n	80078e8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b0b      	cmp	r3, #11
 8007850:	d02e      	beq.n	80078b0 <USBD_CDC_Setup+0x104>
 8007852:	2b0b      	cmp	r3, #11
 8007854:	dc38      	bgt.n	80078c8 <USBD_CDC_Setup+0x11c>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <USBD_CDC_Setup+0xb4>
 800785a:	2b0a      	cmp	r3, #10
 800785c:	d014      	beq.n	8007888 <USBD_CDC_Setup+0xdc>
 800785e:	e033      	b.n	80078c8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007866:	2b03      	cmp	r3, #3
 8007868:	d107      	bne.n	800787a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800786a:	f107 030c 	add.w	r3, r7, #12
 800786e:	2202      	movs	r2, #2
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f9d0 	bl	8008c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007878:	e02e      	b.n	80078d8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 f961 	bl	8008b44 <USBD_CtlError>
            ret = USBD_FAIL;
 8007882:	2302      	movs	r3, #2
 8007884:	75fb      	strb	r3, [r7, #23]
          break;
 8007886:	e027      	b.n	80078d8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788e:	2b03      	cmp	r3, #3
 8007890:	d107      	bne.n	80078a2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007892:	f107 030f 	add.w	r3, r7, #15
 8007896:	2201      	movs	r2, #1
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 f9bc 	bl	8008c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078a0:	e01a      	b.n	80078d8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 f94d 	bl	8008b44 <USBD_CtlError>
            ret = USBD_FAIL;
 80078aa:	2302      	movs	r3, #2
 80078ac:	75fb      	strb	r3, [r7, #23]
          break;
 80078ae:	e013      	b.n	80078d8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d00d      	beq.n	80078d6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f941 	bl	8008b44 <USBD_CtlError>
            ret = USBD_FAIL;
 80078c2:	2302      	movs	r3, #2
 80078c4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078c6:	e006      	b.n	80078d6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 f93a 	bl	8008b44 <USBD_CtlError>
          ret = USBD_FAIL;
 80078d0:	2302      	movs	r3, #2
 80078d2:	75fb      	strb	r3, [r7, #23]
          break;
 80078d4:	e000      	b.n	80078d8 <USBD_CDC_Setup+0x12c>
          break;
 80078d6:	bf00      	nop
      }
      break;
 80078d8:	e006      	b.n	80078e8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f931 	bl	8008b44 <USBD_CtlError>
      ret = USBD_FAIL;
 80078e2:	2302      	movs	r3, #2
 80078e4:	75fb      	strb	r3, [r7, #23]
      break;
 80078e6:	bf00      	nop
  }

  return ret;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007904:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800790c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d03a      	beq.n	800798e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	331c      	adds	r3, #28
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d029      	beq.n	8007982 <USBD_CDC_DataIn+0x90>
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	440b      	add	r3, r1
 800793c:	331c      	adds	r3, #28
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	78f9      	ldrb	r1, [r7, #3]
 8007942:	68b8      	ldr	r0, [r7, #8]
 8007944:	460b      	mov	r3, r1
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	4403      	add	r3, r0
 800794e:	3320      	adds	r3, #32
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	fbb2 f1f3 	udiv	r1, r2, r3
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d110      	bne.n	8007982 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	440b      	add	r3, r1
 800796e:	331c      	adds	r3, #28
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007974:	78f9      	ldrb	r1, [r7, #3]
 8007976:	2300      	movs	r3, #0
 8007978:	2200      	movs	r2, #0
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fdc6 	bl	800950c <USBD_LL_Transmit>
 8007980:	e003      	b.n	800798a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	e000      	b.n	8007990 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800798e:	2302      	movs	r3, #2
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fdf1 	bl	8009598 <USBD_LL_GetRxDataSize>
 80079b6:	4602      	mov	r2, r0
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00d      	beq.n	80079e4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80079dc:	4611      	mov	r1, r2
 80079de:	4798      	blx	r3

    return USBD_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	e000      	b.n	80079e6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80079e4:	2302      	movs	r3, #2
  }
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079fc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d014      	beq.n	8007a32 <USBD_CDC_EP0_RxReady+0x44>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007a0e:	2bff      	cmp	r3, #255	@ 0xff
 8007a10:	d00f      	beq.n	8007a32 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007a20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	22ff      	movs	r2, #255	@ 0xff
 8007a2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2243      	movs	r2, #67	@ 0x43
 8007a48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007a4a:	4b03      	ldr	r3, [pc, #12]	@ (8007a58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000094 	.word	0x20000094

08007a5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2243      	movs	r2, #67	@ 0x43
 8007a68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a6a:	4b03      	ldr	r3, [pc, #12]	@ (8007a78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	20000050 	.word	0x20000050

08007a7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2243      	movs	r2, #67	@ 0x43
 8007a88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a8a:	4b03      	ldr	r3, [pc, #12]	@ (8007a98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	200000d8 	.word	0x200000d8

08007a9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	220a      	movs	r2, #10
 8007aa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007aaa:	4b03      	ldr	r3, [pc, #12]	@ (8007ab8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	2000000c 	.word	0x2000000c

08007abc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	4613      	mov	r3, r2
 8007af4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007afc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007b06:	88fa      	ldrh	r2, [r7, #6]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	371c      	adds	r7, #28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr

08007b40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01c      	beq.n	8007b94 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d115      	bne.n	8007b90 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	2181      	movs	r1, #129	@ 0x81
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 fcc0 	bl	800950c <USBD_LL_Transmit>

      return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e002      	b.n	8007b96 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007b94:	2302      	movs	r3, #2
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d017      	beq.n	8007be8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7c1b      	ldrb	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d109      	bne.n	8007bd4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bca:	2101      	movs	r1, #1
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 fcc0 	bl	8009552 <USBD_LL_PrepareReceive>
 8007bd2:	e007      	b.n	8007be4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bda:	2340      	movs	r3, #64	@ 0x40
 8007bdc:	2101      	movs	r1, #1
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fcb7 	bl	8009552 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e000      	b.n	8007bea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c06:	2302      	movs	r3, #2
 8007c08:	e01a      	b.n	8007c40 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	79fa      	ldrb	r2, [r7, #7]
 8007c36:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f001 fb25 	bl	8009288 <USBD_LL_Init>

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d006      	beq.n	8007c6a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
 8007c68:	e001      	b.n	8007c6e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr

08007c7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fb5a 	bl	800933c <USBD_LL_Start>

  return USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr

08007ca6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00c      	beq.n	8007cda <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 fed8 	bl	8008ad2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d30:	461a      	mov	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d016      	beq.n	8007d74 <USBD_LL_SetupStage+0x6a>
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d81c      	bhi.n	8007d84 <USBD_LL_SetupStage+0x7a>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <USBD_LL_SetupStage+0x4a>
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d008      	beq.n	8007d64 <USBD_LL_SetupStage+0x5a>
 8007d52:	e017      	b.n	8007d84 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f9cb 	bl	80080f8 <USBD_StdDevReq>
      break;
 8007d62:	e01a      	b.n	8007d9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa2d 	bl	80081cc <USBD_StdItfReq>
      break;
 8007d72:	e012      	b.n	8007d9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa6d 	bl	800825c <USBD_StdEPReq>
      break;
 8007d82:	e00a      	b.n	8007d9a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007d8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fb32 	bl	80093fc <USBD_LL_StallEP>
      break;
 8007d98:	bf00      	nop
  }

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	460b      	mov	r3, r1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d14b      	bne.n	8007e50 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007dbe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d134      	bne.n	8007e34 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d919      	bls.n	8007e0a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d203      	bcs.n	8007df8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	e002      	b.n	8007dfe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	461a      	mov	r2, r3
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 ff54 	bl	8008cb0 <USBD_CtlContinueRx>
 8007e08:	e038      	b.n	8007e7c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d105      	bne.n	8007e2c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 ff51 	bl	8008cd4 <USBD_CtlSendStatus>
 8007e32:	e023      	b.n	8007e7c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d11e      	bne.n	8007e7c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e46:	2100      	movs	r1, #0
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f001 fad7 	bl	80093fc <USBD_LL_StallEP>
 8007e4e:	e015      	b.n	8007e7c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00d      	beq.n	8007e78 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d108      	bne.n	8007e78 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	7afa      	ldrb	r2, [r7, #11]
 8007e70:	4611      	mov	r1, r2
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	4798      	blx	r3
 8007e76:	e001      	b.n	8007e7c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e000      	b.n	8007e7e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d17f      	bne.n	8007f9a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d15c      	bne.n	8007f64 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d915      	bls.n	8007ee2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 febe 	bl	8008c50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f001 fb39 	bl	8009552 <USBD_LL_PrepareReceive>
 8007ee0:	e04e      	b.n	8007f80 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	6912      	ldr	r2, [r2, #16]
 8007eea:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eee:	fb01 f202 	mul.w	r2, r1, r2
 8007ef2:	1a9b      	subs	r3, r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d11c      	bne.n	8007f32 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d316      	bcc.n	8007f32 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d20f      	bcs.n	8007f32 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f12:	2200      	movs	r2, #0
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fe9a 	bl	8008c50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f24:	2300      	movs	r3, #0
 8007f26:	2200      	movs	r2, #0
 8007f28:	2100      	movs	r1, #0
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f001 fb11 	bl	8009552 <USBD_LL_PrepareReceive>
 8007f30:	e026      	b.n	8007f80 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d105      	bne.n	8007f54 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f54:	2180      	movs	r1, #128	@ 0x80
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f001 fa50 	bl	80093fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fecc 	bl	8008cfa <USBD_CtlReceiveStatus>
 8007f62:	e00d      	b.n	8007f80 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d004      	beq.n	8007f78 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d103      	bne.n	8007f80 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f78:	2180      	movs	r1, #128	@ 0x80
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f001 fa3e 	bl	80093fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d11d      	bne.n	8007fc6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff fe81 	bl	8007c92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007f98:	e015      	b.n	8007fc6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00d      	beq.n	8007fc2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d108      	bne.n	8007fc2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	7afa      	ldrb	r2, [r7, #11]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	4798      	blx	r3
 8007fc0:	e001      	b.n	8007fc6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e000      	b.n	8007fc8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fd8:	2340      	movs	r3, #64	@ 0x40
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 f9c7 	bl	8009372 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2240      	movs	r2, #64	@ 0x40
 8007ff0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ff4:	2340      	movs	r3, #64	@ 0x40
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2180      	movs	r1, #128	@ 0x80
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 f9b9 	bl	8009372 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2240      	movs	r2, #64	@ 0x40
 800800a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d009      	beq.n	8008048 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6852      	ldr	r2, [r2, #4]
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	4611      	mov	r1, r2
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	4798      	blx	r3
  }

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr

08008070 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2204      	movs	r2, #4
 8008088:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr

08008098 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d105      	bne.n	80080b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	bc80      	pop	{r7}
 80080c0:	4770      	bx	lr

080080c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d10b      	bne.n	80080ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800810e:	2b40      	cmp	r3, #64	@ 0x40
 8008110:	d005      	beq.n	800811e <USBD_StdDevReq+0x26>
 8008112:	2b40      	cmp	r3, #64	@ 0x40
 8008114:	d84f      	bhi.n	80081b6 <USBD_StdDevReq+0xbe>
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <USBD_StdDevReq+0x36>
 800811a:	2b20      	cmp	r3, #32
 800811c:	d14b      	bne.n	80081b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
      break;
 800812c:	e048      	b.n	80081c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b09      	cmp	r3, #9
 8008134:	d839      	bhi.n	80081aa <USBD_StdDevReq+0xb2>
 8008136:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <USBD_StdDevReq+0x44>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	0800818d 	.word	0x0800818d
 8008140:	080081a1 	.word	0x080081a1
 8008144:	080081ab 	.word	0x080081ab
 8008148:	08008197 	.word	0x08008197
 800814c:	080081ab 	.word	0x080081ab
 8008150:	0800816f 	.word	0x0800816f
 8008154:	08008165 	.word	0x08008165
 8008158:	080081ab 	.word	0x080081ab
 800815c:	08008183 	.word	0x08008183
 8008160:	08008179 	.word	0x08008179
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9dc 	bl	8008524 <USBD_GetDescriptor>
          break;
 800816c:	e022      	b.n	80081b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fb3f 	bl	80087f4 <USBD_SetAddress>
          break;
 8008176:	e01d      	b.n	80081b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fb7e 	bl	800887c <USBD_SetConfig>
          break;
 8008180:	e018      	b.n	80081b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fc07 	bl	8008998 <USBD_GetConfig>
          break;
 800818a:	e013      	b.n	80081b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fc37 	bl	8008a02 <USBD_GetStatus>
          break;
 8008194:	e00e      	b.n	80081b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc65 	bl	8008a68 <USBD_SetFeature>
          break;
 800819e:	e009      	b.n	80081b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fc74 	bl	8008a90 <USBD_ClrFeature>
          break;
 80081a8:	e004      	b.n	80081b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fcc9 	bl	8008b44 <USBD_CtlError>
          break;
 80081b2:	bf00      	nop
      }
      break;
 80081b4:	e004      	b.n	80081c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fcc3 	bl	8008b44 <USBD_CtlError>
      break;
 80081be:	bf00      	nop
  }

  return ret;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop

080081cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081e2:	2b40      	cmp	r3, #64	@ 0x40
 80081e4:	d005      	beq.n	80081f2 <USBD_StdItfReq+0x26>
 80081e6:	2b40      	cmp	r3, #64	@ 0x40
 80081e8:	d82e      	bhi.n	8008248 <USBD_StdItfReq+0x7c>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <USBD_StdItfReq+0x26>
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d12a      	bne.n	8008248 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f8:	3b01      	subs	r3, #1
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d81d      	bhi.n	800823a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	889b      	ldrh	r3, [r3, #4]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	d813      	bhi.n	8008230 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	4798      	blx	r3
 8008216:	4603      	mov	r3, r0
 8008218:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	88db      	ldrh	r3, [r3, #6]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d110      	bne.n	8008244 <USBD_StdItfReq+0x78>
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10d      	bne.n	8008244 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fd53 	bl	8008cd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800822e:	e009      	b.n	8008244 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fc86 	bl	8008b44 <USBD_CtlError>
          break;
 8008238:	e004      	b.n	8008244 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fc81 	bl	8008b44 <USBD_CtlError>
          break;
 8008242:	e000      	b.n	8008246 <USBD_StdItfReq+0x7a>
          break;
 8008244:	bf00      	nop
      }
      break;
 8008246:	e004      	b.n	8008252 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fc7a 	bl	8008b44 <USBD_CtlError>
      break;
 8008250:	bf00      	nop
  }

  return USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	889b      	ldrh	r3, [r3, #4]
 800826e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008278:	2b40      	cmp	r3, #64	@ 0x40
 800827a:	d007      	beq.n	800828c <USBD_StdEPReq+0x30>
 800827c:	2b40      	cmp	r3, #64	@ 0x40
 800827e:	f200 8146 	bhi.w	800850e <USBD_StdEPReq+0x2b2>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <USBD_StdEPReq+0x40>
 8008286:	2b20      	cmp	r3, #32
 8008288:	f040 8141 	bne.w	800850e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
      break;
 800829a:	e13d      	b.n	8008518 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d10a      	bne.n	80082be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	e12d      	b.n	800851a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	785b      	ldrb	r3, [r3, #1]
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d007      	beq.n	80082d6 <USBD_StdEPReq+0x7a>
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	f300 811b 	bgt.w	8008502 <USBD_StdEPReq+0x2a6>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d072      	beq.n	80083b6 <USBD_StdEPReq+0x15a>
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d03a      	beq.n	800834a <USBD_StdEPReq+0xee>
 80082d4:	e115      	b.n	8008502 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d002      	beq.n	80082e6 <USBD_StdEPReq+0x8a>
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d015      	beq.n	8008310 <USBD_StdEPReq+0xb4>
 80082e4:	e02b      	b.n	800833e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00c      	beq.n	8008306 <USBD_StdEPReq+0xaa>
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b80      	cmp	r3, #128	@ 0x80
 80082f0:	d009      	beq.n	8008306 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 f880 	bl	80093fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082fc:	2180      	movs	r1, #128	@ 0x80
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 f87c 	bl	80093fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008304:	e020      	b.n	8008348 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fc1b 	bl	8008b44 <USBD_CtlError>
              break;
 800830e:	e01b      	b.n	8008348 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	885b      	ldrh	r3, [r3, #2]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10e      	bne.n	8008336 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <USBD_StdEPReq+0xda>
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b80      	cmp	r3, #128	@ 0x80
 8008322:	d008      	beq.n	8008336 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	88db      	ldrh	r3, [r3, #6]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f863 	bl	80093fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fccc 	bl	8008cd4 <USBD_CtlSendStatus>

              break;
 800833c:	e004      	b.n	8008348 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fbff 	bl	8008b44 <USBD_CtlError>
              break;
 8008346:	bf00      	nop
          }
          break;
 8008348:	e0e0      	b.n	800850c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008350:	2b02      	cmp	r3, #2
 8008352:	d002      	beq.n	800835a <USBD_StdEPReq+0xfe>
 8008354:	2b03      	cmp	r3, #3
 8008356:	d015      	beq.n	8008384 <USBD_StdEPReq+0x128>
 8008358:	e026      	b.n	80083a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00c      	beq.n	800837a <USBD_StdEPReq+0x11e>
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	2b80      	cmp	r3, #128	@ 0x80
 8008364:	d009      	beq.n	800837a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 f846 	bl	80093fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008370:	2180      	movs	r1, #128	@ 0x80
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 f842 	bl	80093fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008378:	e01c      	b.n	80083b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fbe1 	bl	8008b44 <USBD_CtlError>
              break;
 8008382:	e017      	b.n	80083b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	885b      	ldrh	r3, [r3, #2]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d112      	bne.n	80083b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008392:	2b00      	cmp	r3, #0
 8008394:	d004      	beq.n	80083a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 f84d 	bl	800943a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fc97 	bl	8008cd4 <USBD_CtlSendStatus>
              }
              break;
 80083a6:	e004      	b.n	80083b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fbca 	bl	8008b44 <USBD_CtlError>
              break;
 80083b0:	e000      	b.n	80083b4 <USBD_StdEPReq+0x158>
              break;
 80083b2:	bf00      	nop
          }
          break;
 80083b4:	e0aa      	b.n	800850c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d002      	beq.n	80083c6 <USBD_StdEPReq+0x16a>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d032      	beq.n	800842a <USBD_StdEPReq+0x1ce>
 80083c4:	e097      	b.n	80084f6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <USBD_StdEPReq+0x180>
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b80      	cmp	r3, #128	@ 0x80
 80083d0:	d004      	beq.n	80083dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fbb5 	bl	8008b44 <USBD_CtlError>
                break;
 80083da:	e091      	b.n	8008500 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da0b      	bge.n	80083fc <USBD_StdEPReq+0x1a0>
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	3310      	adds	r3, #16
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	3304      	adds	r3, #4
 80083fa:	e00b      	b.n	8008414 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	3304      	adds	r3, #4
 8008414:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2202      	movs	r2, #2
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fbf8 	bl	8008c18 <USBD_CtlSendData>
              break;
 8008428:	e06a      	b.n	8008500 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800842a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800842e:	2b00      	cmp	r3, #0
 8008430:	da11      	bge.n	8008456 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	440b      	add	r3, r1
 8008444:	3318      	adds	r3, #24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d117      	bne.n	800847c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fb78 	bl	8008b44 <USBD_CtlError>
                  break;
 8008454:	e054      	b.n	8008500 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	f003 020f 	and.w	r2, r3, #15
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	440b      	add	r3, r1
 8008468:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fb65 	bl	8008b44 <USBD_CtlError>
                  break;
 800847a:	e041      	b.n	8008500 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800847c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008480:	2b00      	cmp	r3, #0
 8008482:	da0b      	bge.n	800849c <USBD_StdEPReq+0x240>
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	3310      	adds	r3, #16
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	4413      	add	r3, r2
 8008498:	3304      	adds	r3, #4
 800849a:	e00b      	b.n	80084b4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	3304      	adds	r3, #4
 80084b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <USBD_StdEPReq+0x266>
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b80      	cmp	r3, #128	@ 0x80
 80084c0:	d103      	bne.n	80084ca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	e00e      	b.n	80084e8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 ffd2 	bl	8009478 <USBD_LL_IsStallEP>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e002      	b.n	80084e8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2202      	movs	r2, #2
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb92 	bl	8008c18 <USBD_CtlSendData>
              break;
 80084f4:	e004      	b.n	8008500 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fb23 	bl	8008b44 <USBD_CtlError>
              break;
 80084fe:	bf00      	nop
          }
          break;
 8008500:	e004      	b.n	800850c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fb1d 	bl	8008b44 <USBD_CtlError>
          break;
 800850a:	bf00      	nop
      }
      break;
 800850c:	e004      	b.n	8008518 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb17 	bl	8008b44 <USBD_CtlError>
      break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	885b      	ldrh	r3, [r3, #2]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	2b06      	cmp	r3, #6
 8008546:	f200 8128 	bhi.w	800879a <USBD_GetDescriptor+0x276>
 800854a:	a201      	add	r2, pc, #4	@ (adr r2, 8008550 <USBD_GetDescriptor+0x2c>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	0800856d 	.word	0x0800856d
 8008554:	08008585 	.word	0x08008585
 8008558:	080085c5 	.word	0x080085c5
 800855c:	0800879b 	.word	0x0800879b
 8008560:	0800879b 	.word	0x0800879b
 8008564:	0800873b 	.word	0x0800873b
 8008568:	08008767 	.word	0x08008767
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7c12      	ldrb	r2, [r2, #16]
 8008578:	f107 0108 	add.w	r1, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
      break;
 8008582:	e112      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	7c1b      	ldrb	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10d      	bne.n	80085a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008594:	f107 0208 	add.w	r2, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	2202      	movs	r2, #2
 80085a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085a6:	e100      	b.n	80087aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b0:	f107 0208 	add.w	r2, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3301      	adds	r3, #1
 80085be:	2202      	movs	r2, #2
 80085c0:	701a      	strb	r2, [r3, #0]
      break;
 80085c2:	e0f2      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	885b      	ldrh	r3, [r3, #2]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	f200 80ac 	bhi.w	8008728 <USBD_GetDescriptor+0x204>
 80085d0:	a201      	add	r2, pc, #4	@ (adr r2, 80085d8 <USBD_GetDescriptor+0xb4>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	08008625 	.word	0x08008625
 80085e0:	08008659 	.word	0x08008659
 80085e4:	0800868d 	.word	0x0800868d
 80085e8:	080086c1 	.word	0x080086c1
 80085ec:	080086f5 	.word	0x080086f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	7c12      	ldrb	r2, [r2, #16]
 8008608:	f107 0108 	add.w	r1, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008612:	e091      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fa94 	bl	8008b44 <USBD_CtlError>
            err++;
 800861c:	7afb      	ldrb	r3, [r7, #11]
 800861e:	3301      	adds	r3, #1
 8008620:	72fb      	strb	r3, [r7, #11]
          break;
 8008622:	e089      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7c12      	ldrb	r2, [r2, #16]
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
 8008644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008646:	e077      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa7a 	bl	8008b44 <USBD_CtlError>
            err++;
 8008650:	7afb      	ldrb	r3, [r7, #11]
 8008652:	3301      	adds	r3, #1
 8008654:	72fb      	strb	r3, [r7, #11]
          break;
 8008656:	e06f      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867a:	e05d      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa60 	bl	8008b44 <USBD_CtlError>
            err++;
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	3301      	adds	r3, #1
 8008688:	72fb      	strb	r3, [r7, #11]
          break;
 800868a:	e055      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e043      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa46 	bl	8008b44 <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e03b      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e029      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa2c 	bl	8008b44 <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e021      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e00f      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa12 	bl	8008b44 <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e007      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa0a 	bl	8008b44 <USBD_CtlError>
          err++;
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	3301      	adds	r3, #1
 8008734:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008736:	e038      	b.n	80087aa <USBD_GetDescriptor+0x286>
 8008738:	e037      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	7c1b      	ldrb	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874a:	f107 0208 	add.w	r2, r7, #8
 800874e:	4610      	mov	r0, r2
 8008750:	4798      	blx	r3
 8008752:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008754:	e029      	b.n	80087aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9f3 	bl	8008b44 <USBD_CtlError>
        err++;
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	3301      	adds	r3, #1
 8008762:	72fb      	strb	r3, [r7, #11]
      break;
 8008764:	e021      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7c1b      	ldrb	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10d      	bne.n	800878a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008776:	f107 0208 	add.w	r2, r7, #8
 800877a:	4610      	mov	r0, r2
 800877c:	4798      	blx	r3
 800877e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3301      	adds	r3, #1
 8008784:	2207      	movs	r2, #7
 8008786:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008788:	e00f      	b.n	80087aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f9d9 	bl	8008b44 <USBD_CtlError>
        err++;
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	3301      	adds	r3, #1
 8008796:	72fb      	strb	r3, [r7, #11]
      break;
 8008798:	e007      	b.n	80087aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f9d1 	bl	8008b44 <USBD_CtlError>
      err++;
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	3301      	adds	r3, #1
 80087a6:	72fb      	strb	r3, [r7, #11]
      break;
 80087a8:	bf00      	nop
  }

  if (err != 0U)
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11c      	bne.n	80087ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80087b0:	893b      	ldrh	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d011      	beq.n	80087da <USBD_GetDescriptor+0x2b6>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88db      	ldrh	r3, [r3, #6]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00d      	beq.n	80087da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88da      	ldrh	r2, [r3, #6]
 80087c2:	893b      	ldrh	r3, [r7, #8]
 80087c4:	4293      	cmp	r3, r2
 80087c6:	bf28      	it	cs
 80087c8:	4613      	movcs	r3, r2
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087ce:	893b      	ldrh	r3, [r7, #8]
 80087d0:	461a      	mov	r2, r3
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fa1f 	bl	8008c18 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	88db      	ldrh	r3, [r3, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d104      	bne.n	80087ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa76 	bl	8008cd4 <USBD_CtlSendStatus>
 80087e8:	e000      	b.n	80087ec <USBD_GetDescriptor+0x2c8>
    return;
 80087ea:	bf00      	nop
    }
  }
}
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop

080087f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	889b      	ldrh	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d130      	bne.n	8008868 <USBD_SetAddress+0x74>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88db      	ldrh	r3, [r3, #6]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d12c      	bne.n	8008868 <USBD_SetAddress+0x74>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	885b      	ldrh	r3, [r3, #2]
 8008812:	2b7f      	cmp	r3, #127	@ 0x7f
 8008814:	d828      	bhi.n	8008868 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008820:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008828:	2b03      	cmp	r3, #3
 800882a:	d104      	bne.n	8008836 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f988 	bl	8008b44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008834:	e01d      	b.n	8008872 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7bfa      	ldrb	r2, [r7, #15]
 800883a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fe43 	bl	80094ce <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa43 	bl	8008cd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885c:	e009      	b.n	8008872 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008866:	e004      	b.n	8008872 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f96a 	bl	8008b44 <USBD_CtlError>
  }
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	b2da      	uxtb	r2, r3
 800888c:	4b41      	ldr	r3, [pc, #260]	@ (8008994 <USBD_SetConfig+0x118>)
 800888e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008890:	4b40      	ldr	r3, [pc, #256]	@ (8008994 <USBD_SetConfig+0x118>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d904      	bls.n	80088a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f952 	bl	8008b44 <USBD_CtlError>
 80088a0:	e075      	b.n	800898e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d002      	beq.n	80088b2 <USBD_SetConfig+0x36>
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d023      	beq.n	80088f8 <USBD_SetConfig+0x7c>
 80088b0:	e062      	b.n	8008978 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088b2:	4b38      	ldr	r3, [pc, #224]	@ (8008994 <USBD_SetConfig+0x118>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d01a      	beq.n	80088f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80088ba:	4b36      	ldr	r3, [pc, #216]	@ (8008994 <USBD_SetConfig+0x118>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2203      	movs	r2, #3
 80088c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088cc:	4b31      	ldr	r3, [pc, #196]	@ (8008994 <USBD_SetConfig+0x118>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff f9e7 	bl	8007ca6 <USBD_SetClassConfig>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d104      	bne.n	80088e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f92f 	bl	8008b44 <USBD_CtlError>
            return;
 80088e6:	e052      	b.n	800898e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f9f3 	bl	8008cd4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088ee:	e04e      	b.n	800898e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f9ef 	bl	8008cd4 <USBD_CtlSendStatus>
        break;
 80088f6:	e04a      	b.n	800898e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088f8:	4b26      	ldr	r3, [pc, #152]	@ (8008994 <USBD_SetConfig+0x118>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d112      	bne.n	8008926 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008908:	4b22      	ldr	r3, [pc, #136]	@ (8008994 <USBD_SetConfig+0x118>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008912:	4b20      	ldr	r3, [pc, #128]	@ (8008994 <USBD_SetConfig+0x118>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff f9e3 	bl	8007ce4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9d8 	bl	8008cd4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008924:	e033      	b.n	800898e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008926:	4b1b      	ldr	r3, [pc, #108]	@ (8008994 <USBD_SetConfig+0x118>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d01d      	beq.n	8008970 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7ff f9d1 	bl	8007ce4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008942:	4b14      	ldr	r3, [pc, #80]	@ (8008994 <USBD_SetConfig+0x118>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800894c:	4b11      	ldr	r3, [pc, #68]	@ (8008994 <USBD_SetConfig+0x118>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff f9a7 	bl	8007ca6 <USBD_SetClassConfig>
 8008958:	4603      	mov	r3, r0
 800895a:	2b02      	cmp	r3, #2
 800895c:	d104      	bne.n	8008968 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f8ef 	bl	8008b44 <USBD_CtlError>
            return;
 8008966:	e012      	b.n	800898e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f9b3 	bl	8008cd4 <USBD_CtlSendStatus>
        break;
 800896e:	e00e      	b.n	800898e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f9af 	bl	8008cd4 <USBD_CtlSendStatus>
        break;
 8008976:	e00a      	b.n	800898e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f8e2 	bl	8008b44 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008980:	4b04      	ldr	r3, [pc, #16]	@ (8008994 <USBD_SetConfig+0x118>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff f9ac 	bl	8007ce4 <USBD_ClrClassConfig>
        break;
 800898c:	bf00      	nop
    }
  }
}
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20000364 	.word	0x20000364

08008998 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	88db      	ldrh	r3, [r3, #6]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d004      	beq.n	80089b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f8c9 	bl	8008b44 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089b2:	e022      	b.n	80089fa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	dc02      	bgt.n	80089c4 <USBD_GetConfig+0x2c>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	dc03      	bgt.n	80089ca <USBD_GetConfig+0x32>
 80089c2:	e015      	b.n	80089f0 <USBD_GetConfig+0x58>
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d00b      	beq.n	80089e0 <USBD_GetConfig+0x48>
 80089c8:	e012      	b.n	80089f0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3308      	adds	r3, #8
 80089d4:	2201      	movs	r2, #1
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f91d 	bl	8008c18 <USBD_CtlSendData>
        break;
 80089de:	e00c      	b.n	80089fa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	2201      	movs	r2, #1
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f915 	bl	8008c18 <USBD_CtlSendData>
        break;
 80089ee:	e004      	b.n	80089fa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f8a6 	bl	8008b44 <USBD_CtlError>
        break;
 80089f8:	bf00      	nop
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a12:	3b01      	subs	r3, #1
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d81e      	bhi.n	8008a56 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	88db      	ldrh	r3, [r3, #6]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d004      	beq.n	8008a2a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f88e 	bl	8008b44 <USBD_CtlError>
        break;
 8008a28:	e01a      	b.n	8008a60 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f043 0202 	orr.w	r2, r3, #2
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f8e2 	bl	8008c18 <USBD_CtlSendData>
      break;
 8008a54:	e004      	b.n	8008a60 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f873 	bl	8008b44 <USBD_CtlError>
      break;
 8008a5e:	bf00      	nop
  }
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	885b      	ldrh	r3, [r3, #2]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d106      	bne.n	8008a88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f926 	bl	8008cd4 <USBD_CtlSendStatus>
  }
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d80b      	bhi.n	8008abe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d10c      	bne.n	8008ac8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f90c 	bl	8008cd4 <USBD_CtlSendStatus>
      }
      break;
 8008abc:	e004      	b.n	8008ac8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f83f 	bl	8008b44 <USBD_CtlError>
      break;
 8008ac6:	e000      	b.n	8008aca <USBD_ClrFeature+0x3a>
      break;
 8008ac8:	bf00      	nop
  }
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	785a      	ldrb	r2, [r3, #1]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	3302      	adds	r3, #2
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	3303      	adds	r3, #3
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	3305      	adds	r3, #5
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	4413      	add	r3, r2
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	3306      	adds	r3, #6
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	3307      	adds	r3, #7
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	80da      	strh	r2, [r3, #6]

}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b4e:	2180      	movs	r1, #128	@ 0x80
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fc53 	bl	80093fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b56:	2100      	movs	r1, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fc4f 	bl	80093fc <USBD_LL_StallEP>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d032      	beq.n	8008be2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f834 	bl	8008bea <USBD_GetLen>
 8008b82:	4603      	mov	r3, r0
 8008b84:	3301      	adds	r3, #1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	75fa      	strb	r2, [r7, #23]
 8008b96:	461a      	mov	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	75fa      	strb	r2, [r7, #23]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	2203      	movs	r2, #3
 8008bb0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bb2:	e012      	b.n	8008bda <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	60fa      	str	r2, [r7, #12]
 8008bba:	7dfa      	ldrb	r2, [r7, #23]
 8008bbc:	1c51      	adds	r1, r2, #1
 8008bbe:	75f9      	strb	r1, [r7, #23]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	75fa      	strb	r2, [r7, #23]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e8      	bne.n	8008bb4 <USBD_GetString+0x4e>
    }
  }
}
 8008be2:	bf00      	nop
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008bf6:	e005      	b.n	8008c04 <USBD_GetLen+0x1a>
  {
    len++;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3301      	adds	r3, #1
 8008c02:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1f5      	bne.n	8008bf8 <USBD_GetLen+0xe>
  }

  return len;
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr

08008c18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c2e:	88fa      	ldrh	r2, [r7, #6]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c34:	88fa      	ldrh	r2, [r7, #6]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	2100      	movs	r1, #0
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fc63 	bl	800950c <USBD_LL_Transmit>

  return USBD_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c5e:	88fb      	ldrh	r3, [r7, #6]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	2100      	movs	r1, #0
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fc51 	bl	800950c <USBD_LL_Transmit>

  return USBD_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2203      	movs	r2, #3
 8008c86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008c8a:	88fa      	ldrh	r2, [r7, #6]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c9a:	88fb      	ldrh	r3, [r7, #6]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fc56 	bl	8009552 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cbe:	88fb      	ldrh	r3, [r7, #6]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fc44 	bl	8009552 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fc0e 	bl	800950c <USBD_LL_Transmit>

  return USBD_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2205      	movs	r2, #5
 8008d06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2100      	movs	r1, #0
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fc1e 	bl	8009552 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d24:	2200      	movs	r2, #0
 8008d26:	4912      	ldr	r1, [pc, #72]	@ (8008d70 <MX_USB_DEVICE_Init+0x50>)
 8008d28:	4812      	ldr	r0, [pc, #72]	@ (8008d74 <MX_USB_DEVICE_Init+0x54>)
 8008d2a:	f7fe ff62 	bl	8007bf2 <USBD_Init>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d34:	f7f8 f8d8 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d38:	490f      	ldr	r1, [pc, #60]	@ (8008d78 <MX_USB_DEVICE_Init+0x58>)
 8008d3a:	480e      	ldr	r0, [pc, #56]	@ (8008d74 <MX_USB_DEVICE_Init+0x54>)
 8008d3c:	f7fe ff84 	bl	8007c48 <USBD_RegisterClass>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d46:	f7f8 f8cf 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d4a:	490c      	ldr	r1, [pc, #48]	@ (8008d7c <MX_USB_DEVICE_Init+0x5c>)
 8008d4c:	4809      	ldr	r0, [pc, #36]	@ (8008d74 <MX_USB_DEVICE_Init+0x54>)
 8008d4e:	f7fe feb5 	bl	8007abc <USBD_CDC_RegisterInterface>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d58:	f7f8 f8c6 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d5c:	4805      	ldr	r0, [pc, #20]	@ (8008d74 <MX_USB_DEVICE_Init+0x54>)
 8008d5e:	f7fe ff8c 	bl	8007c7a <USBD_Start>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d68:	f7f8 f8be 	bl	8000ee8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d6c:	bf00      	nop
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2000012c 	.word	0x2000012c
 8008d74:	20000368 	.word	0x20000368
 8008d78:	20000018 	.word	0x20000018
 8008d7c:	2000011c 	.word	0x2000011c

08008d80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d84:	2200      	movs	r2, #0
 8008d86:	4905      	ldr	r1, [pc, #20]	@ (8008d9c <CDC_Init_FS+0x1c>)
 8008d88:	4805      	ldr	r0, [pc, #20]	@ (8008da0 <CDC_Init_FS+0x20>)
 8008d8a:	f7fe fead 	bl	8007ae8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d8e:	4905      	ldr	r1, [pc, #20]	@ (8008da4 <CDC_Init_FS+0x24>)
 8008d90:	4803      	ldr	r0, [pc, #12]	@ (8008da0 <CDC_Init_FS+0x20>)
 8008d92:	f7fe fec2 	bl	8007b1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20000a2c 	.word	0x20000a2c
 8008da0:	20000368 	.word	0x20000368
 8008da4:	2000062c 	.word	0x2000062c

08008da8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008da8:	b480      	push	{r7}
 8008daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr
	...

08008db8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	2b23      	cmp	r3, #35	@ 0x23
 8008dcc:	d84a      	bhi.n	8008e64 <CDC_Control_FS+0xac>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <CDC_Control_FS+0x1c>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e65 	.word	0x08008e65
 8008dd8:	08008e65 	.word	0x08008e65
 8008ddc:	08008e65 	.word	0x08008e65
 8008de0:	08008e65 	.word	0x08008e65
 8008de4:	08008e65 	.word	0x08008e65
 8008de8:	08008e65 	.word	0x08008e65
 8008dec:	08008e65 	.word	0x08008e65
 8008df0:	08008e65 	.word	0x08008e65
 8008df4:	08008e65 	.word	0x08008e65
 8008df8:	08008e65 	.word	0x08008e65
 8008dfc:	08008e65 	.word	0x08008e65
 8008e00:	08008e65 	.word	0x08008e65
 8008e04:	08008e65 	.word	0x08008e65
 8008e08:	08008e65 	.word	0x08008e65
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	08008e65 	.word	0x08008e65
 8008e14:	08008e65 	.word	0x08008e65
 8008e18:	08008e65 	.word	0x08008e65
 8008e1c:	08008e65 	.word	0x08008e65
 8008e20:	08008e65 	.word	0x08008e65
 8008e24:	08008e65 	.word	0x08008e65
 8008e28:	08008e65 	.word	0x08008e65
 8008e2c:	08008e65 	.word	0x08008e65
 8008e30:	08008e65 	.word	0x08008e65
 8008e34:	08008e65 	.word	0x08008e65
 8008e38:	08008e65 	.word	0x08008e65
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	08008e65 	.word	0x08008e65
 8008e44:	08008e65 	.word	0x08008e65
 8008e48:	08008e65 	.word	0x08008e65
 8008e4c:	08008e65 	.word	0x08008e65
 8008e50:	08008e65 	.word	0x08008e65
 8008e54:	08008e65 	.word	0x08008e65
 8008e58:	08008e65 	.word	0x08008e65
 8008e5c:	08008e65 	.word	0x08008e65
 8008e60:	08008e65 	.word	0x08008e65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e64:	bf00      	nop
  }

  return (USBD_OK);
 8008e66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop

08008e74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	4805      	ldr	r0, [pc, #20]	@ (8008e98 <CDC_Receive_FS+0x24>)
 8008e82:	f7fe fe4a 	bl	8007b1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e86:	4804      	ldr	r0, [pc, #16]	@ (8008e98 <CDC_Receive_FS+0x24>)
 8008e88:	f7fe fe89 	bl	8007b9e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000368 	.word	0x20000368

08008e9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008eac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee4 <CDC_Transmit_FS+0x48>)
 8008eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e00b      	b.n	8008eda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ec2:	887b      	ldrh	r3, [r7, #2]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4806      	ldr	r0, [pc, #24]	@ (8008ee4 <CDC_Transmit_FS+0x48>)
 8008eca:	f7fe fe0d 	bl	8007ae8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ece:	4805      	ldr	r0, [pc, #20]	@ (8008ee4 <CDC_Transmit_FS+0x48>)
 8008ed0:	f7fe fe36 	bl	8007b40 <USBD_CDC_TransmitPacket>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000368 	.word	0x20000368

08008ee8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2212      	movs	r2, #18
 8008ef8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008efa:	4b03      	ldr	r3, [pc, #12]	@ (8008f08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	20000148 	.word	0x20000148

08008f0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2204      	movs	r2, #4
 8008f1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f1e:	4b03      	ldr	r3, [pc, #12]	@ (8008f2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bc80      	pop	{r7}
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	2000015c 	.word	0x2000015c

08008f30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	6039      	str	r1, [r7, #0]
 8008f3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d105      	bne.n	8008f4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4907      	ldr	r1, [pc, #28]	@ (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f46:	4808      	ldr	r0, [pc, #32]	@ (8008f68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f48:	f7ff fe0d 	bl	8008b66 <USBD_GetString>
 8008f4c:	e004      	b.n	8008f58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4904      	ldr	r1, [pc, #16]	@ (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f52:	4805      	ldr	r0, [pc, #20]	@ (8008f68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f54:	f7ff fe07 	bl	8008b66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f58:	4b02      	ldr	r3, [pc, #8]	@ (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000e2c 	.word	0x20000e2c
 8008f68:	0800a038 	.word	0x0800a038

08008f6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	4904      	ldr	r1, [pc, #16]	@ (8008f8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f7c:	4804      	ldr	r0, [pc, #16]	@ (8008f90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f7e:	f7ff fdf2 	bl	8008b66 <USBD_GetString>
  return USBD_StrDesc;
 8008f82:	4b02      	ldr	r3, [pc, #8]	@ (8008f8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000e2c 	.word	0x20000e2c
 8008f90:	0800a04c 	.word	0x0800a04c

08008f94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	221a      	movs	r2, #26
 8008fa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fa6:	f000 f843 	bl	8009030 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008faa:	4b02      	ldr	r3, [pc, #8]	@ (8008fb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000160 	.word	0x20000160

08008fb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	6039      	str	r1, [r7, #0]
 8008fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4907      	ldr	r1, [pc, #28]	@ (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fce:	4808      	ldr	r0, [pc, #32]	@ (8008ff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fd0:	f7ff fdc9 	bl	8008b66 <USBD_GetString>
 8008fd4:	e004      	b.n	8008fe0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4904      	ldr	r1, [pc, #16]	@ (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fda:	4805      	ldr	r0, [pc, #20]	@ (8008ff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fdc:	f7ff fdc3 	bl	8008b66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe0:	4b02      	ldr	r3, [pc, #8]	@ (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20000e2c 	.word	0x20000e2c
 8008ff0:	0800a060 	.word	0x0800a060

08008ff4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d105      	bne.n	8009012 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4907      	ldr	r1, [pc, #28]	@ (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800900a:	4808      	ldr	r0, [pc, #32]	@ (800902c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800900c:	f7ff fdab 	bl	8008b66 <USBD_GetString>
 8009010:	e004      	b.n	800901c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4904      	ldr	r1, [pc, #16]	@ (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009016:	4805      	ldr	r0, [pc, #20]	@ (800902c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009018:	f7ff fda5 	bl	8008b66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800901c:	4b02      	ldr	r3, [pc, #8]	@ (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000e2c 	.word	0x20000e2c
 800902c:	0800a06c 	.word	0x0800a06c

08009030 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009036:	4b0f      	ldr	r3, [pc, #60]	@ (8009074 <Get_SerialNum+0x44>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800903c:	4b0e      	ldr	r3, [pc, #56]	@ (8009078 <Get_SerialNum+0x48>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009042:	4b0e      	ldr	r3, [pc, #56]	@ (800907c <Get_SerialNum+0x4c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009056:	2208      	movs	r2, #8
 8009058:	4909      	ldr	r1, [pc, #36]	@ (8009080 <Get_SerialNum+0x50>)
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 f814 	bl	8009088 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009060:	2204      	movs	r2, #4
 8009062:	4908      	ldr	r1, [pc, #32]	@ (8009084 <Get_SerialNum+0x54>)
 8009064:	68b8      	ldr	r0, [r7, #8]
 8009066:	f000 f80f 	bl	8009088 <IntToUnicode>
  }
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	1ffff7e8 	.word	0x1ffff7e8
 8009078:	1ffff7ec 	.word	0x1ffff7ec
 800907c:	1ffff7f0 	.word	0x1ffff7f0
 8009080:	20000162 	.word	0x20000162
 8009084:	20000172 	.word	0x20000172

08009088 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800909a:	2300      	movs	r3, #0
 800909c:	75fb      	strb	r3, [r7, #23]
 800909e:	e027      	b.n	80090f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	0f1b      	lsrs	r3, r3, #28
 80090a4:	2b09      	cmp	r3, #9
 80090a6:	d80b      	bhi.n	80090c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	0f1b      	lsrs	r3, r3, #28
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	4619      	mov	r1, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	440b      	add	r3, r1
 80090b8:	3230      	adds	r2, #48	@ 0x30
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e00a      	b.n	80090d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	0f1b      	lsrs	r3, r3, #28
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	4619      	mov	r1, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	440b      	add	r3, r1
 80090d0:	3237      	adds	r2, #55	@ 0x37
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	011b      	lsls	r3, r3, #4
 80090da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	3301      	adds	r3, #1
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	4413      	add	r3, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	3301      	adds	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
 80090f0:	7dfa      	ldrb	r2, [r7, #23]
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d3d3      	bcc.n	80090a0 <IntToUnicode+0x18>
  }
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	bc80      	pop	{r7}
 8009102:	4770      	bx	lr

08009104 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a0d      	ldr	r2, [pc, #52]	@ (8009148 <HAL_PCD_MspInit+0x44>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d113      	bne.n	800913e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009116:	4b0d      	ldr	r3, [pc, #52]	@ (800914c <HAL_PCD_MspInit+0x48>)
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	4a0c      	ldr	r2, [pc, #48]	@ (800914c <HAL_PCD_MspInit+0x48>)
 800911c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009120:	61d3      	str	r3, [r2, #28]
 8009122:	4b0a      	ldr	r3, [pc, #40]	@ (800914c <HAL_PCD_MspInit+0x48>)
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800912e:	2200      	movs	r2, #0
 8009130:	2100      	movs	r1, #0
 8009132:	2014      	movs	r0, #20
 8009134:	f7f8 ffc9 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009138:	2014      	movs	r0, #20
 800913a:	f7f8 ffe2 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800913e:	bf00      	nop
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40005c00 	.word	0x40005c00
 800914c:	40021000 	.word	0x40021000

08009150 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009164:	4619      	mov	r1, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f7fe fdcf 	bl	8007d0a <USBD_LL_SetupStage>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	440b      	add	r3, r1
 8009194:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	4619      	mov	r1, r3
 800919e:	f7fe fe01 	bl	8007da4 <USBD_LL_DataOutStage>
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	440b      	add	r3, r1
 80091ca:	3324      	adds	r3, #36	@ 0x24
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	4619      	mov	r1, r3
 80091d2:	f7fe fe58 	bl	8007e86 <USBD_LL_DataInStage>
}
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fe ff68 	bl	80080c2 <USBD_LL_SOF>
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b084      	sub	sp, #16
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009202:	2301      	movs	r3, #1
 8009204:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	799b      	ldrb	r3, [r3, #6]
 800920a:	2b02      	cmp	r3, #2
 800920c:	d001      	beq.n	8009212 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800920e:	f7f7 fe6b 	bl	8000ee8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009218:	7bfa      	ldrb	r2, [r7, #15]
 800921a:	4611      	mov	r1, r2
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe ff18 	bl	8008052 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe fed1 	bl	8007fd0 <USBD_LL_Reset>
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe ff12 	bl	8008070 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7a9b      	ldrb	r3, [r3, #10]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009254:	4b04      	ldr	r3, [pc, #16]	@ (8009268 <HAL_PCD_SuspendCallback+0x30>)
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	4a03      	ldr	r2, [pc, #12]	@ (8009268 <HAL_PCD_SuspendCallback+0x30>)
 800925a:	f043 0306 	orr.w	r3, r3, #6
 800925e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	e000ed00 	.word	0xe000ed00

0800926c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe ff0c 	bl	8008098 <USBD_LL_Resume>
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009290:	4a28      	ldr	r2, [pc, #160]	@ (8009334 <USBD_LL_Init+0xac>)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a26      	ldr	r2, [pc, #152]	@ (8009334 <USBD_LL_Init+0xac>)
 800929c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80092a0:	4b24      	ldr	r3, [pc, #144]	@ (8009334 <USBD_LL_Init+0xac>)
 80092a2:	4a25      	ldr	r2, [pc, #148]	@ (8009338 <USBD_LL_Init+0xb0>)
 80092a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092a6:	4b23      	ldr	r3, [pc, #140]	@ (8009334 <USBD_LL_Init+0xac>)
 80092a8:	2208      	movs	r2, #8
 80092aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092ac:	4b21      	ldr	r3, [pc, #132]	@ (8009334 <USBD_LL_Init+0xac>)
 80092ae:	2202      	movs	r2, #2
 80092b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092b2:	4b20      	ldr	r3, [pc, #128]	@ (8009334 <USBD_LL_Init+0xac>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80092b8:	4b1e      	ldr	r3, [pc, #120]	@ (8009334 <USBD_LL_Init+0xac>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092be:	4b1d      	ldr	r3, [pc, #116]	@ (8009334 <USBD_LL_Init+0xac>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092c4:	481b      	ldr	r0, [pc, #108]	@ (8009334 <USBD_LL_Init+0xac>)
 80092c6:	f7f9 f8ea 	bl	800249e <HAL_PCD_Init>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80092d0:	f7f7 fe0a 	bl	8000ee8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80092da:	2318      	movs	r3, #24
 80092dc:	2200      	movs	r2, #0
 80092de:	2100      	movs	r1, #0
 80092e0:	f7fa fdfb 	bl	8003eda <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80092ea:	2358      	movs	r3, #88	@ 0x58
 80092ec:	2200      	movs	r2, #0
 80092ee:	2180      	movs	r1, #128	@ 0x80
 80092f0:	f7fa fdf3 	bl	8003eda <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80092fa:	23c0      	movs	r3, #192	@ 0xc0
 80092fc:	2200      	movs	r2, #0
 80092fe:	2181      	movs	r1, #129	@ 0x81
 8009300:	f7fa fdeb 	bl	8003eda <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800930a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800930e:	2200      	movs	r2, #0
 8009310:	2101      	movs	r1, #1
 8009312:	f7fa fde2 	bl	8003eda <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800931c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009320:	2200      	movs	r2, #0
 8009322:	2182      	movs	r1, #130	@ 0x82
 8009324:	f7fa fdd9 	bl	8003eda <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	2000102c 	.word	0x2000102c
 8009338:	40005c00 	.word	0x40005c00

0800933c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009352:	4618      	mov	r0, r3
 8009354:	f7f9 f999 	bl	800268a <HAL_PCD_Start>
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f94e 	bl	8009600 <USBD_Get_USB_Status>
 8009364:	4603      	mov	r3, r0
 8009366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009368:	7bbb      	ldrb	r3, [r7, #14]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	4608      	mov	r0, r1
 800937c:	4611      	mov	r1, r2
 800937e:	461a      	mov	r2, r3
 8009380:	4603      	mov	r3, r0
 8009382:	70fb      	strb	r3, [r7, #3]
 8009384:	460b      	mov	r3, r1
 8009386:	70bb      	strb	r3, [r7, #2]
 8009388:	4613      	mov	r3, r2
 800938a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800939a:	78bb      	ldrb	r3, [r7, #2]
 800939c:	883a      	ldrh	r2, [r7, #0]
 800939e:	78f9      	ldrb	r1, [r7, #3]
 80093a0:	f7f9 faed 	bl	800297e <HAL_PCD_EP_Open>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f928 	bl	8009600 <USBD_Get_USB_Status>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7f9 fb2b 	bl	8002a38 <HAL_PCD_EP_Close>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f909 	bl	8009600 <USBD_Get_USB_Status>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f7f9 fbd3 	bl	8002bc6 <HAL_PCD_EP_SetStall>
 8009420:	4603      	mov	r3, r0
 8009422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f8ea 	bl	8009600 <USBD_Get_USB_Status>
 800942c:	4603      	mov	r3, r0
 800942e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009430:	7bbb      	ldrb	r3, [r7, #14]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f7f9 fc14 	bl	8002c86 <HAL_PCD_EP_ClrStall>
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f8cb 	bl	8009600 <USBD_Get_USB_Status>
 800946a:	4603      	mov	r3, r0
 800946c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800946e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800948a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800948c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009490:	2b00      	cmp	r3, #0
 8009492:	da0b      	bge.n	80094ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800949a:	68f9      	ldr	r1, [r7, #12]
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	440b      	add	r3, r1
 80094a6:	3312      	adds	r3, #18
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	e00b      	b.n	80094c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	440b      	add	r3, r1
 80094be:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80094c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr

080094ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094e8:	78fa      	ldrb	r2, [r7, #3]
 80094ea:	4611      	mov	r1, r2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7f9 fa22 	bl	8002936 <HAL_PCD_SetAddress>
 80094f2:	4603      	mov	r3, r0
 80094f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f881 	bl	8009600 <USBD_Get_USB_Status>
 80094fe:	4603      	mov	r3, r0
 8009500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009502:	7bbb      	ldrb	r3, [r7, #14]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	607a      	str	r2, [r7, #4]
 8009516:	461a      	mov	r2, r3
 8009518:	460b      	mov	r3, r1
 800951a:	72fb      	strb	r3, [r7, #11]
 800951c:	4613      	mov	r3, r2
 800951e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800952e:	893b      	ldrh	r3, [r7, #8]
 8009530:	7af9      	ldrb	r1, [r7, #11]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	f7f9 fb10 	bl	8002b58 <HAL_PCD_EP_Transmit>
 8009538:	4603      	mov	r3, r0
 800953a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f85e 	bl	8009600 <USBD_Get_USB_Status>
 8009544:	4603      	mov	r3, r0
 8009546:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009548:	7dbb      	ldrb	r3, [r7, #22]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b086      	sub	sp, #24
 8009556:	af00      	add	r7, sp, #0
 8009558:	60f8      	str	r0, [r7, #12]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	461a      	mov	r2, r3
 800955e:	460b      	mov	r3, r1
 8009560:	72fb      	strb	r3, [r7, #11]
 8009562:	4613      	mov	r3, r2
 8009564:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009574:	893b      	ldrh	r3, [r7, #8]
 8009576:	7af9      	ldrb	r1, [r7, #11]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	f7f9 faa5 	bl	8002ac8 <HAL_PCD_EP_Receive>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f83b 	bl	8009600 <USBD_Get_USB_Status>
 800958a:	4603      	mov	r3, r0
 800958c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800958e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	4611      	mov	r1, r2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f9 fabb 	bl	8002b2a <HAL_PCD_EP_GetRxCount>
 80095b4:	4603      	mov	r3, r0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095c8:	4b02      	ldr	r3, [pc, #8]	@ (80095d4 <USBD_static_malloc+0x14>)
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bc80      	pop	{r7}
 80095d2:	4770      	bx	lr
 80095d4:	20001304 	.word	0x20001304

080095d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]

}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bc80      	pop	{r7}
 80095e8:	4770      	bx	lr

080095ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bc80      	pop	{r7}
 80095fe:	4770      	bx	lr

08009600 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	2b03      	cmp	r3, #3
 8009612:	d817      	bhi.n	8009644 <USBD_Get_USB_Status+0x44>
 8009614:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <USBD_Get_USB_Status+0x1c>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	0800962d 	.word	0x0800962d
 8009620:	08009633 	.word	0x08009633
 8009624:	08009639 	.word	0x08009639
 8009628:	0800963f 	.word	0x0800963f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73fb      	strb	r3, [r7, #15]
    break;
 8009630:	e00b      	b.n	800964a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009632:	2302      	movs	r3, #2
 8009634:	73fb      	strb	r3, [r7, #15]
    break;
 8009636:	e008      	b.n	800964a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009638:	2301      	movs	r3, #1
 800963a:	73fb      	strb	r3, [r7, #15]
    break;
 800963c:	e005      	b.n	800964a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800963e:	2302      	movs	r3, #2
 8009640:	73fb      	strb	r3, [r7, #15]
    break;
 8009642:	e002      	b.n	800964a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009644:	2302      	movs	r3, #2
 8009646:	73fb      	strb	r3, [r7, #15]
    break;
 8009648:	bf00      	nop
  }
  return usb_status;
 800964a:	7bfb      	ldrb	r3, [r7, #15]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop

08009658 <siprintf>:
 8009658:	b40e      	push	{r1, r2, r3}
 800965a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800965e:	b500      	push	{lr}
 8009660:	b09c      	sub	sp, #112	@ 0x70
 8009662:	ab1d      	add	r3, sp, #116	@ 0x74
 8009664:	9002      	str	r0, [sp, #8]
 8009666:	9006      	str	r0, [sp, #24]
 8009668:	9107      	str	r1, [sp, #28]
 800966a:	9104      	str	r1, [sp, #16]
 800966c:	4808      	ldr	r0, [pc, #32]	@ (8009690 <siprintf+0x38>)
 800966e:	4909      	ldr	r1, [pc, #36]	@ (8009694 <siprintf+0x3c>)
 8009670:	f853 2b04 	ldr.w	r2, [r3], #4
 8009674:	9105      	str	r1, [sp, #20]
 8009676:	6800      	ldr	r0, [r0, #0]
 8009678:	a902      	add	r1, sp, #8
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	f000 f9a0 	bl	80099c0 <_svfiprintf_r>
 8009680:	2200      	movs	r2, #0
 8009682:	9b02      	ldr	r3, [sp, #8]
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	b01c      	add	sp, #112	@ 0x70
 8009688:	f85d eb04 	ldr.w	lr, [sp], #4
 800968c:	b003      	add	sp, #12
 800968e:	4770      	bx	lr
 8009690:	2000017c 	.word	0x2000017c
 8009694:	ffff0208 	.word	0xffff0208

08009698 <memset>:
 8009698:	4603      	mov	r3, r0
 800969a:	4402      	add	r2, r0
 800969c:	4293      	cmp	r3, r2
 800969e:	d100      	bne.n	80096a2 <memset+0xa>
 80096a0:	4770      	bx	lr
 80096a2:	f803 1b01 	strb.w	r1, [r3], #1
 80096a6:	e7f9      	b.n	800969c <memset+0x4>

080096a8 <__errno>:
 80096a8:	4b01      	ldr	r3, [pc, #4]	@ (80096b0 <__errno+0x8>)
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	2000017c 	.word	0x2000017c

080096b4 <__libc_init_array>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	2600      	movs	r6, #0
 80096b8:	4d0c      	ldr	r5, [pc, #48]	@ (80096ec <__libc_init_array+0x38>)
 80096ba:	4c0d      	ldr	r4, [pc, #52]	@ (80096f0 <__libc_init_array+0x3c>)
 80096bc:	1b64      	subs	r4, r4, r5
 80096be:	10a4      	asrs	r4, r4, #2
 80096c0:	42a6      	cmp	r6, r4
 80096c2:	d109      	bne.n	80096d8 <__libc_init_array+0x24>
 80096c4:	f000 fc78 	bl	8009fb8 <_init>
 80096c8:	2600      	movs	r6, #0
 80096ca:	4d0a      	ldr	r5, [pc, #40]	@ (80096f4 <__libc_init_array+0x40>)
 80096cc:	4c0a      	ldr	r4, [pc, #40]	@ (80096f8 <__libc_init_array+0x44>)
 80096ce:	1b64      	subs	r4, r4, r5
 80096d0:	10a4      	asrs	r4, r4, #2
 80096d2:	42a6      	cmp	r6, r4
 80096d4:	d105      	bne.n	80096e2 <__libc_init_array+0x2e>
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096dc:	4798      	blx	r3
 80096de:	3601      	adds	r6, #1
 80096e0:	e7ee      	b.n	80096c0 <__libc_init_array+0xc>
 80096e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e6:	4798      	blx	r3
 80096e8:	3601      	adds	r6, #1
 80096ea:	e7f2      	b.n	80096d2 <__libc_init_array+0x1e>
 80096ec:	0800a0f0 	.word	0x0800a0f0
 80096f0:	0800a0f0 	.word	0x0800a0f0
 80096f4:	0800a0f0 	.word	0x0800a0f0
 80096f8:	0800a0f4 	.word	0x0800a0f4

080096fc <__retarget_lock_acquire_recursive>:
 80096fc:	4770      	bx	lr

080096fe <__retarget_lock_release_recursive>:
 80096fe:	4770      	bx	lr

08009700 <memcpy>:
 8009700:	440a      	add	r2, r1
 8009702:	4291      	cmp	r1, r2
 8009704:	f100 33ff 	add.w	r3, r0, #4294967295
 8009708:	d100      	bne.n	800970c <memcpy+0xc>
 800970a:	4770      	bx	lr
 800970c:	b510      	push	{r4, lr}
 800970e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009712:	4291      	cmp	r1, r2
 8009714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009718:	d1f9      	bne.n	800970e <memcpy+0xe>
 800971a:	bd10      	pop	{r4, pc}

0800971c <_free_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4605      	mov	r5, r0
 8009720:	2900      	cmp	r1, #0
 8009722:	d040      	beq.n	80097a6 <_free_r+0x8a>
 8009724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009728:	1f0c      	subs	r4, r1, #4
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfb8      	it	lt
 800972e:	18e4      	addlt	r4, r4, r3
 8009730:	f000 f8de 	bl	80098f0 <__malloc_lock>
 8009734:	4a1c      	ldr	r2, [pc, #112]	@ (80097a8 <_free_r+0x8c>)
 8009736:	6813      	ldr	r3, [r2, #0]
 8009738:	b933      	cbnz	r3, 8009748 <_free_r+0x2c>
 800973a:	6063      	str	r3, [r4, #4]
 800973c:	6014      	str	r4, [r2, #0]
 800973e:	4628      	mov	r0, r5
 8009740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009744:	f000 b8da 	b.w	80098fc <__malloc_unlock>
 8009748:	42a3      	cmp	r3, r4
 800974a:	d908      	bls.n	800975e <_free_r+0x42>
 800974c:	6820      	ldr	r0, [r4, #0]
 800974e:	1821      	adds	r1, r4, r0
 8009750:	428b      	cmp	r3, r1
 8009752:	bf01      	itttt	eq
 8009754:	6819      	ldreq	r1, [r3, #0]
 8009756:	685b      	ldreq	r3, [r3, #4]
 8009758:	1809      	addeq	r1, r1, r0
 800975a:	6021      	streq	r1, [r4, #0]
 800975c:	e7ed      	b.n	800973a <_free_r+0x1e>
 800975e:	461a      	mov	r2, r3
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	b10b      	cbz	r3, 8009768 <_free_r+0x4c>
 8009764:	42a3      	cmp	r3, r4
 8009766:	d9fa      	bls.n	800975e <_free_r+0x42>
 8009768:	6811      	ldr	r1, [r2, #0]
 800976a:	1850      	adds	r0, r2, r1
 800976c:	42a0      	cmp	r0, r4
 800976e:	d10b      	bne.n	8009788 <_free_r+0x6c>
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	4401      	add	r1, r0
 8009774:	1850      	adds	r0, r2, r1
 8009776:	4283      	cmp	r3, r0
 8009778:	6011      	str	r1, [r2, #0]
 800977a:	d1e0      	bne.n	800973e <_free_r+0x22>
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	4408      	add	r0, r1
 8009782:	6010      	str	r0, [r2, #0]
 8009784:	6053      	str	r3, [r2, #4]
 8009786:	e7da      	b.n	800973e <_free_r+0x22>
 8009788:	d902      	bls.n	8009790 <_free_r+0x74>
 800978a:	230c      	movs	r3, #12
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	e7d6      	b.n	800973e <_free_r+0x22>
 8009790:	6820      	ldr	r0, [r4, #0]
 8009792:	1821      	adds	r1, r4, r0
 8009794:	428b      	cmp	r3, r1
 8009796:	bf01      	itttt	eq
 8009798:	6819      	ldreq	r1, [r3, #0]
 800979a:	685b      	ldreq	r3, [r3, #4]
 800979c:	1809      	addeq	r1, r1, r0
 800979e:	6021      	streq	r1, [r4, #0]
 80097a0:	6063      	str	r3, [r4, #4]
 80097a2:	6054      	str	r4, [r2, #4]
 80097a4:	e7cb      	b.n	800973e <_free_r+0x22>
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	20001668 	.word	0x20001668

080097ac <sbrk_aligned>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	4e0f      	ldr	r6, [pc, #60]	@ (80097ec <sbrk_aligned+0x40>)
 80097b0:	460c      	mov	r4, r1
 80097b2:	6831      	ldr	r1, [r6, #0]
 80097b4:	4605      	mov	r5, r0
 80097b6:	b911      	cbnz	r1, 80097be <sbrk_aligned+0x12>
 80097b8:	f000 fbaa 	bl	8009f10 <_sbrk_r>
 80097bc:	6030      	str	r0, [r6, #0]
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	f000 fba5 	bl	8009f10 <_sbrk_r>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	d103      	bne.n	80097d2 <sbrk_aligned+0x26>
 80097ca:	f04f 34ff 	mov.w	r4, #4294967295
 80097ce:	4620      	mov	r0, r4
 80097d0:	bd70      	pop	{r4, r5, r6, pc}
 80097d2:	1cc4      	adds	r4, r0, #3
 80097d4:	f024 0403 	bic.w	r4, r4, #3
 80097d8:	42a0      	cmp	r0, r4
 80097da:	d0f8      	beq.n	80097ce <sbrk_aligned+0x22>
 80097dc:	1a21      	subs	r1, r4, r0
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 fb96 	bl	8009f10 <_sbrk_r>
 80097e4:	3001      	adds	r0, #1
 80097e6:	d1f2      	bne.n	80097ce <sbrk_aligned+0x22>
 80097e8:	e7ef      	b.n	80097ca <sbrk_aligned+0x1e>
 80097ea:	bf00      	nop
 80097ec:	20001664 	.word	0x20001664

080097f0 <_malloc_r>:
 80097f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f4:	1ccd      	adds	r5, r1, #3
 80097f6:	f025 0503 	bic.w	r5, r5, #3
 80097fa:	3508      	adds	r5, #8
 80097fc:	2d0c      	cmp	r5, #12
 80097fe:	bf38      	it	cc
 8009800:	250c      	movcc	r5, #12
 8009802:	2d00      	cmp	r5, #0
 8009804:	4606      	mov	r6, r0
 8009806:	db01      	blt.n	800980c <_malloc_r+0x1c>
 8009808:	42a9      	cmp	r1, r5
 800980a:	d904      	bls.n	8009816 <_malloc_r+0x26>
 800980c:	230c      	movs	r3, #12
 800980e:	6033      	str	r3, [r6, #0]
 8009810:	2000      	movs	r0, #0
 8009812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098ec <_malloc_r+0xfc>
 800981a:	f000 f869 	bl	80098f0 <__malloc_lock>
 800981e:	f8d8 3000 	ldr.w	r3, [r8]
 8009822:	461c      	mov	r4, r3
 8009824:	bb44      	cbnz	r4, 8009878 <_malloc_r+0x88>
 8009826:	4629      	mov	r1, r5
 8009828:	4630      	mov	r0, r6
 800982a:	f7ff ffbf 	bl	80097ac <sbrk_aligned>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	4604      	mov	r4, r0
 8009832:	d158      	bne.n	80098e6 <_malloc_r+0xf6>
 8009834:	f8d8 4000 	ldr.w	r4, [r8]
 8009838:	4627      	mov	r7, r4
 800983a:	2f00      	cmp	r7, #0
 800983c:	d143      	bne.n	80098c6 <_malloc_r+0xd6>
 800983e:	2c00      	cmp	r4, #0
 8009840:	d04b      	beq.n	80098da <_malloc_r+0xea>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	4639      	mov	r1, r7
 8009846:	4630      	mov	r0, r6
 8009848:	eb04 0903 	add.w	r9, r4, r3
 800984c:	f000 fb60 	bl	8009f10 <_sbrk_r>
 8009850:	4581      	cmp	r9, r0
 8009852:	d142      	bne.n	80098da <_malloc_r+0xea>
 8009854:	6821      	ldr	r1, [r4, #0]
 8009856:	4630      	mov	r0, r6
 8009858:	1a6d      	subs	r5, r5, r1
 800985a:	4629      	mov	r1, r5
 800985c:	f7ff ffa6 	bl	80097ac <sbrk_aligned>
 8009860:	3001      	adds	r0, #1
 8009862:	d03a      	beq.n	80098da <_malloc_r+0xea>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	442b      	add	r3, r5
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	f8d8 3000 	ldr.w	r3, [r8]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	bb62      	cbnz	r2, 80098cc <_malloc_r+0xdc>
 8009872:	f8c8 7000 	str.w	r7, [r8]
 8009876:	e00f      	b.n	8009898 <_malloc_r+0xa8>
 8009878:	6822      	ldr	r2, [r4, #0]
 800987a:	1b52      	subs	r2, r2, r5
 800987c:	d420      	bmi.n	80098c0 <_malloc_r+0xd0>
 800987e:	2a0b      	cmp	r2, #11
 8009880:	d917      	bls.n	80098b2 <_malloc_r+0xc2>
 8009882:	1961      	adds	r1, r4, r5
 8009884:	42a3      	cmp	r3, r4
 8009886:	6025      	str	r5, [r4, #0]
 8009888:	bf18      	it	ne
 800988a:	6059      	strne	r1, [r3, #4]
 800988c:	6863      	ldr	r3, [r4, #4]
 800988e:	bf08      	it	eq
 8009890:	f8c8 1000 	streq.w	r1, [r8]
 8009894:	5162      	str	r2, [r4, r5]
 8009896:	604b      	str	r3, [r1, #4]
 8009898:	4630      	mov	r0, r6
 800989a:	f000 f82f 	bl	80098fc <__malloc_unlock>
 800989e:	f104 000b 	add.w	r0, r4, #11
 80098a2:	1d23      	adds	r3, r4, #4
 80098a4:	f020 0007 	bic.w	r0, r0, #7
 80098a8:	1ac2      	subs	r2, r0, r3
 80098aa:	bf1c      	itt	ne
 80098ac:	1a1b      	subne	r3, r3, r0
 80098ae:	50a3      	strne	r3, [r4, r2]
 80098b0:	e7af      	b.n	8009812 <_malloc_r+0x22>
 80098b2:	6862      	ldr	r2, [r4, #4]
 80098b4:	42a3      	cmp	r3, r4
 80098b6:	bf0c      	ite	eq
 80098b8:	f8c8 2000 	streq.w	r2, [r8]
 80098bc:	605a      	strne	r2, [r3, #4]
 80098be:	e7eb      	b.n	8009898 <_malloc_r+0xa8>
 80098c0:	4623      	mov	r3, r4
 80098c2:	6864      	ldr	r4, [r4, #4]
 80098c4:	e7ae      	b.n	8009824 <_malloc_r+0x34>
 80098c6:	463c      	mov	r4, r7
 80098c8:	687f      	ldr	r7, [r7, #4]
 80098ca:	e7b6      	b.n	800983a <_malloc_r+0x4a>
 80098cc:	461a      	mov	r2, r3
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	d1fb      	bne.n	80098cc <_malloc_r+0xdc>
 80098d4:	2300      	movs	r3, #0
 80098d6:	6053      	str	r3, [r2, #4]
 80098d8:	e7de      	b.n	8009898 <_malloc_r+0xa8>
 80098da:	230c      	movs	r3, #12
 80098dc:	4630      	mov	r0, r6
 80098de:	6033      	str	r3, [r6, #0]
 80098e0:	f000 f80c 	bl	80098fc <__malloc_unlock>
 80098e4:	e794      	b.n	8009810 <_malloc_r+0x20>
 80098e6:	6005      	str	r5, [r0, #0]
 80098e8:	e7d6      	b.n	8009898 <_malloc_r+0xa8>
 80098ea:	bf00      	nop
 80098ec:	20001668 	.word	0x20001668

080098f0 <__malloc_lock>:
 80098f0:	4801      	ldr	r0, [pc, #4]	@ (80098f8 <__malloc_lock+0x8>)
 80098f2:	f7ff bf03 	b.w	80096fc <__retarget_lock_acquire_recursive>
 80098f6:	bf00      	nop
 80098f8:	20001660 	.word	0x20001660

080098fc <__malloc_unlock>:
 80098fc:	4801      	ldr	r0, [pc, #4]	@ (8009904 <__malloc_unlock+0x8>)
 80098fe:	f7ff befe 	b.w	80096fe <__retarget_lock_release_recursive>
 8009902:	bf00      	nop
 8009904:	20001660 	.word	0x20001660

08009908 <__ssputs_r>:
 8009908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	461f      	mov	r7, r3
 800990e:	688e      	ldr	r6, [r1, #8]
 8009910:	4682      	mov	sl, r0
 8009912:	42be      	cmp	r6, r7
 8009914:	460c      	mov	r4, r1
 8009916:	4690      	mov	r8, r2
 8009918:	680b      	ldr	r3, [r1, #0]
 800991a:	d82d      	bhi.n	8009978 <__ssputs_r+0x70>
 800991c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009924:	d026      	beq.n	8009974 <__ssputs_r+0x6c>
 8009926:	6965      	ldr	r5, [r4, #20]
 8009928:	6909      	ldr	r1, [r1, #16]
 800992a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800992e:	eba3 0901 	sub.w	r9, r3, r1
 8009932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009936:	1c7b      	adds	r3, r7, #1
 8009938:	444b      	add	r3, r9
 800993a:	106d      	asrs	r5, r5, #1
 800993c:	429d      	cmp	r5, r3
 800993e:	bf38      	it	cc
 8009940:	461d      	movcc	r5, r3
 8009942:	0553      	lsls	r3, r2, #21
 8009944:	d527      	bpl.n	8009996 <__ssputs_r+0x8e>
 8009946:	4629      	mov	r1, r5
 8009948:	f7ff ff52 	bl	80097f0 <_malloc_r>
 800994c:	4606      	mov	r6, r0
 800994e:	b360      	cbz	r0, 80099aa <__ssputs_r+0xa2>
 8009950:	464a      	mov	r2, r9
 8009952:	6921      	ldr	r1, [r4, #16]
 8009954:	f7ff fed4 	bl	8009700 <memcpy>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800995e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	6126      	str	r6, [r4, #16]
 8009966:	444e      	add	r6, r9
 8009968:	6026      	str	r6, [r4, #0]
 800996a:	463e      	mov	r6, r7
 800996c:	6165      	str	r5, [r4, #20]
 800996e:	eba5 0509 	sub.w	r5, r5, r9
 8009972:	60a5      	str	r5, [r4, #8]
 8009974:	42be      	cmp	r6, r7
 8009976:	d900      	bls.n	800997a <__ssputs_r+0x72>
 8009978:	463e      	mov	r6, r7
 800997a:	4632      	mov	r2, r6
 800997c:	4641      	mov	r1, r8
 800997e:	6820      	ldr	r0, [r4, #0]
 8009980:	f000 faac 	bl	8009edc <memmove>
 8009984:	2000      	movs	r0, #0
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	1b9b      	subs	r3, r3, r6
 800998a:	60a3      	str	r3, [r4, #8]
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	4433      	add	r3, r6
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009996:	462a      	mov	r2, r5
 8009998:	f000 fad8 	bl	8009f4c <_realloc_r>
 800999c:	4606      	mov	r6, r0
 800999e:	2800      	cmp	r0, #0
 80099a0:	d1e0      	bne.n	8009964 <__ssputs_r+0x5c>
 80099a2:	4650      	mov	r0, sl
 80099a4:	6921      	ldr	r1, [r4, #16]
 80099a6:	f7ff feb9 	bl	800971c <_free_r>
 80099aa:	230c      	movs	r3, #12
 80099ac:	f8ca 3000 	str.w	r3, [sl]
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	e7e9      	b.n	8009992 <__ssputs_r+0x8a>
	...

080099c0 <_svfiprintf_r>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	4698      	mov	r8, r3
 80099c6:	898b      	ldrh	r3, [r1, #12]
 80099c8:	4607      	mov	r7, r0
 80099ca:	061b      	lsls	r3, r3, #24
 80099cc:	460d      	mov	r5, r1
 80099ce:	4614      	mov	r4, r2
 80099d0:	b09d      	sub	sp, #116	@ 0x74
 80099d2:	d510      	bpl.n	80099f6 <_svfiprintf_r+0x36>
 80099d4:	690b      	ldr	r3, [r1, #16]
 80099d6:	b973      	cbnz	r3, 80099f6 <_svfiprintf_r+0x36>
 80099d8:	2140      	movs	r1, #64	@ 0x40
 80099da:	f7ff ff09 	bl	80097f0 <_malloc_r>
 80099de:	6028      	str	r0, [r5, #0]
 80099e0:	6128      	str	r0, [r5, #16]
 80099e2:	b930      	cbnz	r0, 80099f2 <_svfiprintf_r+0x32>
 80099e4:	230c      	movs	r3, #12
 80099e6:	603b      	str	r3, [r7, #0]
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ec:	b01d      	add	sp, #116	@ 0x74
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f2:	2340      	movs	r3, #64	@ 0x40
 80099f4:	616b      	str	r3, [r5, #20]
 80099f6:	2300      	movs	r3, #0
 80099f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099fa:	2320      	movs	r3, #32
 80099fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a00:	2330      	movs	r3, #48	@ 0x30
 8009a02:	f04f 0901 	mov.w	r9, #1
 8009a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009ba4 <_svfiprintf_r+0x1e4>
 8009a0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a12:	4623      	mov	r3, r4
 8009a14:	469a      	mov	sl, r3
 8009a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a1a:	b10a      	cbz	r2, 8009a20 <_svfiprintf_r+0x60>
 8009a1c:	2a25      	cmp	r2, #37	@ 0x25
 8009a1e:	d1f9      	bne.n	8009a14 <_svfiprintf_r+0x54>
 8009a20:	ebba 0b04 	subs.w	fp, sl, r4
 8009a24:	d00b      	beq.n	8009a3e <_svfiprintf_r+0x7e>
 8009a26:	465b      	mov	r3, fp
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7ff ff6b 	bl	8009908 <__ssputs_r>
 8009a32:	3001      	adds	r0, #1
 8009a34:	f000 80a7 	beq.w	8009b86 <_svfiprintf_r+0x1c6>
 8009a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a3a:	445a      	add	r2, fp
 8009a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 809f 	beq.w	8009b86 <_svfiprintf_r+0x1c6>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a52:	f10a 0a01 	add.w	sl, sl, #1
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	9307      	str	r3, [sp, #28]
 8009a5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a60:	4654      	mov	r4, sl
 8009a62:	2205      	movs	r2, #5
 8009a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a68:	484e      	ldr	r0, [pc, #312]	@ (8009ba4 <_svfiprintf_r+0x1e4>)
 8009a6a:	f000 fa61 	bl	8009f30 <memchr>
 8009a6e:	9a04      	ldr	r2, [sp, #16]
 8009a70:	b9d8      	cbnz	r0, 8009aaa <_svfiprintf_r+0xea>
 8009a72:	06d0      	lsls	r0, r2, #27
 8009a74:	bf44      	itt	mi
 8009a76:	2320      	movmi	r3, #32
 8009a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a7c:	0711      	lsls	r1, r2, #28
 8009a7e:	bf44      	itt	mi
 8009a80:	232b      	movmi	r3, #43	@ 0x2b
 8009a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a86:	f89a 3000 	ldrb.w	r3, [sl]
 8009a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a8c:	d015      	beq.n	8009aba <_svfiprintf_r+0xfa>
 8009a8e:	4654      	mov	r4, sl
 8009a90:	2000      	movs	r0, #0
 8009a92:	f04f 0c0a 	mov.w	ip, #10
 8009a96:	9a07      	ldr	r2, [sp, #28]
 8009a98:	4621      	mov	r1, r4
 8009a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a9e:	3b30      	subs	r3, #48	@ 0x30
 8009aa0:	2b09      	cmp	r3, #9
 8009aa2:	d94b      	bls.n	8009b3c <_svfiprintf_r+0x17c>
 8009aa4:	b1b0      	cbz	r0, 8009ad4 <_svfiprintf_r+0x114>
 8009aa6:	9207      	str	r2, [sp, #28]
 8009aa8:	e014      	b.n	8009ad4 <_svfiprintf_r+0x114>
 8009aaa:	eba0 0308 	sub.w	r3, r0, r8
 8009aae:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	46a2      	mov	sl, r4
 8009ab6:	9304      	str	r3, [sp, #16]
 8009ab8:	e7d2      	b.n	8009a60 <_svfiprintf_r+0xa0>
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	1d19      	adds	r1, r3, #4
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	9103      	str	r1, [sp, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	bfbb      	ittet	lt
 8009ac6:	425b      	neglt	r3, r3
 8009ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8009acc:	9307      	strge	r3, [sp, #28]
 8009ace:	9307      	strlt	r3, [sp, #28]
 8009ad0:	bfb8      	it	lt
 8009ad2:	9204      	strlt	r2, [sp, #16]
 8009ad4:	7823      	ldrb	r3, [r4, #0]
 8009ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ad8:	d10a      	bne.n	8009af0 <_svfiprintf_r+0x130>
 8009ada:	7863      	ldrb	r3, [r4, #1]
 8009adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ade:	d132      	bne.n	8009b46 <_svfiprintf_r+0x186>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	3402      	adds	r4, #2
 8009ae4:	1d1a      	adds	r2, r3, #4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	9203      	str	r2, [sp, #12]
 8009aea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009aee:	9305      	str	r3, [sp, #20]
 8009af0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009ba8 <_svfiprintf_r+0x1e8>
 8009af4:	2203      	movs	r2, #3
 8009af6:	4650      	mov	r0, sl
 8009af8:	7821      	ldrb	r1, [r4, #0]
 8009afa:	f000 fa19 	bl	8009f30 <memchr>
 8009afe:	b138      	cbz	r0, 8009b10 <_svfiprintf_r+0x150>
 8009b00:	2240      	movs	r2, #64	@ 0x40
 8009b02:	9b04      	ldr	r3, [sp, #16]
 8009b04:	eba0 000a 	sub.w	r0, r0, sl
 8009b08:	4082      	lsls	r2, r0
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	3401      	adds	r4, #1
 8009b0e:	9304      	str	r3, [sp, #16]
 8009b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b14:	2206      	movs	r2, #6
 8009b16:	4825      	ldr	r0, [pc, #148]	@ (8009bac <_svfiprintf_r+0x1ec>)
 8009b18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b1c:	f000 fa08 	bl	8009f30 <memchr>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d036      	beq.n	8009b92 <_svfiprintf_r+0x1d2>
 8009b24:	4b22      	ldr	r3, [pc, #136]	@ (8009bb0 <_svfiprintf_r+0x1f0>)
 8009b26:	bb1b      	cbnz	r3, 8009b70 <_svfiprintf_r+0x1b0>
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	3307      	adds	r3, #7
 8009b2c:	f023 0307 	bic.w	r3, r3, #7
 8009b30:	3308      	adds	r3, #8
 8009b32:	9303      	str	r3, [sp, #12]
 8009b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b36:	4433      	add	r3, r6
 8009b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b3a:	e76a      	b.n	8009a12 <_svfiprintf_r+0x52>
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	2001      	movs	r0, #1
 8009b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b44:	e7a8      	b.n	8009a98 <_svfiprintf_r+0xd8>
 8009b46:	2300      	movs	r3, #0
 8009b48:	f04f 0c0a 	mov.w	ip, #10
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	3401      	adds	r4, #1
 8009b50:	9305      	str	r3, [sp, #20]
 8009b52:	4620      	mov	r0, r4
 8009b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b58:	3a30      	subs	r2, #48	@ 0x30
 8009b5a:	2a09      	cmp	r2, #9
 8009b5c:	d903      	bls.n	8009b66 <_svfiprintf_r+0x1a6>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0c6      	beq.n	8009af0 <_svfiprintf_r+0x130>
 8009b62:	9105      	str	r1, [sp, #20]
 8009b64:	e7c4      	b.n	8009af0 <_svfiprintf_r+0x130>
 8009b66:	4604      	mov	r4, r0
 8009b68:	2301      	movs	r3, #1
 8009b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b6e:	e7f0      	b.n	8009b52 <_svfiprintf_r+0x192>
 8009b70:	ab03      	add	r3, sp, #12
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	462a      	mov	r2, r5
 8009b76:	4638      	mov	r0, r7
 8009b78:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb4 <_svfiprintf_r+0x1f4>)
 8009b7a:	a904      	add	r1, sp, #16
 8009b7c:	f3af 8000 	nop.w
 8009b80:	1c42      	adds	r2, r0, #1
 8009b82:	4606      	mov	r6, r0
 8009b84:	d1d6      	bne.n	8009b34 <_svfiprintf_r+0x174>
 8009b86:	89ab      	ldrh	r3, [r5, #12]
 8009b88:	065b      	lsls	r3, r3, #25
 8009b8a:	f53f af2d 	bmi.w	80099e8 <_svfiprintf_r+0x28>
 8009b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b90:	e72c      	b.n	80099ec <_svfiprintf_r+0x2c>
 8009b92:	ab03      	add	r3, sp, #12
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	462a      	mov	r2, r5
 8009b98:	4638      	mov	r0, r7
 8009b9a:	4b06      	ldr	r3, [pc, #24]	@ (8009bb4 <_svfiprintf_r+0x1f4>)
 8009b9c:	a904      	add	r1, sp, #16
 8009b9e:	f000 f87d 	bl	8009c9c <_printf_i>
 8009ba2:	e7ed      	b.n	8009b80 <_svfiprintf_r+0x1c0>
 8009ba4:	0800a0ba 	.word	0x0800a0ba
 8009ba8:	0800a0c0 	.word	0x0800a0c0
 8009bac:	0800a0c4 	.word	0x0800a0c4
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	08009909 	.word	0x08009909

08009bb8 <_printf_common>:
 8009bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	4616      	mov	r6, r2
 8009bbe:	4698      	mov	r8, r3
 8009bc0:	688a      	ldr	r2, [r1, #8]
 8009bc2:	690b      	ldr	r3, [r1, #16]
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	bfb8      	it	lt
 8009bca:	4613      	movlt	r3, r2
 8009bcc:	6033      	str	r3, [r6, #0]
 8009bce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bd8:	b10a      	cbz	r2, 8009bde <_printf_common+0x26>
 8009bda:	3301      	adds	r3, #1
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	0699      	lsls	r1, r3, #26
 8009be2:	bf42      	ittt	mi
 8009be4:	6833      	ldrmi	r3, [r6, #0]
 8009be6:	3302      	addmi	r3, #2
 8009be8:	6033      	strmi	r3, [r6, #0]
 8009bea:	6825      	ldr	r5, [r4, #0]
 8009bec:	f015 0506 	ands.w	r5, r5, #6
 8009bf0:	d106      	bne.n	8009c00 <_printf_common+0x48>
 8009bf2:	f104 0a19 	add.w	sl, r4, #25
 8009bf6:	68e3      	ldr	r3, [r4, #12]
 8009bf8:	6832      	ldr	r2, [r6, #0]
 8009bfa:	1a9b      	subs	r3, r3, r2
 8009bfc:	42ab      	cmp	r3, r5
 8009bfe:	dc2b      	bgt.n	8009c58 <_printf_common+0xa0>
 8009c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	3b00      	subs	r3, #0
 8009c08:	bf18      	it	ne
 8009c0a:	2301      	movne	r3, #1
 8009c0c:	0692      	lsls	r2, r2, #26
 8009c0e:	d430      	bmi.n	8009c72 <_printf_common+0xba>
 8009c10:	4641      	mov	r1, r8
 8009c12:	4638      	mov	r0, r7
 8009c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c18:	47c8      	blx	r9
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	d023      	beq.n	8009c66 <_printf_common+0xae>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	6922      	ldr	r2, [r4, #16]
 8009c22:	f003 0306 	and.w	r3, r3, #6
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	bf14      	ite	ne
 8009c2a:	2500      	movne	r5, #0
 8009c2c:	6833      	ldreq	r3, [r6, #0]
 8009c2e:	f04f 0600 	mov.w	r6, #0
 8009c32:	bf08      	it	eq
 8009c34:	68e5      	ldreq	r5, [r4, #12]
 8009c36:	f104 041a 	add.w	r4, r4, #26
 8009c3a:	bf08      	it	eq
 8009c3c:	1aed      	subeq	r5, r5, r3
 8009c3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c42:	bf08      	it	eq
 8009c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	bfc4      	itt	gt
 8009c4c:	1a9b      	subgt	r3, r3, r2
 8009c4e:	18ed      	addgt	r5, r5, r3
 8009c50:	42b5      	cmp	r5, r6
 8009c52:	d11a      	bne.n	8009c8a <_printf_common+0xd2>
 8009c54:	2000      	movs	r0, #0
 8009c56:	e008      	b.n	8009c6a <_printf_common+0xb2>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c8      	blx	r9
 8009c62:	3001      	adds	r0, #1
 8009c64:	d103      	bne.n	8009c6e <_printf_common+0xb6>
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6e:	3501      	adds	r5, #1
 8009c70:	e7c1      	b.n	8009bf6 <_printf_common+0x3e>
 8009c72:	2030      	movs	r0, #48	@ 0x30
 8009c74:	18e1      	adds	r1, r4, r3
 8009c76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c80:	4422      	add	r2, r4
 8009c82:	3302      	adds	r3, #2
 8009c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c88:	e7c2      	b.n	8009c10 <_printf_common+0x58>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	4641      	mov	r1, r8
 8009c90:	4638      	mov	r0, r7
 8009c92:	47c8      	blx	r9
 8009c94:	3001      	adds	r0, #1
 8009c96:	d0e6      	beq.n	8009c66 <_printf_common+0xae>
 8009c98:	3601      	adds	r6, #1
 8009c9a:	e7d9      	b.n	8009c50 <_printf_common+0x98>

08009c9c <_printf_i>:
 8009c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	7e0f      	ldrb	r7, [r1, #24]
 8009ca2:	4691      	mov	r9, r2
 8009ca4:	2f78      	cmp	r7, #120	@ 0x78
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	460c      	mov	r4, r1
 8009caa:	469a      	mov	sl, r3
 8009cac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009cb2:	d807      	bhi.n	8009cc4 <_printf_i+0x28>
 8009cb4:	2f62      	cmp	r7, #98	@ 0x62
 8009cb6:	d80a      	bhi.n	8009cce <_printf_i+0x32>
 8009cb8:	2f00      	cmp	r7, #0
 8009cba:	f000 80d3 	beq.w	8009e64 <_printf_i+0x1c8>
 8009cbe:	2f58      	cmp	r7, #88	@ 0x58
 8009cc0:	f000 80ba 	beq.w	8009e38 <_printf_i+0x19c>
 8009cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ccc:	e03a      	b.n	8009d44 <_printf_i+0xa8>
 8009cce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cd2:	2b15      	cmp	r3, #21
 8009cd4:	d8f6      	bhi.n	8009cc4 <_printf_i+0x28>
 8009cd6:	a101      	add	r1, pc, #4	@ (adr r1, 8009cdc <_printf_i+0x40>)
 8009cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cdc:	08009d35 	.word	0x08009d35
 8009ce0:	08009d49 	.word	0x08009d49
 8009ce4:	08009cc5 	.word	0x08009cc5
 8009ce8:	08009cc5 	.word	0x08009cc5
 8009cec:	08009cc5 	.word	0x08009cc5
 8009cf0:	08009cc5 	.word	0x08009cc5
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009cc5 	.word	0x08009cc5
 8009cfc:	08009cc5 	.word	0x08009cc5
 8009d00:	08009cc5 	.word	0x08009cc5
 8009d04:	08009cc5 	.word	0x08009cc5
 8009d08:	08009e4b 	.word	0x08009e4b
 8009d0c:	08009d73 	.word	0x08009d73
 8009d10:	08009e05 	.word	0x08009e05
 8009d14:	08009cc5 	.word	0x08009cc5
 8009d18:	08009cc5 	.word	0x08009cc5
 8009d1c:	08009e6d 	.word	0x08009e6d
 8009d20:	08009cc5 	.word	0x08009cc5
 8009d24:	08009d73 	.word	0x08009d73
 8009d28:	08009cc5 	.word	0x08009cc5
 8009d2c:	08009cc5 	.word	0x08009cc5
 8009d30:	08009e0d 	.word	0x08009e0d
 8009d34:	6833      	ldr	r3, [r6, #0]
 8009d36:	1d1a      	adds	r2, r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6032      	str	r2, [r6, #0]
 8009d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d44:	2301      	movs	r3, #1
 8009d46:	e09e      	b.n	8009e86 <_printf_i+0x1ea>
 8009d48:	6833      	ldr	r3, [r6, #0]
 8009d4a:	6820      	ldr	r0, [r4, #0]
 8009d4c:	1d19      	adds	r1, r3, #4
 8009d4e:	6031      	str	r1, [r6, #0]
 8009d50:	0606      	lsls	r6, r0, #24
 8009d52:	d501      	bpl.n	8009d58 <_printf_i+0xbc>
 8009d54:	681d      	ldr	r5, [r3, #0]
 8009d56:	e003      	b.n	8009d60 <_printf_i+0xc4>
 8009d58:	0645      	lsls	r5, r0, #25
 8009d5a:	d5fb      	bpl.n	8009d54 <_printf_i+0xb8>
 8009d5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	da03      	bge.n	8009d6c <_printf_i+0xd0>
 8009d64:	232d      	movs	r3, #45	@ 0x2d
 8009d66:	426d      	negs	r5, r5
 8009d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d6c:	230a      	movs	r3, #10
 8009d6e:	4859      	ldr	r0, [pc, #356]	@ (8009ed4 <_printf_i+0x238>)
 8009d70:	e011      	b.n	8009d96 <_printf_i+0xfa>
 8009d72:	6821      	ldr	r1, [r4, #0]
 8009d74:	6833      	ldr	r3, [r6, #0]
 8009d76:	0608      	lsls	r0, r1, #24
 8009d78:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d7c:	d402      	bmi.n	8009d84 <_printf_i+0xe8>
 8009d7e:	0649      	lsls	r1, r1, #25
 8009d80:	bf48      	it	mi
 8009d82:	b2ad      	uxthmi	r5, r5
 8009d84:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	bf14      	ite	ne
 8009d8a:	230a      	movne	r3, #10
 8009d8c:	2308      	moveq	r3, #8
 8009d8e:	4851      	ldr	r0, [pc, #324]	@ (8009ed4 <_printf_i+0x238>)
 8009d90:	2100      	movs	r1, #0
 8009d92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d96:	6866      	ldr	r6, [r4, #4]
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	bfa8      	it	ge
 8009d9c:	6821      	ldrge	r1, [r4, #0]
 8009d9e:	60a6      	str	r6, [r4, #8]
 8009da0:	bfa4      	itt	ge
 8009da2:	f021 0104 	bicge.w	r1, r1, #4
 8009da6:	6021      	strge	r1, [r4, #0]
 8009da8:	b90d      	cbnz	r5, 8009dae <_printf_i+0x112>
 8009daa:	2e00      	cmp	r6, #0
 8009dac:	d04b      	beq.n	8009e46 <_printf_i+0x1aa>
 8009dae:	4616      	mov	r6, r2
 8009db0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009db4:	fb03 5711 	mls	r7, r3, r1, r5
 8009db8:	5dc7      	ldrb	r7, [r0, r7]
 8009dba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dbe:	462f      	mov	r7, r5
 8009dc0:	42bb      	cmp	r3, r7
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	d9f4      	bls.n	8009db0 <_printf_i+0x114>
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	d10b      	bne.n	8009de2 <_printf_i+0x146>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	07df      	lsls	r7, r3, #31
 8009dce:	d508      	bpl.n	8009de2 <_printf_i+0x146>
 8009dd0:	6923      	ldr	r3, [r4, #16]
 8009dd2:	6861      	ldr	r1, [r4, #4]
 8009dd4:	4299      	cmp	r1, r3
 8009dd6:	bfde      	ittt	le
 8009dd8:	2330      	movle	r3, #48	@ 0x30
 8009dda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009de2:	1b92      	subs	r2, r2, r6
 8009de4:	6122      	str	r2, [r4, #16]
 8009de6:	464b      	mov	r3, r9
 8009de8:	4621      	mov	r1, r4
 8009dea:	4640      	mov	r0, r8
 8009dec:	f8cd a000 	str.w	sl, [sp]
 8009df0:	aa03      	add	r2, sp, #12
 8009df2:	f7ff fee1 	bl	8009bb8 <_printf_common>
 8009df6:	3001      	adds	r0, #1
 8009df8:	d14a      	bne.n	8009e90 <_printf_i+0x1f4>
 8009dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfe:	b004      	add	sp, #16
 8009e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	f043 0320 	orr.w	r3, r3, #32
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	2778      	movs	r7, #120	@ 0x78
 8009e0e:	4832      	ldr	r0, [pc, #200]	@ (8009ed8 <_printf_i+0x23c>)
 8009e10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	6831      	ldr	r1, [r6, #0]
 8009e18:	061f      	lsls	r7, r3, #24
 8009e1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e1e:	d402      	bmi.n	8009e26 <_printf_i+0x18a>
 8009e20:	065f      	lsls	r7, r3, #25
 8009e22:	bf48      	it	mi
 8009e24:	b2ad      	uxthmi	r5, r5
 8009e26:	6031      	str	r1, [r6, #0]
 8009e28:	07d9      	lsls	r1, r3, #31
 8009e2a:	bf44      	itt	mi
 8009e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e30:	6023      	strmi	r3, [r4, #0]
 8009e32:	b11d      	cbz	r5, 8009e3c <_printf_i+0x1a0>
 8009e34:	2310      	movs	r3, #16
 8009e36:	e7ab      	b.n	8009d90 <_printf_i+0xf4>
 8009e38:	4826      	ldr	r0, [pc, #152]	@ (8009ed4 <_printf_i+0x238>)
 8009e3a:	e7e9      	b.n	8009e10 <_printf_i+0x174>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	f023 0320 	bic.w	r3, r3, #32
 8009e42:	6023      	str	r3, [r4, #0]
 8009e44:	e7f6      	b.n	8009e34 <_printf_i+0x198>
 8009e46:	4616      	mov	r6, r2
 8009e48:	e7bd      	b.n	8009dc6 <_printf_i+0x12a>
 8009e4a:	6833      	ldr	r3, [r6, #0]
 8009e4c:	6825      	ldr	r5, [r4, #0]
 8009e4e:	1d18      	adds	r0, r3, #4
 8009e50:	6961      	ldr	r1, [r4, #20]
 8009e52:	6030      	str	r0, [r6, #0]
 8009e54:	062e      	lsls	r6, r5, #24
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	d501      	bpl.n	8009e5e <_printf_i+0x1c2>
 8009e5a:	6019      	str	r1, [r3, #0]
 8009e5c:	e002      	b.n	8009e64 <_printf_i+0x1c8>
 8009e5e:	0668      	lsls	r0, r5, #25
 8009e60:	d5fb      	bpl.n	8009e5a <_printf_i+0x1be>
 8009e62:	8019      	strh	r1, [r3, #0]
 8009e64:	2300      	movs	r3, #0
 8009e66:	4616      	mov	r6, r2
 8009e68:	6123      	str	r3, [r4, #16]
 8009e6a:	e7bc      	b.n	8009de6 <_printf_i+0x14a>
 8009e6c:	6833      	ldr	r3, [r6, #0]
 8009e6e:	2100      	movs	r1, #0
 8009e70:	1d1a      	adds	r2, r3, #4
 8009e72:	6032      	str	r2, [r6, #0]
 8009e74:	681e      	ldr	r6, [r3, #0]
 8009e76:	6862      	ldr	r2, [r4, #4]
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f859 	bl	8009f30 <memchr>
 8009e7e:	b108      	cbz	r0, 8009e84 <_printf_i+0x1e8>
 8009e80:	1b80      	subs	r0, r0, r6
 8009e82:	6060      	str	r0, [r4, #4]
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e8e:	e7aa      	b.n	8009de6 <_printf_i+0x14a>
 8009e90:	4632      	mov	r2, r6
 8009e92:	4649      	mov	r1, r9
 8009e94:	4640      	mov	r0, r8
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	47d0      	blx	sl
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d0ad      	beq.n	8009dfa <_printf_i+0x15e>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	079b      	lsls	r3, r3, #30
 8009ea2:	d413      	bmi.n	8009ecc <_printf_i+0x230>
 8009ea4:	68e0      	ldr	r0, [r4, #12]
 8009ea6:	9b03      	ldr	r3, [sp, #12]
 8009ea8:	4298      	cmp	r0, r3
 8009eaa:	bfb8      	it	lt
 8009eac:	4618      	movlt	r0, r3
 8009eae:	e7a6      	b.n	8009dfe <_printf_i+0x162>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	4632      	mov	r2, r6
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	47d0      	blx	sl
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d09d      	beq.n	8009dfa <_printf_i+0x15e>
 8009ebe:	3501      	adds	r5, #1
 8009ec0:	68e3      	ldr	r3, [r4, #12]
 8009ec2:	9903      	ldr	r1, [sp, #12]
 8009ec4:	1a5b      	subs	r3, r3, r1
 8009ec6:	42ab      	cmp	r3, r5
 8009ec8:	dcf2      	bgt.n	8009eb0 <_printf_i+0x214>
 8009eca:	e7eb      	b.n	8009ea4 <_printf_i+0x208>
 8009ecc:	2500      	movs	r5, #0
 8009ece:	f104 0619 	add.w	r6, r4, #25
 8009ed2:	e7f5      	b.n	8009ec0 <_printf_i+0x224>
 8009ed4:	0800a0cb 	.word	0x0800a0cb
 8009ed8:	0800a0dc 	.word	0x0800a0dc

08009edc <memmove>:
 8009edc:	4288      	cmp	r0, r1
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	eb01 0402 	add.w	r4, r1, r2
 8009ee4:	d902      	bls.n	8009eec <memmove+0x10>
 8009ee6:	4284      	cmp	r4, r0
 8009ee8:	4623      	mov	r3, r4
 8009eea:	d807      	bhi.n	8009efc <memmove+0x20>
 8009eec:	1e43      	subs	r3, r0, #1
 8009eee:	42a1      	cmp	r1, r4
 8009ef0:	d008      	beq.n	8009f04 <memmove+0x28>
 8009ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009efa:	e7f8      	b.n	8009eee <memmove+0x12>
 8009efc:	4601      	mov	r1, r0
 8009efe:	4402      	add	r2, r0
 8009f00:	428a      	cmp	r2, r1
 8009f02:	d100      	bne.n	8009f06 <memmove+0x2a>
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f0e:	e7f7      	b.n	8009f00 <memmove+0x24>

08009f10 <_sbrk_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	2300      	movs	r3, #0
 8009f14:	4d05      	ldr	r5, [pc, #20]	@ (8009f2c <_sbrk_r+0x1c>)
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	602b      	str	r3, [r5, #0]
 8009f1c:	f7f7 f852 	bl	8000fc4 <_sbrk>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_sbrk_r+0x1a>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_sbrk_r+0x1a>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	2000165c 	.word	0x2000165c

08009f30 <memchr>:
 8009f30:	4603      	mov	r3, r0
 8009f32:	b510      	push	{r4, lr}
 8009f34:	b2c9      	uxtb	r1, r1
 8009f36:	4402      	add	r2, r0
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	d101      	bne.n	8009f42 <memchr+0x12>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	e003      	b.n	8009f4a <memchr+0x1a>
 8009f42:	7804      	ldrb	r4, [r0, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	428c      	cmp	r4, r1
 8009f48:	d1f6      	bne.n	8009f38 <memchr+0x8>
 8009f4a:	bd10      	pop	{r4, pc}

08009f4c <_realloc_r>:
 8009f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f50:	4680      	mov	r8, r0
 8009f52:	4615      	mov	r5, r2
 8009f54:	460c      	mov	r4, r1
 8009f56:	b921      	cbnz	r1, 8009f62 <_realloc_r+0x16>
 8009f58:	4611      	mov	r1, r2
 8009f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5e:	f7ff bc47 	b.w	80097f0 <_malloc_r>
 8009f62:	b92a      	cbnz	r2, 8009f70 <_realloc_r+0x24>
 8009f64:	f7ff fbda 	bl	800971c <_free_r>
 8009f68:	2400      	movs	r4, #0
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	f000 f81a 	bl	8009fa8 <_malloc_usable_size_r>
 8009f74:	4285      	cmp	r5, r0
 8009f76:	4606      	mov	r6, r0
 8009f78:	d802      	bhi.n	8009f80 <_realloc_r+0x34>
 8009f7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009f7e:	d8f4      	bhi.n	8009f6a <_realloc_r+0x1e>
 8009f80:	4629      	mov	r1, r5
 8009f82:	4640      	mov	r0, r8
 8009f84:	f7ff fc34 	bl	80097f0 <_malloc_r>
 8009f88:	4607      	mov	r7, r0
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d0ec      	beq.n	8009f68 <_realloc_r+0x1c>
 8009f8e:	42b5      	cmp	r5, r6
 8009f90:	462a      	mov	r2, r5
 8009f92:	4621      	mov	r1, r4
 8009f94:	bf28      	it	cs
 8009f96:	4632      	movcs	r2, r6
 8009f98:	f7ff fbb2 	bl	8009700 <memcpy>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	f7ff fbbc 	bl	800971c <_free_r>
 8009fa4:	463c      	mov	r4, r7
 8009fa6:	e7e0      	b.n	8009f6a <_realloc_r+0x1e>

08009fa8 <_malloc_usable_size_r>:
 8009fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fac:	1f18      	subs	r0, r3, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfbc      	itt	lt
 8009fb2:	580b      	ldrlt	r3, [r1, r0]
 8009fb4:	18c0      	addlt	r0, r0, r3
 8009fb6:	4770      	bx	lr

08009fb8 <_init>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	bf00      	nop
 8009fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fbe:	bc08      	pop	{r3}
 8009fc0:	469e      	mov	lr, r3
 8009fc2:	4770      	bx	lr

08009fc4 <_fini>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	bf00      	nop
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr
